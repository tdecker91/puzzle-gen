{"version":3,"file":"puzzleGen.min.js","mappings":"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","sources":["webpack://puzzleGen/webpack/universalModuleDefinition","webpack://puzzleGen/webpack/bootstrap","webpack://puzzleGen/webpack/runtime/define property getters","webpack://puzzleGen/webpack/runtime/hasOwnProperty shorthand","webpack://puzzleGen/webpack/runtime/make namespace object","webpack://puzzleGen/./src/algorithms/algorithm.ts","webpack://puzzleGen/./src/algorithms/cube.ts","webpack://puzzleGen/./src/simulator/simulator.ts","webpack://puzzleGen/./src/puzzles/colors.ts","webpack://puzzleGen/./src/puzzles/square1/enum.ts","webpack://puzzleGen/./src/math/vector.ts","webpack://puzzleGen/./src/puzzles/square1/constants.ts","webpack://puzzleGen/./src/algorithms/square1.ts","webpack://puzzleGen/./src/simulator/square1/square1Simulator.ts","webpack://puzzleGen/./src/algorithms/skewb.ts","webpack://puzzleGen/./src/utils/arrays.ts","webpack://puzzleGen/./src/simulator/skewb/skewbSimulator.ts","webpack://puzzleGen/./src/algorithms/pyraminx.ts","webpack://puzzleGen/./src/simulator/pyraminx/pyraminxSimulator.ts","webpack://puzzleGen/./src/simulator/megaminx/constants.ts","webpack://puzzleGen/./src/algorithms/megaminx.ts","webpack://puzzleGen/./src/simulator/megaminx/megaminxSimulator.ts","webpack://puzzleGen/./src/simulator/rubiksCube/constants.ts","webpack://puzzleGen/./src/math/utils.ts","webpack://puzzleGen/./src/simulator/rubiksCube/rubiksCubeSimulator.ts","webpack://puzzleGen/./src/geometry/uid.ts","webpack://puzzleGen/./src/math/matrix.ts","webpack://puzzleGen/./src/geometry/object3d.ts","webpack://puzzleGen/./src/geometry/group.ts","webpack://puzzleGen/./src/math/constants.ts","webpack://puzzleGen/./src/puzzles/square1/interface.ts","webpack://puzzleGen/./src/geometry/face.ts","webpack://puzzleGen/./src/geometry/geometry.ts","webpack://puzzleGen/./src/puzzles/square1/square1Net.ts","webpack://puzzleGen/./src/puzzles/square1/square1.ts","webpack://puzzleGen/./src/geometry/plane.ts","webpack://puzzleGen/./src/geometry/triangle.ts","webpack://puzzleGen/./src/puzzles/skewb/skewbNet.ts","webpack://puzzleGen/./src/puzzles/skewb/skewb.ts","webpack://puzzleGen/./src/geometry/triangleLattice.ts","webpack://puzzleGen/./src/puzzles/pyraminx/pyraminxNet.ts","webpack://puzzleGen/./src/puzzles/pyraminx/pyraminx.ts","webpack://puzzleGen/./src/geometry/dividedPentagon.ts","webpack://puzzleGen/./src/puzzles/megaminx/megaminxNet.ts","webpack://puzzleGen/./src/puzzles/megaminx/megaminx.ts","webpack://puzzleGen/./src/geometry/grid.ts","webpack://puzzleGen/./src/puzzles/rubiksCube/rubiksCubeTop.ts","webpack://puzzleGen/./src/puzzles/rubiksCube/rubiksCubeNet.ts","webpack://puzzleGen/./src/puzzles/rubiksCube/rubiksCube.ts","webpack://puzzleGen/./src/geometry/arrow.ts","webpack://puzzleGen/./src/rendering/utils.ts","webpack://puzzleGen/./src/rendering/polygonRenderer.ts","webpack://puzzleGen/./src/svg/svg.ts","webpack://puzzleGen/./src/rendering/htmlSvgRenderer.ts","webpack://puzzleGen/./src/rendering/htmlCanvasRenderer.ts","webpack://puzzleGen/./src/rendering/camera.ts","webpack://puzzleGen/./src/rendering/scene.ts","webpack://puzzleGen/./src/visualizer/enum.ts","webpack://puzzleGen/./src/visualizer/options.ts","webpack://puzzleGen/./src/visualizer/interface.ts","webpack://puzzleGen/./src/puzzles/megaminx/megaminxTop.ts","webpack://puzzleGen/./src/algorithms/clock.ts","webpack://puzzleGen/./src/simulator/clock/clockSimulator.ts","webpack://puzzleGen/./src/geometry/circle.ts","webpack://puzzleGen/./src/puzzles/clock/data.ts","webpack://puzzleGen/./src/puzzles/clock/clock.ts","webpack://puzzleGen/./src/visualizer/puzzleCreator.ts","webpack://puzzleGen/./src/math/quaternion.ts","webpack://puzzleGen/./src/visualizer/visualizer.ts","webpack://puzzleGen/./src/visualizer/svg.ts","webpack://puzzleGen/./src/visualizer/png.ts","webpack://puzzleGen/./src/visualizer/canvas.ts","webpack://puzzleGen/./src/visualizer/mask.ts","webpack://puzzleGen/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"puzzleGen\"] = factory();\n\telse\n\t\troot[\"puzzleGen\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export var TurnType;\n(function (TurnType) {\n    TurnType[TurnType[\"Clockwise\"] = 0] = \"Clockwise\";\n    TurnType[TurnType[\"CounterClockwise\"] = 1] = \"CounterClockwise\";\n    TurnType[TurnType[\"Double\"] = 2] = \"Double\";\n})(TurnType || (TurnType = {}));\n","import { TurnType } from \"./algorithm\";\nvar TurnAbbreviation;\n(function (TurnAbbreviation) {\n    TurnAbbreviation[\"Clockwise\"] = \"\";\n    TurnAbbreviation[\"CounterClockwise\"] = \"'\";\n    TurnAbbreviation[\"Double\"] = \"2\";\n})(TurnAbbreviation || (TurnAbbreviation = {}));\nexport var CubeAlgorithmUnit;\n(function (CubeAlgorithmUnit) {\n    CubeAlgorithmUnit[\"F\"] = \"F\";\n    CubeAlgorithmUnit[\"U\"] = \"U\";\n    CubeAlgorithmUnit[\"R\"] = \"R\";\n    CubeAlgorithmUnit[\"L\"] = \"L\";\n    CubeAlgorithmUnit[\"D\"] = \"D\";\n    CubeAlgorithmUnit[\"B\"] = \"B\";\n    CubeAlgorithmUnit[\"M\"] = \"M\";\n    CubeAlgorithmUnit[\"E\"] = \"E\";\n    CubeAlgorithmUnit[\"S\"] = \"S\";\n    CubeAlgorithmUnit[\"X\"] = \"x\";\n    CubeAlgorithmUnit[\"Y\"] = \"y\";\n    CubeAlgorithmUnit[\"Z\"] = \"z\";\n})(CubeAlgorithmUnit || (CubeAlgorithmUnit = {}));\nexport const possibleMoves = [\n    CubeAlgorithmUnit.F,\n    CubeAlgorithmUnit.U,\n    CubeAlgorithmUnit.R,\n    CubeAlgorithmUnit.L,\n    CubeAlgorithmUnit.D,\n    CubeAlgorithmUnit.B,\n    CubeAlgorithmUnit.M,\n    CubeAlgorithmUnit.E,\n    CubeAlgorithmUnit.S,\n    CubeAlgorithmUnit.X,\n    CubeAlgorithmUnit.Y,\n    CubeAlgorithmUnit.Z,\n];\nconst cubeRotations = [\n    CubeAlgorithmUnit.X,\n    CubeAlgorithmUnit.Y,\n    CubeAlgorithmUnit.Z,\n];\nconst cubeTurnRegex = /([0-9]+)?([UuFfRrDdLlBbMESxyz])(w)?([2\\'])?/g;\n/**\n * Takes in an algorithm string and parses the turns from it\n * algorithm string format should be moves separated by a single space\n * (ex. \"U R2 L' x\")\n *\n * https://www.worldcubeassociation.org/regulations/#article-12-notation\n */\nexport function parseCubeAlgorithm(algorithm) {\n    if (!algorithm) {\n        return [];\n    }\n    let turns = [];\n    let match;\n    while ((match = cubeTurnRegex.exec(algorithm))) {\n        let rawSlices = match[1];\n        let rawFace = match[2];\n        let outerBlockIndicator = match[3];\n        let rawType = match[4] || TurnAbbreviation.Clockwise; // Default to clockwise\n        let isLowerCaseMove = rawFace === rawFace.toLowerCase() &&\n            cubeRotations.indexOf(rawFace) === -1;\n        if (isLowerCaseMove) {\n            rawFace = rawFace.toUpperCase();\n        }\n        let turn = {\n            unit: getMove(rawFace),\n            turnType: getTurnType(rawType),\n            slices: isLowerCaseMove ? 2 : getSlices(rawSlices, outerBlockIndicator),\n        };\n        turns.push(turn);\n    }\n    return turns;\n}\nfunction getSlices(rawSlices, outerBlockIndicator) {\n    if (outerBlockIndicator && !rawSlices) {\n        return 2;\n    }\n    else if (!outerBlockIndicator && rawSlices) {\n        throw new Error(`Invalid move: Cannot specify num slices if outer block move indicator 'w' is not present`);\n    }\n    else if (!outerBlockIndicator && !rawSlices) {\n        return 1;\n    }\n    else {\n        const intValue = parseInt(rawSlices);\n        if (intValue > 1) {\n            return intValue;\n        }\n        throw new Error(`Invalid outer block move (${intValue}) must be greater than 1`);\n    }\n}\nfunction getMove(rawFace) {\n    if (possibleMoves.indexOf(rawFace) < 0) {\n        throw new Error(`Invalid move (${rawFace}): Possible turn faces are [U R F L D B M E S x y z]`);\n    }\n    else\n        return rawFace;\n}\nfunction getTurnType(rawType) {\n    switch (rawType) {\n        case TurnAbbreviation.Clockwise:\n            return TurnType.Clockwise;\n        case TurnAbbreviation.CounterClockwise:\n            return TurnType.CounterClockwise;\n        case TurnAbbreviation.Double:\n            return TurnType.Double;\n        default:\n            throw new Error(`Invalid move modifier (${rawType})`);\n    }\n}\n","/**\n * Class for simulating turns on symmetric twisty puzzles. This is acheived by\n * defining a set of faces with stickers, and a set of turns.\n *\n * @see {@link SkewbSimulator}\n *\n * @example\n * ```typescript\n * // extend class to create a coin simulator\n * export class CoinSimulator extends Simulator {\n *   constructor() {\n *     super()\n *\n *     // Add a head face with one \"heads\" sticker\n *     // Label this face \"top\"\n *      const { stickerIds: top } = this.addFace(['heads'], 'top');\n *\n *     // Add a tail face with one \"tails\" sticker\n *     // Label this face \"bottom\"\n *      const { stickerIds: bottom } = this.addface(['tails'], 'bottom');\n *\n *     // Define a turn by providing the\n *     // sticker id for the top and bottom stickers.\n *     // Label this \"turnOver\"\n *     this.addTurn([top[0], bottom[0]], \"turnOver\");\n *   }\n *\n *   // Flip the coin over\n *   turnOver() {\n *     // Execute the \"turnOver\" turn we created\n *     this.doTurn(\"turnOver\")\n *   }\n *\n * }\n * ```\n */\nexport class Simulator {\n    constructor() {\n        this.stickers = new Map();\n        this.faces = new Map();\n        this.turns = new Map();\n    }\n    /**\n     * Adds a face of stickers to the puzzle.\n     *\n     * @param stickers - array of sticker values\n     * @param label - label to reference the face by\n     * @returns object with the faceId and list of sticker ids.\n     *  faceId will be label if that is present. Otherwise it\n     *  will be generated.\n     * @example\n     * ```\n     * const stickers = ['red', 'red', 'red', 'red'];\n     *\n     * // Add the F face\n     * addFace(stickers, 'F')\n     * ```\n     */\n    addFace(stickers, label) {\n        if (label && this.faces.has(label)) {\n            throw `Face ${label} already exists`;\n        }\n        else if (!label) {\n            label = (this.faces.size + 1).toString();\n        }\n        // Add Stickers\n        const stickerIds = stickers.reduce((stickerIds, nextSticker) => {\n            const stickerId = (this.stickers.size + 1).toString();\n            this.stickers.set(stickerId, nextSticker);\n            stickerIds.push(stickerId);\n            return stickerIds;\n        }, []);\n        // Add Face\n        this.faces.set(label, stickerIds);\n        return {\n            faceId: label,\n            stickerIds,\n        };\n    }\n    /**\n     * Creates a turn definition that tells the simulator\n     * what sticker values to change when turning.\n     *\n     * A change is an array with two sticker ids (ex. ['sticker1', 'sticker2'])\n     * this means that when turning 'sticker1' will go to 'sticker2'.\n     * Or when doing a reverse turn, `sticker2' will go to 'sticker1'\n     *\n     * @param changes - list of turn definitions.\n     * @param label - label to reference the turn by\n     * @returns label of the turn that was created\n     */\n    addTurn(changes, label) {\n        if (label && this.turns.has(label)) {\n            throw `Turn ${label} already exists`;\n        }\n        else if (!label) {\n            label = (this.turns.size + 1).toString();\n        }\n        this.turns.set(label, changes);\n        return label;\n    }\n    /**\n     * Executes a turn on the puzzle\n     *\n     * @param label - label of the turn to execute\n     * @param prime - true to do the turn in reverse\n     */\n    doTurn(label, reverse = false) {\n        const changes = this.turns.get(label);\n        if (!changes) {\n            throw `Unknown turn ${label}`;\n        }\n        let movingSticker = reverse ? 1 : 0;\n        let replacedSticker = reverse ? 0 : 1;\n        let cached = {};\n        changes.forEach((change) => {\n            // Cache value we're replacing\n            cached[change[replacedSticker]] = this.stickers.get(change[replacedSticker]);\n            // Update sticker with new value\n            this.stickers.set(change[replacedSticker], cached[change[movingSticker]] ||\n                this.stickers.get(change[movingSticker]));\n        });\n    }\n    /**\n     * checks that every sticker on every face\n     * is the same value\n     */\n    isSolved() {\n        const faces = this.faces.entries();\n        let entry = faces.next();\n        do {\n            const stickerIds = entry.value[1];\n            let value = this.stickers.get(stickerIds[0]);\n            for (let id of stickerIds) {\n                if (value != this.stickers.get(id))\n                    return false;\n            }\n            entry = faces.next();\n        } while (!entry.done);\n        return true;\n    }\n    getValues() {\n        let values = {};\n        this.faces.forEach((stickerIds, key) => {\n            values[key] = stickerIds.map((id) => this.stickers.get(id));\n        });\n        return values;\n    }\n    /**\n     * override value of sticker on a face\n     *\n     * @param face - label\n     * @param index - index of sticker to set value of\n     * @param value - value to set the sticker to\n     */\n    setValue(face, index, value) {\n        if (!this.faces.has(face)) {\n            console.warn(`attempting to set sticker value on invalid face: ${face}`);\n            return;\n        }\n        let faceStickers = this.faces.get(face);\n        let stickerId = faceStickers[index];\n        if (!faceStickers) {\n            console.warn(`attempting to set sticker value for invalid sticker: ${face} ${index}`);\n            return;\n        }\n        this.stickers.set(stickerId, value);\n    }\n    /**\n     * parse and execute a sequence of moves\n     *\n     * @example\n     * ```typescript\n     * // assuming U, R, and F are turn labels\n     * simulator.alg(\"U R F\")\n     * ```\n     *\n     * @param alg - algorithm\n     */\n    alg(alg) {\n        // Default implementation\n        if (!alg) {\n            return;\n        }\n        alg.split(\" \").forEach((turn) => this.doTurn(turn));\n    }\n    /**\n     * reverses an algorithm then executes it\n     */\n    case(alg) {\n        // No default implementation\n    }\n    /**\n     * resets stickers back to solved position. Uses face name\n     * as sticker value by default\n     */\n    reset() {\n        this.faces.forEach((stickerIds, faceName) => {\n            stickerIds.forEach((stickerId) => {\n                this.stickers.set(stickerId, faceName);\n            });\n        });\n    }\n}\n","// Standard Cube Colors\nexport const YELLOW = { value: \"#FFFF00\" };\nexport const RED = { value: \"#FF0000\" };\nexport const BLUE = { value: \"#0000FF\" };\nexport const WHITE = { value: \"#FFFFFF\" };\nexport const ORANGE = { value: \"#FFA500\" };\nexport const GREEN = { value: \"#00FF00\" };\n// Extra colors for megaminx\nexport const PURPLE = { value: \"#800080\" };\nexport const GREY = { value: \"#808080\" };\nexport const DARK_BLUE = { value: \"#00008B\" };\nexport const LIGHT_YELLOW = { value: \"#ffffb3\" };\nexport const LIGHT_GREEN = { value: \"#32CD32\" };\nexport const PINK = { value: \"#FF69B4\" };\nexport const BLACK = { value: \"#000000\" };\nexport const MASK_COLOR = { value: \"#404040\" };\n// Stickerless\nexport const YELLOW_STICKERLESS = {\n    value: \"#FFFF00\",\n    stroke: \"#DDDD00\",\n};\nexport const RED_STICKERLESS = { value: \"#FF0000\", stroke: \"#DD0000\" };\nexport const BLUE_STICKERLESS = { value: \"#0000FF\", stroke: \"#0000DD\" };\nexport const WHITE_STICKERLESS = { value: \"#FFFFFF\", stroke: \"#DDD\" };\nexport const ORANGE_STICKERLESS = {\n    value: \"#FFA500\",\n    stroke: \"#DD8500\",\n};\nexport const GREEN_STICKERLESS = {\n    value: \"#00FF00\",\n    stroke: \"#00DD00\",\n};\nexport const PURPLE_STICKERLESS = {\n    value: \"#800080\",\n    stroke: \"#5c005c\",\n};\nexport const GREY_STICKERLESS = { value: \"#808080\", stroke: \"#6b6b6b\" };\nexport const DARK_BLUE_STICKERLESS = {\n    value: \"#00008B\",\n    stroke: \"#000075\",\n};\nexport const LIGHT_YELLOW_STICKERLESS = {\n    value: \"#ffffb3\",\n    stroke: \"#e6e6a3\",\n};\nexport const LIGHT_GREEN_STICKERLESS = {\n    value: \"#32CD32\",\n    stroke: \"#2db32d\",\n};\nexport const PINK_STICKERLESS = { value: \"#FF69B4\", stroke: \"#de5b9c\" };\n","export var PIECE_TYPE;\n(function (PIECE_TYPE) {\n    PIECE_TYPE[PIECE_TYPE[\"CORNER\"] = 0] = \"CORNER\";\n    PIECE_TYPE[PIECE_TYPE[\"EDGE\"] = 1] = \"EDGE\";\n    PIECE_TYPE[PIECE_TYPE[\"MIDDLE\"] = 2] = \"MIDDLE\";\n})(PIECE_TYPE || (PIECE_TYPE = {}));\n","export class Vector3 {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromValues(x, y, z) {\n        return new Vector3(x, y, z);\n    }\n    static fromVec2(vec2) {\n        return new Vector3(vec2.x, vec2.y, 0);\n    }\n    transformMat4(m) {\n        let w = m.values[3] * this.x +\n            m.values[7] * this.y +\n            m.values[11] * this.z +\n            m.values[15];\n        w = w || 1.0;\n        const x = (m.values[0] * this.x +\n            m.values[4] * this.y +\n            m.values[8] * this.z +\n            m.values[12]) /\n            w;\n        const y = (m.values[1] * this.x +\n            m.values[5] * this.y +\n            m.values[9] * this.z +\n            m.values[13]) /\n            w;\n        const z = (m.values[2] * this.x +\n            m.values[6] * this.y +\n            m.values[10] * this.z +\n            m.values[14]) /\n            w;\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    translate(x, y, z) {\n        this.x += x;\n        this.y += y;\n        this.z += z;\n        return this;\n    }\n    multiply(x, y, z) {\n        this.x = this.x * x;\n        this.y = this.y * y;\n        this.z = this.z * z;\n    }\n    rotateX(origin, radians) {\n        // translate point to origin\n        let x = this.x - origin.x;\n        let y = this.y - origin.y;\n        let z = this.z - origin.z;\n        // rotate\n        this.x = x;\n        this.y = y * Math.cos(radians) - z * Math.sin(radians);\n        this.z = y * Math.sin(radians) + z * Math.cos(radians);\n        // translate back\n        this.x += origin.x;\n        this.y += origin.y;\n        this.z += origin.z;\n        return this;\n    }\n    rotateZ(origin, radians) {\n        // translate point to origin\n        let x = this.x - origin.x;\n        let y = this.y - origin.y;\n        let z = this.z - origin.z;\n        // rotate\n        this.x = x * Math.cos(radians) - y * Math.sin(radians);\n        this.y = x * Math.sin(radians) + y * Math.cos(radians);\n        this.z = z;\n        // translate back\n        this.x += origin.x;\n        this.y += origin.y;\n        this.z += origin.z;\n        return this;\n    }\n    clone() {\n        return Vector3.fromValues(this.x, this.y, this.z);\n    }\n}\nexport class Vector2 {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    static fromValues(x, y) {\n        return new Vector2(x, y);\n    }\n}\n","import { WHITE, RED, BLUE, GREEN, ORANGE, YELLOW } from \"./../colors\";\nimport { PIECE_TYPE } from \"./enum\";\nimport { Vector3 } from \"../../math/vector\";\nexport const ROTATION_VECTOR = Vector3.fromValues(0.92875, -0.24803, 0);\nexport const TOP_COLOR = YELLOW;\nexport const BOTTOM_COLOR = WHITE;\nexport const FRONT_COLOR = RED;\nexport const LEFT_COLOR = BLUE;\nexport const RIGHT_COLOR = GREEN;\nexport const BACK_COLOR = ORANGE;\nexport const DEFAULT_SQ1_SCHEME = {\n    top: TOP_COLOR,\n    front: FRONT_COLOR,\n    bottom: BOTTOM_COLOR,\n    left: LEFT_COLOR,\n    right: RIGHT_COLOR,\n    back: BACK_COLOR,\n};\nexport const SOLVED_TOP_PIECES = [\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, FRONT_COLOR, LEFT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, LEFT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, LEFT_COLOR, BACK_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, BACK_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, BACK_COLOR, RIGHT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, RIGHT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, RIGHT_COLOR, FRONT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, FRONT_COLOR] },\n];\nexport const SOLVED_BOTTOM_PIECES = [\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, BACK_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, BACK_COLOR, LEFT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, LEFT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, LEFT_COLOR, FRONT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, FRONT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, FRONT_COLOR, RIGHT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, RIGHT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, RIGHT_COLOR, BACK_COLOR] },\n];\n","const square1TurnRegex = /((\\()?(-?\\d)\\s*,\\s*(-?\\d)(\\))?)|(\\/)/g;\nexport function parseSquare1Algorithm(algorithm) {\n    let turns = [];\n    let match;\n    while ((match = square1TurnRegex.exec(algorithm))) {\n        if (match[0] === \"/\") {\n            turns.push({ slice: true });\n        }\n        else {\n            turns.push({\n                top: parseInt(match[3]),\n                bottom: parseInt(match[4]),\n            });\n        }\n    }\n    return turns;\n}\n","import { Simulator } from \"./../simulator\";\nimport { BACK_COLOR, BOTTOM_COLOR, DEFAULT_SQ1_SCHEME, FRONT_COLOR, LEFT_COLOR, RIGHT_COLOR, TOP_COLOR, } from \"./../../puzzles/square1/constants\";\nimport { PIECE_TYPE } from \"../../puzzles/square1/enum\";\nimport { parseSquare1Algorithm } from \"../../algorithms/square1\";\nconst pieceValue = {\n    [PIECE_TYPE.CORNER]: 2,\n    [PIECE_TYPE.EDGE]: 1,\n};\nexport class Square1Simualtor extends Simulator {\n    constructor(scheme = DEFAULT_SQ1_SCHEME) {\n        super();\n        this.scheme = scheme;\n        this.topLayer = solvedTop(this.scheme);\n        this.bottomLayer = solvedBottom(this.scheme);\n        this.middleRotated = false;\n    }\n    alg(alg) {\n        parseSquare1Algorithm(alg).forEach((move) => {\n            if (\"slice\" in move) {\n                this.slice();\n            }\n            else {\n                this.rotateTop(move.top);\n                this.rotateBottom(move.bottom);\n            }\n        });\n    }\n    case(alg) {\n        parseSquare1Algorithm(alg)\n            .reverse()\n            .forEach((move) => {\n            if (\"slice\" in move) {\n                this.slice();\n            }\n            else {\n                this.rotateTop(move.top * -1);\n                this.rotateBottom(move.bottom * -1);\n            }\n        });\n    }\n    slice() {\n        let topNum = 0;\n        let bottomNum = 0;\n        let value = 0;\n        for (let i = this.topLayer.length; i > 0 && value < 6; i--) {\n            value += pieceValue[this.topLayer[i - 1].type];\n            topNum++;\n        }\n        if (value != 6) {\n            throw \"Cannot perform slice move. Top layer misaligned\";\n        }\n        value = 0;\n        for (let i = this.bottomLayer.length; i > 0 && value < 6; i--) {\n            value += pieceValue[this.bottomLayer[i - 1].type];\n            bottomNum++;\n        }\n        if (value != 6) {\n            throw \"Cannot perform slice move. Bottom layer misaligned\";\n        }\n        const topSlice = this.topLayer.splice(this.topLayer.length - topNum, this.topLayer.length);\n        const bottomSlice = this.bottomLayer.splice(this.bottomLayer.length - bottomNum, this.bottomLayer.length);\n        this.topLayer = this.topLayer.concat(bottomSlice);\n        this.bottomLayer = this.bottomLayer.concat(topSlice);\n        this.middleRotated = !this.middleRotated;\n    }\n    rotateTop(turns) {\n        const originalTurns = turns;\n        while (turns != 0) {\n            if (turns < 0) {\n                const piece = this.topLayer.shift();\n                const value = pieceValue[piece.type];\n                if (Math.abs(turns) < value) {\n                    throw `Invalid Square1 Move. Cannot turn top layer ${originalTurns} steps`;\n                }\n                this.topLayer.push(piece);\n                turns += value;\n            }\n            else {\n                const piece = this.topLayer.pop();\n                const value = pieceValue[piece.type];\n                if (Math.abs(turns) < value) {\n                    throw `Invalid Square1 Move. Cannot turn top layer ${originalTurns} steps`;\n                }\n                this.topLayer.unshift(piece);\n                turns -= value;\n            }\n        }\n    }\n    rotateBottom(turns) {\n        const originalTurns = turns;\n        while (turns != 0) {\n            if (turns < 0) {\n                const piece = this.bottomLayer.shift();\n                const value = pieceValue[piece.type];\n                if (Math.abs(turns) < value) {\n                    throw `Invalid Square1 Move. Cannot turn top layer ${originalTurns} steps`;\n                }\n                this.bottomLayer.push(piece);\n                turns += value;\n            }\n            else {\n                const piece = this.bottomLayer.pop();\n                const value = pieceValue[piece.type];\n                if (Math.abs(turns) < value) {\n                    throw `Invalid Square1 Move. Cannot turn top layer ${originalTurns} steps`;\n                }\n                this.bottomLayer.unshift(piece);\n                turns -= value;\n            }\n        }\n    }\n}\nfunction solvedTop(scheme) {\n    return [\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.top || TOP_COLOR,\n                scheme.front || FRONT_COLOR,\n                scheme.left || LEFT_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.top || TOP_COLOR, scheme.left || LEFT_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.top || TOP_COLOR,\n                scheme.left || LEFT_COLOR,\n                scheme.back || BACK_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.top || TOP_COLOR, scheme.back || BACK_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.top || TOP_COLOR,\n                scheme.back || BACK_COLOR,\n                scheme.right || RIGHT_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.top || TOP_COLOR, scheme.right || RIGHT_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.top || TOP_COLOR,\n                scheme.right || RIGHT_COLOR,\n                scheme.front || FRONT_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.top || TOP_COLOR, scheme.front || FRONT_COLOR],\n        },\n    ];\n}\nfunction solvedBottom(scheme) {\n    return [\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.bottom || BOTTOM_COLOR, scheme.back || BACK_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.bottom || BOTTOM_COLOR,\n                scheme.back || BACK_COLOR,\n                scheme.left || LEFT_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.bottom || BOTTOM_COLOR, scheme.left || LEFT_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.bottom || BOTTOM_COLOR,\n                scheme.left || LEFT_COLOR,\n                scheme.front || FRONT_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.bottom || BOTTOM_COLOR, scheme.front || FRONT_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.bottom || BOTTOM_COLOR,\n                scheme.front || FRONT_COLOR,\n                scheme.right || RIGHT_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.bottom || BOTTOM_COLOR, scheme.right || RIGHT_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.bottom || BOTTOM_COLOR,\n                scheme.right || RIGHT_COLOR,\n                scheme.back || BACK_COLOR,\n            ],\n        },\n    ];\n}\n","import { TurnType } from \"./algorithm\";\nconst skewbTurnRegex = /([LRUB])(\\'?)/g;\nconst DirectionToTurnType = {\n    \"\": TurnType.Clockwise,\n    \"'\": TurnType.CounterClockwise,\n};\nexport function parseSkewbAlgorithm(algorithm) {\n    let turns = [];\n    let match;\n    while ((match = skewbTurnRegex.exec(algorithm))) {\n        const rawUnit = match[1];\n        const rawDirection = match[2];\n        turns.push({\n            unit: rawUnit,\n            turnType: DirectionToTurnType[rawDirection],\n            slices: 1,\n        });\n    }\n    return turns;\n}\n","/**\n * Splits an array into chunks\n *\n * @param array original array\n * @param chunkSize\n *\n * @example\n * ```\n * chunkArray([1,2,3,4,5,6], 2)\n * // returns [[1,2], [3,4], [5,6]]\n * ```\n */\nexport function chunkArray(array, chunkSize) {\n    const newSize = Math.ceil(array.length / chunkSize);\n    return new Array(newSize)\n        .fill(null)\n        .map((_, index) => array.slice(index * chunkSize, (index + 1) * chunkSize));\n}\n/**\n * Generates an array of set size filled with a specific value\n *\n * @param length length of the array\n * @param value value to fill the array with\n */\nexport function fillArray(length, value) {\n    return new Array(length).fill(value);\n}\n","import { TurnType } from \"../../algorithms/algorithm\";\nimport { parseSkewbAlgorithm } from \"../../algorithms/skewb\";\nimport { fillArray } from \"../../utils/arrays\";\nimport { Simulator } from \"./../simulator\";\n/**\n * Simulates a standard skewb\n *\n * Imagine the faces like this\n * ```\n *      U\n *    L F R B\n *      D\n * ```\n *\n * each face has 5 sickers (1 center, 4 corners), stored as\n * an array. Each index of the array maps to stickers like\n * so, 0 being the center, 1-4 being the corners from top left\n * to bottom right\n * ```\n *      1   2\n *        0\n *      3   4\n * ```\n *\n * So all together the simulator stores information like\n * this\n * ```\n *          U1    U2\n *             U0\n *          U3    U4\n * L1    L2 F1    F2 R1    R2 B1    B2\n *    L0       F0       R0       B0\n * L3    L4 F3    F4 F3    F4 B3    B4\n *          D1    D2\n *             D0\n *          D3    D4\n * ```\n */\nexport class SkewbSimulator extends Simulator {\n    constructor() {\n        super();\n        const { stickerIds: top } = this.addFace(fillArray(5, \"top\"), \"top\");\n        const { stickerIds: front } = this.addFace(fillArray(5, \"front\"), \"front\");\n        const { stickerIds: right } = this.addFace(fillArray(5, \"right\"), \"right\");\n        const { stickerIds: bottom } = this.addFace(fillArray(5, \"bottom\"), \"bottom\");\n        const { stickerIds: back } = this.addFace(fillArray(5, \"back\"), \"back\");\n        const { stickerIds: left } = this.addFace(fillArray(5, \"left\"), \"left\");\n        // Skewb Notation https://www.worldcubeassociation.org/regulations/#12h\n        this.addTurn([\n            [right[0], back[0]],\n            [right[2], back[4]],\n            [right[3], back[1]],\n            [right[4], back[3]],\n            [back[0], bottom[0]],\n            [back[4], bottom[2]],\n            [back[1], bottom[3]],\n            [back[3], bottom[4]],\n            [bottom[0], right[0]],\n            [bottom[2], right[2]],\n            [bottom[3], right[3]],\n            [bottom[4], right[4]],\n            [front[4], top[2]],\n            [top[2], left[3]],\n            [left[3], front[4]],\n        ], \"R\");\n        this.addTurn([\n            [center(top), center(left)],\n            [topLeft(top), topLeft(left)],\n            [topRight(top), topRight(left)],\n            [bottomLeft(top), bottomLeft(left)],\n            [center(left), center(back)],\n            [topLeft(left), topRight(back)],\n            [topRight(left), bottomRight(back)],\n            [bottomLeft(left), topLeft(back)],\n            [center(back), center(top)],\n            [topRight(back), topLeft(top)],\n            [bottomRight(back), topRight(top)],\n            [topLeft(back), bottomLeft(top)],\n            [topRight(right), topLeft(front)],\n            [topLeft(front), bottomLeft(bottom)],\n            [bottomLeft(bottom), topRight(right)],\n        ], \"U\");\n        this.addTurn([\n            [center(left), center(front)],\n            [bottomLeft(left), topLeft(front)],\n            [topRight(left), bottomRight(front)],\n            [bottomRight(left), bottomLeft(front)],\n            [center(front), center(bottom)],\n            [topLeft(front), topRight(bottom)],\n            [bottomRight(front), bottomLeft(bottom)],\n            [bottomLeft(front), topLeft(bottom)],\n            [center(bottom), center(left)],\n            [topRight(bottom), bottomLeft(left)],\n            [bottomLeft(bottom), topRight(left)],\n            [topLeft(bottom), bottomRight(left)],\n            [bottomRight(back), bottomLeft(top)],\n            [bottomLeft(top), bottomLeft(right)],\n            [bottomLeft(right), bottomRight(back)],\n        ], \"L\");\n        this.addTurn([\n            [center(back), center(left)],\n            [topRight(back), bottomRight(left)],\n            [bottomLeft(back), topLeft(left)],\n            [bottomRight(back), bottomLeft(left)],\n            [center(left), center(bottom)],\n            [bottomRight(left), bottomRight(bottom)],\n            [topLeft(left), topLeft(bottom)],\n            [bottomLeft(left), bottomLeft(bottom)],\n            [center(bottom), center(back)],\n            [bottomRight(bottom), topRight(back)],\n            [topLeft(bottom), bottomLeft(back)],\n            [bottomLeft(bottom), bottomRight(back)],\n            [topLeft(top), bottomLeft(front)],\n            [bottomLeft(front), bottomRight(right)],\n            [bottomRight(right), topLeft(top)],\n        ], \"B\");\n    }\n    R(reverse) {\n        this.doTurn(\"R\", reverse);\n    }\n    U(reverse) {\n        this.doTurn(\"U\", reverse);\n    }\n    L(reverse) {\n        this.doTurn(\"L\", reverse);\n    }\n    B(reverse) {\n        this.doTurn(\"B\", reverse);\n    }\n    alg(alg) {\n        if (!alg) {\n            return;\n        }\n        this.doTurns(parseSkewbAlgorithm(alg));\n    }\n    case(alg) {\n        if (!alg) {\n            return;\n        }\n        let turns = parseSkewbAlgorithm(alg)\n            .reverse()\n            .map((turn) => (Object.assign(Object.assign({}, turn), { turnType: turn.turnType === TurnType.Clockwise\n                ? TurnType.CounterClockwise\n                : TurnType.Clockwise })));\n        this.doTurns(turns);\n    }\n    doTurns(turns) {\n        turns.forEach((turn) => {\n            let reverse = turn.turnType === TurnType.CounterClockwise;\n            switch (turn.unit) {\n                case \"R\":\n                    this.R(reverse);\n                    break;\n                case \"U\":\n                    this.U(reverse);\n                    break;\n                case \"L\":\n                    this.L(reverse);\n                    break;\n                case \"B\":\n                    this.B(reverse);\n                    break;\n            }\n        });\n    }\n}\nconst center = (face) => face[0];\nconst topLeft = (face) => face[1];\nconst topRight = (face) => face[2];\nconst bottomLeft = (face) => face[3];\nconst bottomRight = (face) => face[4];\n","import { TurnType } from \"./algorithm\";\nconst pyraminxTurnRegex = /([LlRrUuBb])(\\'?)/g;\nconst DirectionToTurnType = {\n    \"\": TurnType.Clockwise,\n    \"'\": TurnType.CounterClockwise,\n};\nexport function parsePyraminxAlgorithm(algorithm) {\n    let turns = [];\n    let match;\n    while ((match = pyraminxTurnRegex.exec(algorithm))) {\n        const rawUnit = match[1];\n        const rawDirection = match[2];\n        turns.push({\n            unit: rawUnit,\n            turnType: DirectionToTurnType[rawDirection],\n            slices: 1,\n        });\n    }\n    return turns;\n}\n","import { TurnType } from \"../../algorithms/algorithm\";\nimport { parsePyraminxAlgorithm } from \"../../algorithms/pyraminx\";\nimport { fillArray } from \"../../utils/arrays\";\nimport { Simulator } from \"./../simulator\";\nexport class PyraminxSimulator extends Simulator {\n    constructor() {\n        super();\n        const { stickerIds: U } = this.addFace(fillArray(9, \"top\"), \"top\");\n        const { stickerIds: L } = this.addFace(fillArray(9, \"left\"), \"left\");\n        const { stickerIds: R } = this.addFace(fillArray(9, \"right\"), \"right\");\n        const { stickerIds: B } = this.addFace(fillArray(9, \"back\"), \"back\");\n        // Tip turns\n        this.addTurn([\n            [U[8], R[8]],\n            [R[8], L[8]],\n            [L[8], U[8]],\n        ], \"u\");\n        this.addTurn([\n            [L[0], B[8]],\n            [B[8], U[4]],\n            [U[4], L[0]],\n        ], \"l\");\n        this.addTurn([\n            [L[4], R[0]],\n            [R[0], B[4]],\n            [B[4], L[4]],\n        ], \"r\");\n        this.addTurn([\n            [R[4], U[0]],\n            [U[0], B[0]],\n            [B[0], R[4]],\n        ], \"b\");\n        // Full turns\n        this.addTurn([\n            [U[5], R[5]],\n            [U[6], R[6]],\n            [U[7], R[7]],\n            [U[8], R[8]],\n            [R[5], L[5]],\n            [R[6], L[6]],\n            [R[7], L[7]],\n            [R[8], L[8]],\n            [L[5], U[5]],\n            [L[6], U[6]],\n            [L[7], U[7]],\n            [L[8], U[8]],\n        ], \"U\");\n        this.addTurn([\n            [L[0], B[8]],\n            [L[1], B[6]],\n            [L[2], B[5]],\n            [L[5], B[7]],\n            [B[8], U[4]],\n            [B[6], U[3]],\n            [B[5], U[7]],\n            [B[7], U[2]],\n            [U[4], L[0]],\n            [U[3], L[1]],\n            [U[7], L[2]],\n            [U[2], L[5]],\n        ], \"L\");\n        this.addTurn([\n            [L[2], R[5]],\n            [L[3], R[1]],\n            [L[4], R[0]],\n            [L[7], R[2]],\n            [R[5], B[2]],\n            [R[1], B[3]],\n            [R[0], B[4]],\n            [R[2], B[7]],\n            [B[2], L[2]],\n            [B[3], L[3]],\n            [B[4], L[4]],\n            [B[7], L[7]],\n        ], \"R\");\n        this.addTurn([\n            [R[2], U[5]],\n            [R[3], U[1]],\n            [R[4], U[0]],\n            [R[7], U[2]],\n            [U[5], B[5]],\n            [U[1], B[1]],\n            [U[0], B[0]],\n            [U[2], B[2]],\n            [B[5], R[2]],\n            [B[1], R[3]],\n            [B[0], R[4]],\n            [B[2], R[7]],\n        ], \"B\");\n    }\n    U(reverse) {\n        this.doTurn(\"U\", reverse);\n    }\n    R(reverse) {\n        this.doTurn(\"R\", reverse);\n    }\n    L(reverse) {\n        this.doTurn(\"L\", reverse);\n    }\n    B(reverse) {\n        this.doTurn(\"B\", reverse);\n    }\n    u(reverse) {\n        this.doTurn(\"u\", reverse);\n    }\n    r(reverse) {\n        this.doTurn(\"r\", reverse);\n    }\n    l(reverse) {\n        this.doTurn(\"l\", reverse);\n    }\n    b(reverse) {\n        this.doTurn(\"b\", reverse);\n    }\n    alg(alg) {\n        if (!alg) {\n            return;\n        }\n        this.doTurns(parsePyraminxAlgorithm(alg));\n    }\n    case(alg) {\n        if (!alg) {\n            return;\n        }\n        let turns = parsePyraminxAlgorithm(alg)\n            .reverse()\n            .map((turn) => (Object.assign(Object.assign({}, turn), { turnType: turn.turnType === TurnType.Clockwise\n                ? TurnType.CounterClockwise\n                : TurnType.Clockwise })));\n        this.doTurns(turns);\n    }\n    doTurns(turns) {\n        turns.forEach((turn) => {\n            let reverse = turn.turnType === TurnType.CounterClockwise;\n            switch (turn.unit) {\n                case \"R\":\n                    this.R(reverse);\n                    break;\n                case \"r\":\n                    this.r(reverse);\n                    break;\n                case \"U\":\n                    this.U(reverse);\n                    break;\n                case \"u\":\n                    this.u(reverse);\n                    break;\n                case \"L\":\n                    this.L(reverse);\n                    break;\n                case \"l\":\n                    this.l(reverse);\n                    break;\n                case \"B\":\n                    this.B(reverse);\n                    break;\n                case \"b\":\n                    this.b(reverse);\n                    break;\n            }\n        });\n    }\n}\n","export const MEGAMINX_FACES = [\n    // Front\n    \"U\",\n    \"R\",\n    \"F\",\n    \"dr\",\n    \"dl\",\n    \"L\",\n    // Back\n    \"d\",\n    \"br\",\n    \"BR\",\n    \"BL\",\n    \"bl\",\n    \"b\",\n];\n","import { TurnType } from \"./algorithm\";\nconst megaminxTurnNotation = /([RD])([\\+\\+|\\-\\-]+)|([UFRL]|BR|BL)([2-3]?)(\\'?)/g;\nvar PochmannDirections;\n(function (PochmannDirections) {\n    PochmannDirections[\"Clockwise\"] = \"++\";\n    PochmannDirections[\"CounterClockwise\"] = \"--\";\n    PochmannDirections[\"FaceClockwise\"] = \"\";\n    PochmannDirections[\"FaceCounter\"] = \"'\";\n})(PochmannDirections || (PochmannDirections = {}));\nconst DirectionToTurnType = {\n    [PochmannDirections.Clockwise]: TurnType.Clockwise,\n    [PochmannDirections.CounterClockwise]: TurnType.CounterClockwise,\n    [PochmannDirections.FaceClockwise]: TurnType.Clockwise,\n    [PochmannDirections.FaceCounter]: TurnType.CounterClockwise,\n};\n/**\n * Takes in a megaminx algorithm in stefan pochmann notation as a string\n * and parses the turns from it\n *\n * Also supports face turns U,F,R,L,BR,BL as i've seen in some algorithms online\n *\n * algorithm string format should be moves separated by a single space\n *\n * @example\n * ```typescript\n * parseMegaminxAlgorithm(\"D++ R-- D-- U\")\n * parseMegaminxAlgorithm(\"R' U2' R2 U R2' U R2 U2' R'\")\n * ```\n *\n * @see https://www.worldcubeassociation.org/regulations/#article-12-notation\n */\nexport function parseMegaminxAlgorithm(algorithm) {\n    if (!algorithm) {\n        return [];\n    }\n    let turns = [];\n    let match;\n    while ((match = megaminxTurnNotation.exec(algorithm))) {\n        const rawUnit = match[1] ? `${match[1]}xx` : match[3];\n        const rawDirection = match[2] || match[5];\n        const rawNumber = match[4];\n        turns.push({\n            unit: rawUnit,\n            turnType: DirectionToTurnType[rawDirection],\n            slices: 1,\n            n: rawNumber ? parseInt(rawNumber) : 1,\n        });\n    }\n    return turns;\n}\n","import { TurnType } from \"./../../algorithms/algorithm\";\nimport { MEGAMINX_FACES } from \"./constants\";\nimport { Simulator } from \"./../simulator\";\nimport { fillArray } from \"../../utils/arrays\";\nimport { parseMegaminxAlgorithm } from \"../../algorithms/megaminx\";\n/**\n * Simulator to define megaminx type puzzles\n *\n * Currently only standard megaminx size supported.\n */\nexport class MegaminxSimulator extends Simulator {\n    constructor() {\n        super();\n        MEGAMINX_FACES.forEach((faceName) => {\n            this.addFace(fillArray(11, faceName), faceName);\n        });\n        const U = this.faces.get(\"U\"); // White\n        const R = this.faces.get(\"R\"); // Blue\n        const F = this.faces.get(\"F\"); // Red\n        const dr = this.faces.get(\"dr\"); // Pink\n        const dl = this.faces.get(\"dl\"); // Light Yellow\n        const L = this.faces.get(\"L\"); // Green\n        const d = this.faces.get(\"d\"); // Gray\n        const br = this.faces.get(\"br\"); // Light Green\n        const BR = this.faces.get(\"BR\"); // Yellow\n        const BL = this.faces.get(\"BL\"); // Purple\n        const bl = this.faces.get(\"bl\"); // Dark Blue\n        const b = this.faces.get(\"b\"); // Orange\n        // R\n        this.addTurn([\n            [F[2], U[6]],\n            [F[1], U[5]],\n            [F[10], U[4]],\n            [U[6], BR[10]],\n            [U[5], BR[9]],\n            [U[4], BR[8]],\n            [BR[10], br[8]],\n            [BR[9], br[7]],\n            [BR[8], br[6]],\n            [br[8], dr[2]],\n            [br[7], dr[1]],\n            [br[6], dr[10]],\n            [dr[2], F[2]],\n            [dr[1], F[1]],\n            [dr[10], F[10]],\n            ...makeFaceTurnDefinitions(R),\n        ], \"R\");\n        // F\n        this.addTurn([\n            [U[2], R[2]],\n            [U[3], R[3]],\n            [U[4], R[4]],\n            [R[2], dr[2]],\n            [R[3], dr[3]],\n            [R[4], dr[4]],\n            [dr[2], dl[2]],\n            [dr[3], dl[3]],\n            [dr[4], dl[4]],\n            [dl[2], L[2]],\n            [dl[3], L[3]],\n            [dl[4], L[4]],\n            [L[2], U[2]],\n            [L[3], U[3]],\n            [L[4], U[4]],\n            ...makeFaceTurnDefinitions(F),\n        ], \"F\");\n        // U\n        this.addTurn([\n            [F[2], L[4]],\n            [F[3], L[5]],\n            [F[4], L[6]],\n            [L[4], BL[8]],\n            [L[5], BL[9]],\n            [L[6], BL[10]],\n            [BL[8], BR[6]],\n            [BL[9], BR[7]],\n            [BL[10], BR[8]],\n            [BR[6], R[10]],\n            [BR[7], R[1]],\n            [BR[8], R[2]],\n            [R[10], F[2]],\n            [R[1], F[3]],\n            [R[2], F[4]],\n            ...makeFaceTurnDefinitions(U),\n        ], \"U\");\n        // L\n        this.addTurn([\n            [F[4], dl[4]],\n            [F[5], dl[5]],\n            [F[6], dl[6]],\n            [dl[4], bl[8]],\n            [dl[5], bl[9]],\n            [dl[6], bl[10]],\n            [bl[8], BL[6]],\n            [bl[9], BL[7]],\n            [bl[10], BL[8]],\n            [BL[6], U[10]],\n            [BL[7], U[1]],\n            [BL[8], U[2]],\n            [U[10], F[4]],\n            [U[1], F[5]],\n            [U[2], F[6]],\n            ...makeFaceTurnDefinitions(L),\n        ], \"L\");\n        // BR\n        this.addTurn([\n            [U[6], BL[10]],\n            [U[7], BL[1]],\n            [U[8], BL[2]],\n            [BL[10], b[8]],\n            [BL[1], b[9]],\n            [BL[2], b[10]],\n            [b[8], br[4]],\n            [b[9], br[5]],\n            [b[10], br[6]],\n            [br[4], R[8]],\n            [br[5], R[9]],\n            [br[6], R[10]],\n            [R[8], U[6]],\n            [R[9], U[7]],\n            [R[10], U[8]],\n            ...makeFaceTurnDefinitions(BR),\n        ], \"BR\");\n        // BL\n        this.addTurn([\n            [U[8], L[6]],\n            [U[9], L[7]],\n            [U[10], L[8]],\n            [L[6], bl[10]],\n            [L[7], bl[1]],\n            [L[8], bl[2]],\n            [bl[10], b[6]],\n            [bl[1], b[7]],\n            [bl[2], b[8]],\n            [b[6], BR[4]],\n            [b[7], BR[5]],\n            [b[8], BR[6]],\n            [BR[4], U[8]],\n            [BR[5], U[9]],\n            [BR[6], U[10]],\n            ...makeFaceTurnDefinitions(BL),\n        ], \"BL\");\n        // dr\n        this.addTurn([\n            [F[8], R[4]],\n            [F[9], R[5]],\n            [F[10], R[6]],\n            [R[4], br[8]],\n            [R[5], br[9]],\n            [R[6], br[10]],\n            [br[8], d[6]],\n            [br[9], d[7]],\n            [br[10], d[8]],\n            [d[6], dl[10]],\n            [d[7], dl[1]],\n            [d[8], dl[2]],\n            [dl[10], F[8]],\n            [dl[1], F[9]],\n            [dl[2], F[10]],\n            ...makeFaceTurnDefinitions(dr),\n        ], \"dr\");\n        // dl\n        this.addTurn([\n            [F[6], dr[4]],\n            [F[7], dr[5]],\n            [F[8], dr[6]],\n            [dr[4], d[8]],\n            [dr[5], d[9]],\n            [dr[6], d[10]],\n            [d[8], bl[6]],\n            [d[9], bl[7]],\n            [d[10], bl[8]],\n            [bl[6], L[10]],\n            [bl[7], L[1]],\n            [bl[8], L[2]],\n            [L[10], F[6]],\n            [L[1], F[7]],\n            [L[2], F[8]],\n            ...makeFaceTurnDefinitions(dl),\n        ], \"dl\");\n        // d\n        this.addTurn([\n            [br[10], b[2]],\n            [br[1], b[3]],\n            [br[2], b[4]],\n            [b[2], bl[4]],\n            [b[3], bl[5]],\n            [b[4], bl[6]],\n            [bl[4], dl[8]],\n            [bl[5], dl[9]],\n            [bl[6], dl[10]],\n            [dl[8], dr[6]],\n            [dl[9], dr[7]],\n            [dl[10], dr[8]],\n            [dr[6], br[10]],\n            [dr[7], br[1]],\n            [dr[8], br[2]],\n            ...makeFaceTurnDefinitions(d),\n        ], \"d\");\n        // br\n        this.addTurn([\n            [b[10], d[4]],\n            [b[1], d[5]],\n            [b[2], d[6]],\n            [d[4], dr[8]],\n            [d[5], dr[9]],\n            [d[6], dr[10]],\n            [dr[8], R[6]],\n            [dr[9], R[7]],\n            [dr[10], R[8]],\n            [R[6], BR[10]],\n            [R[7], BR[1]],\n            [R[8], BR[2]],\n            [BR[10], b[10]],\n            [BR[1], b[1]],\n            [BR[2], b[2]],\n            ...makeFaceTurnDefinitions(br),\n        ], \"br\");\n        // bl\n        this.addTurn([\n            [BL[4], L[8]],\n            [BL[5], L[9]],\n            [BL[6], L[10]],\n            [L[8], dl[6]],\n            [L[9], dl[7]],\n            [L[10], dl[8]],\n            [dl[6], d[10]],\n            [dl[7], d[1]],\n            [dl[8], d[2]],\n            [d[10], b[4]],\n            [d[1], b[5]],\n            [d[2], b[6]],\n            [b[4], BL[4]],\n            [b[5], BL[5]],\n            [b[6], BL[6]],\n            ...makeFaceTurnDefinitions(bl),\n        ], \"bl\");\n        // b\n        this.addTurn([\n            [br[2], BR[2]],\n            [br[3], BR[3]],\n            [br[4], BR[4]],\n            [BR[2], BL[2]],\n            [BR[3], BL[3]],\n            [BR[4], BL[4]],\n            [BL[2], bl[2]],\n            [BL[3], bl[3]],\n            [BL[4], bl[4]],\n            [bl[2], d[2]],\n            [bl[3], d[3]],\n            [bl[4], d[4]],\n            [d[2], br[2]],\n            [d[3], br[3]],\n            [d[4], br[4]],\n            ...makeFaceTurnDefinitions(b),\n        ], \"b\");\n        // \"Pochmann notation\"\n        // D++ / D--\n        this.addTurn([\n            // Top Layer\n            [F[0], R[0]],\n            [F[1], R[9]],\n            [F[5], R[3]],\n            [F[6], R[4]],\n            [F[7], R[5]],\n            [F[8], R[6]],\n            [F[9], R[7]],\n            [F[10], R[8]],\n            [R[0], BR[0]],\n            [R[3], BR[9]],\n            [R[4], BR[10]],\n            [R[5], BR[1]],\n            [R[6], BR[2]],\n            [R[7], BR[3]],\n            [R[8], BR[4]],\n            [R[9], BR[5]],\n            [BR[0], BL[0]],\n            [BR[9], BL[1]],\n            [BR[10], BL[2]],\n            [BR[1], BL[3]],\n            [BR[2], BL[4]],\n            [BR[3], BL[5]],\n            [BR[4], BL[6]],\n            [BR[5], BL[7]],\n            [BL[0], L[0]],\n            [BL[1], L[7]],\n            [BL[2], L[8]],\n            [BL[3], L[9]],\n            [BL[4], L[10]],\n            [BL[5], L[1]],\n            [BL[6], L[2]],\n            [BL[7], L[3]],\n            [L[0], F[0]],\n            [L[7], F[5]],\n            [L[8], F[6]],\n            [L[9], F[7]],\n            [L[10], F[8]],\n            [L[1], F[9]],\n            [L[2], F[10]],\n            [L[3], F[1]],\n            // Bottom Layer\n            [dr[0], br[0]],\n            [dr[1], br[5]],\n            [dr[2], br[6]],\n            [dr[3], br[7]],\n            [dr[4], br[8]],\n            [dr[5], br[9]],\n            [dr[6], br[10]],\n            [dr[7], br[1]],\n            [dr[8], br[2]],\n            [dr[9], br[3]],\n            [dr[10], br[4]],\n            [br[0], b[0]],\n            [br[1], b[3]],\n            [br[2], b[4]],\n            [br[3], b[5]],\n            [br[4], b[6]],\n            [br[5], b[7]],\n            [br[6], b[8]],\n            [br[7], b[9]],\n            [br[8], b[10]],\n            [br[9], b[1]],\n            [br[10], b[2]],\n            [b[0], bl[0]],\n            [b[1], bl[3]],\n            [b[2], bl[4]],\n            [b[3], bl[5]],\n            [b[4], bl[6]],\n            [b[5], bl[7]],\n            [b[6], bl[8]],\n            [b[7], bl[9]],\n            [b[8], bl[10]],\n            [b[9], bl[1]],\n            [b[10], bl[2]],\n            [bl[0], dl[0]],\n            [bl[1], dl[5]],\n            [bl[2], dl[6]],\n            [bl[3], dl[7]],\n            [bl[4], dl[8]],\n            [bl[5], dl[9]],\n            [bl[6], dl[10]],\n            [bl[7], dl[1]],\n            [bl[8], dl[2]],\n            [bl[9], dl[3]],\n            [bl[10], dl[4]],\n            [dl[0], dr[0]],\n            [dl[1], dr[9]],\n            [dl[2], dr[10]],\n            [dl[3], dr[1]],\n            [dl[4], dr[2]],\n            [dl[5], dr[3]],\n            [dl[6], dr[4]],\n            [dl[7], dr[5]],\n            [dl[8], dr[6]],\n            [dl[9], dr[7]],\n            [dl[10], dr[8]],\n            ...makeFaceTurnDefinitions(d),\n        ], \"D++\");\n        // R++ / R--\n        this.addTurn([\n            // Top Layer\n            [F[0], U[0]],\n            [F[7], U[3]],\n            [F[8], U[4]],\n            [F[9], U[5]],\n            [F[10], U[6]],\n            [F[1], U[7]],\n            [F[2], U[8]],\n            [F[3], U[9]],\n            [U[0], BL[0]],\n            [U[3], BL[9]],\n            [U[4], BL[10]],\n            [U[5], BL[1]],\n            [U[6], BL[2]],\n            [U[7], BL[3]],\n            [U[8], BL[4]],\n            [U[9], BL[5]],\n            [BL[0], bl[0]],\n            [BL[9], bl[1]],\n            [BL[10], bl[2]],\n            [BL[1], bl[3]],\n            [BL[2], bl[4]],\n            [BL[3], bl[5]],\n            [BL[4], bl[6]],\n            [BL[5], bl[7]],\n            [bl[0], dl[0]],\n            [bl[1], dl[7]],\n            [bl[2], dl[8]],\n            [bl[3], dl[9]],\n            [bl[4], dl[10]],\n            [bl[5], dl[1]],\n            [bl[6], dl[2]],\n            [bl[7], dl[3]],\n            [dl[0], F[0]],\n            [dl[7], F[7]],\n            [dl[8], F[8]],\n            [dl[9], F[9]],\n            [dl[10], F[10]],\n            [dl[1], F[1]],\n            [dl[2], F[2]],\n            [dl[3], F[3]],\n            // Bottom Layer\n            [dr[0], R[0]],\n            [dr[1], R[9]],\n            [dr[2], R[10]],\n            [dr[3], R[1]],\n            [dr[4], R[2]],\n            [dr[5], R[3]],\n            [dr[6], R[4]],\n            [dr[7], R[5]],\n            [dr[8], R[6]],\n            [dr[9], R[7]],\n            [dr[10], R[8]],\n            [R[0], BR[0]],\n            [R[1], BR[5]],\n            [R[2], BR[6]],\n            [R[3], BR[7]],\n            [R[4], BR[8]],\n            [R[5], BR[9]],\n            [R[6], BR[10]],\n            [R[7], BR[1]],\n            [R[8], BR[2]],\n            [R[9], BR[3]],\n            [R[10], BR[4]],\n            [BR[0], b[0]],\n            [BR[1], b[1]],\n            [BR[2], b[2]],\n            [BR[3], b[3]],\n            [BR[4], b[4]],\n            [BR[5], b[5]],\n            [BR[6], b[6]],\n            [BR[7], b[7]],\n            [BR[8], b[8]],\n            [BR[9], b[9]],\n            [BR[10], b[10]],\n            [b[0], d[0]],\n            [b[1], d[5]],\n            [b[2], d[6]],\n            [b[3], d[7]],\n            [b[4], d[8]],\n            [b[5], d[9]],\n            [b[6], d[10]],\n            [b[7], d[1]],\n            [b[8], d[2]],\n            [b[9], d[3]],\n            [b[10], d[4]],\n            [d[0], dr[0]],\n            [d[1], dr[5]],\n            [d[2], dr[6]],\n            [d[3], dr[7]],\n            [d[4], dr[8]],\n            [d[5], dr[9]],\n            [d[6], dr[10]],\n            [d[7], dr[1]],\n            [d[8], dr[2]],\n            [d[9], dr[3]],\n            [d[10], dr[4]],\n            ...makeFaceTurnDefinitions(br),\n        ], \"R++\");\n    }\n    U(reverse) {\n        this.doTurn(\"U\", reverse);\n    }\n    R(reverse) {\n        this.doTurn(\"R\", reverse);\n    }\n    F(reverse) {\n        this.doTurn(\"F\", reverse);\n    }\n    dr(reverse) {\n        this.doTurn(\"dr\", reverse);\n    }\n    dl(reverse) {\n        this.doTurn(\"dl\", reverse);\n    }\n    L(reverse) {\n        this.doTurn(\"L\", reverse);\n    }\n    d(reverse) {\n        this.doTurn(\"d\", reverse);\n    }\n    br(reverse) {\n        this.doTurn(\"br\", reverse);\n    }\n    BR(reverse) {\n        this.doTurn(\"BR\", reverse);\n    }\n    BL(reverse) {\n        this.doTurn(\"BL\", reverse);\n    }\n    bl(reverse) {\n        this.doTurn(\"bl\", reverse);\n    }\n    b(reverse) {\n        this.doTurn(\"b\", reverse);\n    }\n    /**\n     * D++ for Pochmann notation. D-- if reverse = false\n     */\n    Dxx(reverse) {\n        this.doTurn(\"D++\", reverse);\n    }\n    /**\n     * R++ for Pochmann notation. R-- if reverse = false\n     */\n    Rxx(reverse) {\n        this.doTurn(\"R++\", reverse);\n    }\n    /**\n     * Parses and executes a megaminx algorithm using WCA standard notation\n     *\n     * @see https://www.stefan-pochmann.info/spocc/other_stuff/tools/scramble_megaminx/)\n     * @see https://www.worldcubeassociation.org/regulations/#12d\n     *\n     * @param alg megaminx algorithm to parse\n     * @example\n     * ```\n     * R-- D++ R++ U'\n     * ```\n     */\n    alg(alg) {\n        if (!alg) {\n            return;\n        }\n        // pochmann notation\n        this.doTurns(parseMegaminxAlgorithm(alg));\n    }\n    case(alg) {\n        if (!alg) {\n            return;\n        }\n        let turns = parseMegaminxAlgorithm(alg)\n            .reverse()\n            .map((turn) => (Object.assign(Object.assign({}, turn), { turnType: turn.turnType === TurnType.Clockwise\n                ? TurnType.CounterClockwise\n                : TurnType.Clockwise })));\n        this.doTurns(turns);\n    }\n    doTurns(turns) {\n        turns.forEach((turn) => {\n            let reverse = turn.turnType === TurnType.CounterClockwise;\n            let turnFunc;\n            switch (turn.unit) {\n                case \"Rxx\":\n                    turnFunc = this.Rxx.bind(this);\n                    break;\n                case \"Dxx\":\n                    turnFunc = this.Dxx.bind(this);\n                    break;\n                case \"U\":\n                    turnFunc = this.U.bind(this);\n                    break;\n                case \"R\":\n                    turnFunc = this.R.bind(this);\n                    break;\n                case \"F\":\n                    turnFunc = this.F.bind(this);\n                    break;\n                case \"L\":\n                    turnFunc = this.L.bind(this);\n                    break;\n                case \"BL\":\n                    turnFunc = this.BL.bind(this);\n                    break;\n                case \"BR\":\n                    turnFunc = this.BR.bind(this);\n                    break;\n            }\n            for (let i = turn.n; i > 0; i--) {\n                turnFunc(reverse);\n            }\n        });\n    }\n}\n/**\n * Generates turn definitions for rotating a megaminx face clockwise\n * @param face array of sticker ids\n */\nfunction makeFaceTurnDefinitions(face) {\n    return [\n        // Edges\n        [face[1], face[9]],\n        [face[9], face[7]],\n        [face[7], face[5]],\n        [face[5], face[3]],\n        [face[3], face[1]],\n        // Corners\n        [face[2], face[10]],\n        [face[10], face[8]],\n        [face[8], face[6]],\n        [face[6], face[4]],\n        [face[4], face[2]],\n    ];\n}\n","export var SIMULATOR_FACE;\n(function (SIMULATOR_FACE) {\n    SIMULATOR_FACE[\"U\"] = \"U\";\n    SIMULATOR_FACE[\"R\"] = \"R\";\n    SIMULATOR_FACE[\"F\"] = \"F\";\n    SIMULATOR_FACE[\"D\"] = \"D\";\n    SIMULATOR_FACE[\"L\"] = \"L\";\n    SIMULATOR_FACE[\"B\"] = \"B\";\n})(SIMULATOR_FACE || (SIMULATOR_FACE = {}));\nexport const CUBE_FACES = [\n    SIMULATOR_FACE.U,\n    SIMULATOR_FACE.R,\n    SIMULATOR_FACE.F,\n    SIMULATOR_FACE.D,\n    SIMULATOR_FACE.L,\n    SIMULATOR_FACE.B,\n];\nexport var CUBE_AXIS;\n(function (CUBE_AXIS) {\n    CUBE_AXIS[\"X\"] = \"X\";\n    CUBE_AXIS[\"Y\"] = \"Y\";\n    CUBE_AXIS[\"Z\"] = \"Z\";\n})(CUBE_AXIS || (CUBE_AXIS = {}));\n// Faces that wrap around a given axis\nexport const CUBE_AXIS_FACES = {\n    X: [SIMULATOR_FACE.U, SIMULATOR_FACE.B, SIMULATOR_FACE.D, SIMULATOR_FACE.F],\n    Y: [SIMULATOR_FACE.L, SIMULATOR_FACE.B, SIMULATOR_FACE.R, SIMULATOR_FACE.F],\n    Z: [SIMULATOR_FACE.L, SIMULATOR_FACE.U, SIMULATOR_FACE.R, SIMULATOR_FACE.D],\n};\n// Face's orientation related to other faces on a given axis\n// the number represents the number of turns necessary\n// to orient the face in the same direction\nexport const AXIS_ORIENTATION = {\n    X: {\n        [SIMULATOR_FACE.U]: 0,\n        [SIMULATOR_FACE.B]: 2,\n        [SIMULATOR_FACE.F]: 0,\n        [SIMULATOR_FACE.D]: 0,\n    },\n    Y: {\n        [SIMULATOR_FACE.B]: -1,\n        [SIMULATOR_FACE.F]: -1,\n        [SIMULATOR_FACE.L]: -1,\n        [SIMULATOR_FACE.R]: -1,\n    },\n    Z: {\n        [SIMULATOR_FACE.U]: -1,\n        [SIMULATOR_FACE.D]: 1,\n        [SIMULATOR_FACE.L]: 2,\n        [SIMULATOR_FACE.R]: 0,\n    },\n};\n// True if faces are in reverse orientation\n// from the axis it's on (X, Y, Z).\n// For example D turns on the Y axis, but the\n// y axis layer turns clockwise based on the U\n// face, so D needs to be reversed\nexport const AXIS_FACE_ORIENTATION = {\n    [SIMULATOR_FACE.U]: false,\n    [SIMULATOR_FACE.R]: false,\n    [SIMULATOR_FACE.F]: false,\n    [SIMULATOR_FACE.D]: true,\n    [SIMULATOR_FACE.L]: true,\n    [SIMULATOR_FACE.B]: true,\n};\n","import { Vector2, Vector3 } from \"./vector\";\nexport function degreesToRadians(degrees) {\n    return (Math.PI * degrees) / 180;\n}\nexport function polarToCartesian(radius, theta) {\n    const x = radius * Math.cos(theta);\n    const y = radius * Math.sin(theta);\n    return Vector2.fromValues(x, y);\n}\nexport function lineSegmentLength(p1, p2) {\n    return Math.sqrt(Math.pow(p2.y - p1.y, 2) + Math.pow(p2.x - p1.x, 2));\n}\n/**\n * Calculates the radius of a circle inscribing a regular\n * pentagon given the side length\n */\nexport function pentagonInRadius(length) {\n    return length / (2 * Math.tan(Math.PI / 5));\n}\n/**\n * Calculates the radius of a circle circumscribing a\n * regular pentagon given the side length\n */\nexport function pentagonOutRadius(length) {\n    return length / (2 * Math.sin(Math.PI / 5));\n}\n/**\n * Calculates the radius of the sphere that inscribes a\n * regular dodecahedron given the side length\n */\nexport function dodecahedronInRadius(length) {\n    return (length / 2) * Math.sqrt(5 / 2 + (11 / 10) * Math.sqrt(5));\n}\nexport function calculateCentroid(vertices) {\n    let cx = 0, cy = 0, cz = 0;\n    vertices.forEach((vertex) => {\n        cx += vertex.x;\n        cy += vertex.y;\n        cz += vertex.z;\n    });\n    cx /= vertices.length;\n    cy /= vertices.length;\n    cz /= vertices.length;\n    return Vector3.fromValues(cx, cy, cz);\n}\n/**\n * generates an array with values in a given range by step\n *\n * ex. range(1, 5) -> [1, 2, 3, 4, 5]\n * ex. range(5, 2) -> [5, 4, 3, 2]\n *\n * @param from start of range\n * @param to end of range\n */\nexport function range(from, to) {\n    if (from === to) {\n        return [from];\n    }\n    const increment = from < to ? 1 : -1;\n    let values = [];\n    for (let current = from; current != to; current += increment) {\n        values.push(current);\n    }\n    values.push(to);\n    return values;\n}\n","import { CubeAlgorithmUnit } from \"./../../algorithms/cube\";\nimport { fillArray } from \"../../utils/arrays\";\nimport { CUBE_FACES, CUBE_AXIS, CUBE_AXIS_FACES, AXIS_ORIENTATION, SIMULATOR_FACE, AXIS_FACE_ORIENTATION, } from \"./constants\";\nimport { Simulator } from \"../simulator\";\nimport { range } from \"../../math/utils\";\nimport { parseCubeAlgorithm } from \"../../algorithms/cube\";\nimport { TurnType } from \"../../algorithms/algorithm\";\nexport class RubiksCubeSimulator extends Simulator {\n    constructor(size) {\n        super();\n        this.size = size;\n        this.gridSize = size * size;\n        CUBE_FACES.forEach((faceName) => {\n            // Create stickers for face\n            this.addFace(fillArray(this.gridSize, faceName), faceName);\n            const faceChanges = this.makeFaceTurnDefinitions(faceName);\n            // Create rotation for stickers on face only\n            this.addTurn(faceChanges, faceName);\n        });\n        // Create rotations for stickers on each layer\n        // around each turnable axis\n        [CUBE_AXIS.X, CUBE_AXIS.Y, CUBE_AXIS.Z].forEach((axis) => {\n            for (let column = 0; column < this.size; column++) {\n                let layerChanges = [];\n                CUBE_AXIS_FACES[axis].forEach((faceName, i) => {\n                    const nextFaceName = CUBE_AXIS_FACES[axis][(i + 1) % CUBE_AXIS_FACES[axis].length];\n                    const nextFace = this.faces.get(nextFaceName);\n                    const currentFace = this.faces.get(faceName);\n                    for (let row = 0; row < this.size; row++) {\n                        const stickerIndex = this.size * row + column;\n                        const sticker1 = currentFace[this.axisAlignedSticker(axis, faceName, stickerIndex)];\n                        const sticker2 = nextFace[this.axisAlignedSticker(axis, nextFaceName, stickerIndex)];\n                        layerChanges.push([sticker1, sticker2]);\n                    }\n                });\n                this.addTurn(layerChanges, `${axis}-${column}`);\n            }\n        });\n    }\n    /**\n     * Makes turn definitions for a face of the cube\n     *\n     * @param faceName the label of the face to make turn definitions\n     * @example returning turn definitions for stickers on a 2x2\n     * ```\n     * addFace(['y', 'y', 'y', 'y'], 'U');\n     * // returns { faceId: 'U', stickerIds: ['1','2','3','4'] }\n     *\n     * makeTurnDefinitions('U');\n     * // returns [\n     * //   ['1','2'],\n     * //   ['2','4'],\n     * //   ['3','1'],\n     * //   ['4','3']\n     * // ]\n     * ```\n     */\n    makeFaceTurnDefinitions(faceName) {\n        const stickerIds = this.faces.get(faceName);\n        return stickerIds.map((stickerId, i) => [\n            stickerId,\n            stickerIds[this.clockwiseSticker(i)],\n        ]);\n    }\n    /**\n     * Given sticker i return the index it will go to\n     * after rotating clockwise\n     *\n     * ex. stickers are stored in an array but represent a grid\n     * so, for a 3x3 sticker index 0 will rotate to 2, 1 to 5, etc...\n     *\n     * ```\n     *  0 | 1 | 2\n     *  ----------\n     *  3 | 4 | 5\n     *  ----------\n     *  6 | 7 | 8\n     * ```\n     */\n    clockwiseSticker(stickerIndex) {\n        return (((stickerIndex + 1) * this.size) % (this.gridSize + 1)) - 1;\n    }\n    /**\n     * Given sticker i return the index it will go to\n     * after rotating counterclockwise\n     */\n    counterClockwiseSticker(stickerIndex) {\n        return this.oppositeSticker(this.clockwiseSticker(stickerIndex));\n    }\n    /**\n     * Given sticker i return the index it will go to\n     * after rotating 180 degrees\n     */\n    oppositeSticker(stickerIndex) {\n        return this.gridSize - (stickerIndex + 1);\n    }\n    axisAlignedSticker(axis, face, stickerIndex) {\n        switch (AXIS_ORIENTATION[axis][face]) {\n            case 0:\n                return stickerIndex;\n            case 1:\n                return this.clockwiseSticker(stickerIndex);\n            case 2:\n                return this.oppositeSticker(stickerIndex);\n            case -1:\n                return this.counterClockwiseSticker(stickerIndex);\n            default:\n                throw `Invalid axis face orientation value ${AXIS_ORIENTATION[axis][face]}`;\n        }\n    }\n    /**\n     * Performs a turn on a given face.\n     *\n     * @param face the face to turn\n     * @param axis axis to perform inner layer turns on\n     * @param reverse true if you want to turn the face counter clockwise\n     * @param from inner layer to start turning from\n     * @param to last inner layer to stop turning\n     * @param to last inner layer to stop turning\n     */\n    turnFace(face, axis, reverse, from, to) {\n        if (Math.abs(to - from) >= this.size - 1) {\n            console.error(`Invalid number of layers to turn, skipping turn.; face=${face}, layers=${Math.abs(to - from) + 1}`);\n            return;\n        }\n        // Rotate face\n        this.doTurn(face, reverse);\n        // Turn inner layers\n        range(from, to).forEach((layer) => {\n            this.doTurn(`${axis}-${layer}`, AXIS_FACE_ORIENTATION[face] ? !reverse : reverse);\n        });\n    }\n    /**\n     * Performs a U turn\n     * @param reverse true if you want to turn the face counter clockwise (U')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    U(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.U, CUBE_AXIS.Y, reverse, this.size - 1, this.size - layers);\n    }\n    /**\n     * Performs an R turn\n     * @param reverse true if you want to turn the face counter clockwise (R')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    R(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.R, CUBE_AXIS.X, reverse, this.size - 1, this.size - layers);\n    }\n    /**\n     * Performs an F turn\n     * @param reverse true if you want to turn the face counter clockwise (F')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    F(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.F, CUBE_AXIS.Z, reverse, 0, layers - 1);\n    }\n    /**\n     * Performs a D turn\n     * @param reverse true if you want to turn the face counter clockwise (D')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    D(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.D, CUBE_AXIS.Y, reverse, 0, layers - 1);\n    }\n    /**\n     * Performs an L turn\n     * @param reverse true if you want to turn the face counter clockwise (L')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    L(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.L, CUBE_AXIS.X, reverse, 0, layers - 1);\n    }\n    /**\n     * Performs a B turn\n     * @param reverse true if you want to turn the face counter clockwise (B')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    B(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.B, CUBE_AXIS.Z, reverse, this.size - 1, this.size - layers);\n    }\n    /**\n     * Rotates the middle slice in the direction of an L turn\n     * https://ruwix.com/the-rubiks-cube/notation/advanced/\n     *\n     * Will rotate all middle layers inbetween R and L for larger cubes\n     */\n    M(reverse = false) {\n        for (let layer = 1; layer < this.size - 1; layer++) {\n            this.doTurn(`${CUBE_AXIS.X}-${layer}`, !reverse);\n        }\n    }\n    /**\n     * Rotates the standing layers in the direction of an F turn\n     * https://ruwix.com/the-rubiks-cube/notation/advanced/\n     *\n     * Will rotate all middle layers inbetween F and B for larger cubes\n     */\n    S(reverse = false) {\n        for (let layer = 1; layer < this.size - 1; layer++) {\n            this.doTurn(`${CUBE_AXIS.Z}-${layer}`, reverse);\n        }\n    }\n    /**\n     * Rotates the equitorial layers in the direction of a D turn\n     * https://ruwix.com/the-rubiks-cube/notation/advanced/\n     *\n     * Will rotate all middle layers inbetween U and D for larger cubes\n     */\n    E(reverse = false) {\n        for (let layer = 1; layer < this.size - 1; layer++) {\n            this.doTurn(`${CUBE_AXIS.Y}-${layer}`, !reverse);\n        }\n    }\n    /**\n     * rotates the entire cube on R\n     */\n    X(reverse = false) {\n        this.doTurn(\"R\", reverse);\n        this.doTurn(\"L\", !reverse);\n        for (let layer = 0; layer < this.size; layer++) {\n            this.doTurn(`${CUBE_AXIS.X}-${layer}`, reverse);\n        }\n    }\n    /**\n     * rotates the entire cube on U\n     */\n    Y(reverse = false) {\n        this.doTurn(\"U\", reverse);\n        this.doTurn(\"D\", !reverse);\n        for (let layer = 0; layer < this.size; layer++) {\n            this.doTurn(`${CUBE_AXIS.Y}-${layer}`, reverse);\n        }\n    }\n    /**\n     * rotates the entire cube on F\n     */\n    Z(reverse = false) {\n        this.doTurn(\"F\", reverse);\n        this.doTurn(\"B\", !reverse);\n        for (let layer = 0; layer < this.size; layer++) {\n            this.doTurn(`${CUBE_AXIS.Z}-${layer}`, reverse);\n        }\n    }\n    alg(alg) {\n        if (!alg) {\n            return;\n        }\n        this.doTurns(parseCubeAlgorithm(alg));\n    }\n    /**\n     * reverses an algorithm then executes it\n     */\n    case(alg) {\n        if (!alg) {\n            return;\n        }\n        let turns = parseCubeAlgorithm(alg)\n            .reverse()\n            .map((turn) => {\n            switch (turn.turnType) {\n                case TurnType.Clockwise:\n                    turn.turnType = TurnType.CounterClockwise;\n                    break;\n                case TurnType.CounterClockwise:\n                    turn.turnType = TurnType.Clockwise;\n                    break;\n                case TurnType.Double:\n                    break;\n            }\n            return turn;\n        });\n        this.doTurns(turns);\n    }\n    doTurns(turns) {\n        turns.forEach((turn) => {\n            let turnFunc;\n            switch (turn.unit) {\n                case CubeAlgorithmUnit.U:\n                    turnFunc = this.U.bind(this);\n                    break;\n                case CubeAlgorithmUnit.R:\n                    turnFunc = this.R.bind(this);\n                    break;\n                case CubeAlgorithmUnit.F:\n                    turnFunc = this.F.bind(this);\n                    break;\n                case CubeAlgorithmUnit.D:\n                    turnFunc = this.D.bind(this);\n                    break;\n                case CubeAlgorithmUnit.L:\n                    turnFunc = this.L.bind(this);\n                    break;\n                case CubeAlgorithmUnit.B:\n                    turnFunc = this.B.bind(this);\n                    break;\n                case CubeAlgorithmUnit.M:\n                    turnFunc = this.M.bind(this);\n                    break;\n                case CubeAlgorithmUnit.E:\n                    turnFunc = this.E.bind(this);\n                    break;\n                case CubeAlgorithmUnit.S:\n                    turnFunc = this.S.bind(this);\n                    break;\n                case CubeAlgorithmUnit.X:\n                    turnFunc = this.X.bind(this);\n                    break;\n                case CubeAlgorithmUnit.Y:\n                    turnFunc = this.Y.bind(this);\n                    break;\n                case CubeAlgorithmUnit.Z:\n                    turnFunc = this.Z.bind(this);\n                    break;\n                default:\n                    console.warn(`Unsupported cube move`, turn);\n                    break;\n            }\n            const reverse = turn.turnType === TurnType.CounterClockwise;\n            turnFunc(reverse, turn.slices);\n            if (turn.turnType === TurnType.Double) {\n                turnFunc(reverse, turn.slices);\n            }\n        });\n    }\n}\n","/**\n * Simple generator that yields a new ID every time\n * its called. Used to give unique IDs to geometry.\n */\nexport const generateUid = (() => {\n    let current = 0;\n    return function () {\n        return current++;\n    };\n})();\n","/**\n * Credit to logic https://github.com/toji/gl-matrix/blob/master/src/mat4.js\n */\nconst EPSILON = 0.000001;\nexport class Matrix4 {\n    constructor(values) {\n        if (Array.isArray(values) && values.length == 16) {\n            this.values = values;\n        }\n        else {\n            this.values = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n        }\n    }\n    /**\n     * Returns a 4x4 matrix with the given values\n     */\n    static fromValues(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16) {\n        return new Matrix4([\n            m1,\n            m2,\n            m3,\n            m4,\n            m5,\n            m6,\n            m7,\n            m8,\n            m9,\n            m10,\n            m11,\n            m12,\n            m13,\n            m14,\n            m15,\n            m16,\n        ]);\n    }\n    static fromQuaternion(q) {\n        let { a: x, b: y, c: z, d: w } = q;\n        let x2 = x + x;\n        let y2 = y + y;\n        let z2 = z + z;\n        let xx = x * x2;\n        let yx = y * x2;\n        let yy = y * y2;\n        let zx = z * x2;\n        let zy = z * y2;\n        let zz = z * z2;\n        let wx = w * x2;\n        let wy = w * y2;\n        let wz = w * z2;\n        return Matrix4.fromValues(1 - yy - zz, yx + wz, zx - wy, 0, yx - wz, 1 - xx - zz, zy + wx, 0, zx + wy, zy - wx, 1 - xx - yy, 0, 0, 0, 0, 1);\n    }\n    static fromTranslation(x, y, z) {\n        return Matrix4.fromValues(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1);\n    }\n    static fromXRotation(radians) {\n        let s = Math.sin(radians);\n        let c = Math.cos(radians);\n        return Matrix4.fromValues(1, 0, 0, 0, 0, c, s, 0, 0, -s, c, 0, 0, 0, 0, 1);\n    }\n    static fromYRotation(radians) {\n        let s = Math.sin(radians);\n        let c = Math.cos(radians);\n        return Matrix4.fromValues(c, 0, -s, 0, 0, 1, 0, 0, s, 0, c, 0, 0, 0, 0, 1);\n    }\n    /**\n     * copy values from one matrix to another\n     */\n    static copy(out, matrix) {\n        out.values[0] = matrix.values[0];\n        out.values[1] = matrix.values[1];\n        out.values[2] = matrix.values[2];\n        out.values[3] = matrix.values[3];\n        out.values[4] = matrix.values[4];\n        out.values[5] = matrix.values[5];\n        out.values[6] = matrix.values[6];\n        out.values[7] = matrix.values[7];\n        out.values[8] = matrix.values[8];\n        out.values[9] = matrix.values[9];\n        out.values[10] = matrix.values[10];\n        out.values[11] = matrix.values[11];\n        out.values[12] = matrix.values[12];\n        out.values[13] = matrix.values[13];\n        out.values[14] = matrix.values[14];\n        out.values[15] = matrix.values[15];\n    }\n    static multiply(out, a, b) {\n        let a00 = a.values[0], a01 = a.values[1], a02 = a.values[2], a03 = a.values[3];\n        let a10 = a.values[4], a11 = a.values[5], a12 = a.values[6], a13 = a.values[7];\n        let a20 = a.values[8], a21 = a.values[9], a22 = a.values[10], a23 = a.values[11];\n        let a30 = a.values[12], a31 = a.values[13], a32 = a.values[14], a33 = a.values[15];\n        // Cache only the current line of the second matrix\n        let b0 = b.values[0], b1 = b.values[1], b2 = b.values[2], b3 = b.values[3];\n        out.values[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out.values[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out.values[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out.values[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        b0 = b.values[4];\n        b1 = b.values[5];\n        b2 = b.values[6];\n        b3 = b.values[7];\n        out.values[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out.values[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out.values[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out.values[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        b0 = b.values[8];\n        b1 = b.values[9];\n        b2 = b.values[10];\n        b3 = b.values[11];\n        out.values[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out.values[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out.values[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out.values[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        b0 = b.values[12];\n        b1 = b.values[13];\n        b2 = b.values[14];\n        b3 = b.values[15];\n        out.values[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out.values[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out.values[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out.values[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        return out;\n    }\n    /**\n     * Generates a perspective projection matrix with the given bounds.\n     * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n     * which matches WebGL/OpenGL's clip volume.\n     * Passing null/undefined/no value for far will generate infinite projection matrix.\n     *\n     * @param {number} fovy Vertical field of view in radians\n     * @param {number} aspect Aspect ratio. typically viewport width/height\n     * @param {number} near Near bound of the frustum\n     * @param {number} far Far bound of the frustum, can be null or Infinity\n     */\n    static perspective(fovy, aspect, near, far) {\n        const f = 1.0 / Math.tan(fovy / 2);\n        const values = [f / aspect, 0, 0, 0, 0, f, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0];\n        if (far != null && far !== Infinity) {\n            const nf = 1 / (near - far);\n            values[10] = (far + near) * nf;\n            values[14] = 2 * far * near * nf;\n        }\n        else {\n            values[10] = -1;\n            values[14] = -2 * near;\n        }\n        return new Matrix4(values);\n    }\n    translate(x, y, z) {\n        this.values[12] =\n            this.values[0] * x +\n                this.values[4] * y +\n                this.values[8] * z +\n                this.values[12];\n        this.values[13] =\n            this.values[1] * x +\n                this.values[5] * y +\n                this.values[9] * z +\n                this.values[13];\n        this.values[14] =\n            this.values[2] * x +\n                this.values[6] * y +\n                this.values[10] * z +\n                this.values[14];\n        this.values[15] =\n            this.values[3] * x +\n                this.values[7] * y +\n                this.values[11] * z +\n                this.values[15];\n    }\n    scale(x, y, z) {\n        this.values[0] = this.values[0] * x;\n        this.values[1] = this.values[1] * x;\n        this.values[2] = this.values[2] * x;\n        this.values[3] = this.values[3] * x;\n        this.values[4] = this.values[4] * y;\n        this.values[5] = this.values[5] * y;\n        this.values[6] = this.values[6] * y;\n        this.values[7] = this.values[7] * y;\n        this.values[8] = this.values[8] * z;\n        this.values[9] = this.values[9] * z;\n        this.values[10] = this.values[10] * z;\n        this.values[11] = this.values[11] * z;\n    }\n    /**\n     * Rotates the matrix by the given angle around the axis (x, y, z)\n     */\n    rotate(radians, x, y, z) {\n        let len = Math.hypot(x, y, z);\n        if (len < EPSILON) {\n            return;\n        }\n        len = 1 / len;\n        x *= len;\n        y *= len;\n        z *= len;\n        let s = Math.sin(radians);\n        let c = Math.cos(radians);\n        let t = 1 - c;\n        let a00, a01, a02, a03;\n        let a10, a11, a12, a13;\n        let a20, a21, a22, a23;\n        let b00, b01, b02;\n        let b10, b11, b12;\n        let b20, b21, b22;\n        a00 = this.values[0];\n        a01 = this.values[1];\n        a02 = this.values[2];\n        a03 = this.values[3];\n        a10 = this.values[4];\n        a11 = this.values[5];\n        a12 = this.values[6];\n        a13 = this.values[7];\n        a20 = this.values[8];\n        a21 = this.values[9];\n        a22 = this.values[10];\n        a23 = this.values[11];\n        // Construct the elements of the rotation matrix\n        b00 = x * x * t + c;\n        b01 = y * x * t + z * s;\n        b02 = z * x * t - y * s;\n        b10 = x * y * t - z * s;\n        b11 = y * y * t + c;\n        b12 = z * y * t + x * s;\n        b20 = x * z * t + y * s;\n        b21 = y * z * t - x * s;\n        b22 = z * z * t + c;\n        // Perform rotation-specific matrix multiplication\n        this.values[0] = a00 * b00 + a10 * b01 + a20 * b02;\n        this.values[1] = a01 * b00 + a11 * b01 + a21 * b02;\n        this.values[2] = a02 * b00 + a12 * b01 + a22 * b02;\n        this.values[3] = a03 * b00 + a13 * b01 + a23 * b02;\n        this.values[4] = a00 * b10 + a10 * b11 + a20 * b12;\n        this.values[5] = a01 * b10 + a11 * b11 + a21 * b12;\n        this.values[6] = a02 * b10 + a12 * b11 + a22 * b12;\n        this.values[7] = a03 * b10 + a13 * b11 + a23 * b12;\n        this.values[8] = a00 * b20 + a10 * b21 + a20 * b22;\n        this.values[9] = a01 * b20 + a11 * b21 + a21 * b22;\n        this.values[10] = a02 * b20 + a12 * b21 + a22 * b22;\n        this.values[11] = a03 * b20 + a13 * b21 + a23 * b22;\n    }\n    multiply(b) {\n        Matrix4.multiply(this, this, b);\n    }\n}\n","import { generateUid } from \"./uid\";\nimport { Vector3 } from \"../math/vector\";\nimport { Matrix4 } from \"../math/matrix\";\nexport class Object3D {\n    constructor() {\n        this.uid = generateUid();\n        this.matrix = new Matrix4();\n        this.centroid = Vector3.fromValues(0, 0, 0);\n    }\n    translate(x, y, z) {\n        this.matrix.translate(x, y, z);\n    }\n    rotate(rad, x, y, z) {\n        this.matrix.rotate(rad, x, y, z);\n    }\n    scale(x, y, z) {\n        this.matrix.scale(x, y, z);\n    }\n    setColor(color) {\n        this.color = color;\n    }\n}\n","import { Object3D } from \"./object3d\";\nexport class Group extends Object3D {\n    constructor(objects = []) {\n        super();\n        this.setObjects(objects);\n    }\n    setObjects(objects) {\n        this.objects = objects;\n    }\n    addObject(object) {\n        this.objects.push(object);\n    }\n    setCentroid(vector) {\n        this.centroid = vector;\n    }\n}\n","import { degreesToRadians } from \"./utils\";\nexport const SQRT_3 = Math.sqrt(3);\nexport const ATAN_15_DEG = Math.atan(degreesToRadians(15));\nexport const DEG_30_RADIANS = degreesToRadians(30);\nexport const DEG_36_RADIANS = degreesToRadians(36);\nexport const DEG_60_RADIANS = degreesToRadians(60);\nexport const DEG_72_RADIANS = degreesToRadians(72);\n","import { DEFAULT_SQ1_SCHEME, SOLVED_BOTTOM_PIECES, SOLVED_TOP_PIECES, } from \"./constants\";\nimport { Group } from \"./../../geometry/group\";\nimport { ATAN_15_DEG, DEG_30_RADIANS, DEG_60_RADIANS, } from \"./../../math/constants\";\nimport { PIECE_TYPE } from \"./enum\";\nexport class Square1Builder {\n    constructor(topLayer = SOLVED_TOP_PIECES, bottomLayer = SOLVED_BOTTOM_PIECES, middleRotated = false, scheme = DEFAULT_SQ1_SCHEME, sideLength = 0.7) {\n        this.scheme = scheme;\n        this.sideLength = sideLength;\n        this.halfSide = this.sideLength / 2;\n        this.halfEdgePiece = this.halfSide * ATAN_15_DEG;\n        this.layerWidth = this.halfSide - this.halfEdgePiece;\n        this.middleWidth = this.sideLength - 2 * this.layerWidth;\n        this.halfMiddleWidth = this.middleWidth / 2;\n        this.borderLayerWidth = this.sideLength * 0.2;\n        this.outerHalfSide = (sideLength + this.borderLayerWidth) / 2;\n        this.outerHalfEdgePiece = this.outerHalfSide * ATAN_15_DEG;\n        this.pieces = this.buildSquare1(topLayer, bottomLayer, middleRotated);\n        this.group = new Group(this.pieces);\n    }\n    makeLayer(pieces) {\n        let geometry = [];\n        let angle = Math.PI;\n        pieces.forEach((piece, index) => {\n            switch (piece.type) {\n                case PIECE_TYPE.CORNER:\n                    const corner = this.square1Corner(piece.colors[0], piece.colors[1], piece.colors[2]);\n                    corner.rotate(angle, 0, 0, 1);\n                    geometry.push(corner);\n                    angle -= DEG_60_RADIANS;\n                    break;\n                case PIECE_TYPE.EDGE:\n                    const edge = this.square1Edge(piece.colors[0], piece.colors[1]);\n                    edge.rotate(angle - DEG_60_RADIANS, 0, 0, 1);\n                    geometry.push(edge);\n                    angle -= DEG_30_RADIANS;\n                    break;\n            }\n        });\n        return geometry;\n    }\n    /**\n     * Not implemented. Just here for {@link Visualizer}'s sake\n     */\n    setColors(colors) { }\n}\n","import { calculateCentroid } from \"../math/utils\";\nimport { generateUid } from \"./uid\";\n/**\n * Face that will render as a puzzle sticker\n */\nexport class Face {\n    /**\n     * @param indices indices of vertices that make up a face\n     * @param vertices vertices of the geometry to calculate centroid from\n     * @param color color of the sticker\n     */\n    constructor(indices, vertices, color) {\n        this.indices = indices;\n        this.color = color;\n        this.uid = generateUid();\n        if (vertices) {\n            this.calculateCentroid(vertices);\n        }\n    }\n    /**\n     * recalculate the centroid of the face.\n     */\n    calculateCentroid(vertices) {\n        this.centroid = calculateCentroid(\n        // Calculate centroid from vertices included in the face\n        vertices.filter((v, i) => this.indices.includes(i)));\n    }\n}\n","import { Object3D } from \"./object3d\";\nimport { calculateCentroid } from \"../math/utils\";\nexport class Geometry extends Object3D {\n    constructor(vertices, faces) {\n        super();\n        this.vertices = vertices;\n        this.faces = faces;\n        this.centroid = calculateCentroid(this.vertices);\n    }\n}\n","import { Square1Builder } from \"./interface\";\nimport { DEG_30_RADIANS } from \"./../../math/constants\";\nimport { Face } from \"./../../geometry/face\";\nimport { Geometry } from \"./../../geometry/geometry\";\nimport { Group } from \"./../../geometry/group\";\nimport { DEFAULT_SQ1_SCHEME, SOLVED_TOP_PIECES, SOLVED_BOTTOM_PIECES, } from \"./constants\";\nimport { Vector3 } from \"../../math/vector\";\nexport class Square1Net extends Square1Builder {\n    constructor(topLayer = SOLVED_TOP_PIECES, bottomLayer = SOLVED_BOTTOM_PIECES, middleRotated = false, scheme = DEFAULT_SQ1_SCHEME, sideLength = 0.7) {\n        super(topLayer, bottomLayer, middleRotated, scheme, sideLength);\n    }\n    square1Corner(top, side1, side2) {\n        const points = [\n            // Top\n            Vector3.fromValues(0, 0, 0),\n            Vector3.fromValues(this.halfSide, this.halfEdgePiece, 0),\n            Vector3.fromValues(this.halfSide, this.halfSide, 0),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, 0),\n            // Sides\n            Vector3.fromValues(this.outerHalfSide, this.outerHalfEdgePiece, 0),\n            Vector3.fromValues(this.outerHalfSide, this.outerHalfSide, 0),\n            Vector3.fromValues(this.outerHalfEdgePiece, this.outerHalfSide, 0),\n        ];\n        const faces = [\n            new Face([0, 1, 2, 3], points, top),\n            new Face([2, 3, 6, 5], points, side1),\n            new Face([1, 2, 5, 4], points, side2),\n        ];\n        return new Geometry(points, faces);\n    }\n    square1Edge(top, side) {\n        const points = [\n            // Top\n            Vector3.fromValues(0, 0, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(-this.halfEdgePiece, this.halfSide, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            // Side\n            Vector3.fromValues(this.outerHalfEdgePiece, this.outerHalfSide, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(-this.outerHalfEdgePiece, this.outerHalfSide, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n        ];\n        const faces = [\n            new Face([0, 1, 2], points, top),\n            new Face([1, 2, 4, 3], points, side),\n        ];\n        return new Geometry(points, faces);\n    }\n    square1Middle(front, right, back, rotated) {\n        const layerHeight = this.halfSide - this.halfEdgePiece;\n        const middleHeight = this.sideLength - 2 * layerHeight;\n        const halfMiddleHeight = middleHeight / 2;\n        const cornerLength = this.outerHalfSide - this.outerHalfEdgePiece;\n        const vertices = [\n            Vector3.fromValues(-this.outerHalfSide, halfMiddleHeight, -0.01),\n            Vector3.fromValues(-this.outerHalfEdgePiece, halfMiddleHeight, -0.01),\n            Vector3.fromValues(this.outerHalfSide, halfMiddleHeight, -0.01),\n            Vector3.fromValues(-this.outerHalfSide, -halfMiddleHeight, -0.01),\n            Vector3.fromValues(-this.outerHalfEdgePiece, -halfMiddleHeight, -0.01),\n            Vector3.fromValues(this.outerHalfSide, -halfMiddleHeight, -0.01),\n            // Points for when middle is rotated\n            Vector3.fromValues(2 * this.outerHalfEdgePiece, halfMiddleHeight, -0.01),\n            Vector3.fromValues(2 * this.outerHalfEdgePiece, -halfMiddleHeight, -0.01),\n            Vector3.fromValues(2 * cornerLength, halfMiddleHeight, -0.01),\n            Vector3.fromValues(2 * cornerLength, -halfMiddleHeight, -0.01),\n        ];\n        // Left\n        const faces = [new Face([0, 1, 4, 3], vertices, front)];\n        // Right\n        if (!rotated) {\n            faces.push(new Face([1, 2, 5, 4], vertices, front));\n        }\n        else {\n            faces.push(new Face([1, 6, 7, 4], vertices, back));\n            faces.push(new Face([6, 8, 9, 7], vertices, right));\n        }\n        return new Geometry(vertices, faces);\n    }\n    buildSquare1(top, bottom, middleRotated) {\n        const layerHeight = this.halfSide - this.halfEdgePiece;\n        const middleHeight = this.sideLength - 2 * layerHeight;\n        const halfMiddleHeight = middleHeight / 2;\n        let pieces = [];\n        const topLayer = new Group(this.makeLayer(top));\n        const bottomLayer = new Group(this.makeLayer(bottom));\n        topLayer.translate(0, this.outerHalfSide + halfMiddleHeight, 0);\n        bottomLayer.translate(0, -(this.outerHalfSide + halfMiddleHeight), 0);\n        bottomLayer.rotate(DEG_30_RADIANS, 0, 0, 1);\n        pieces = [topLayer, bottomLayer];\n        const frontColor = this.scheme.front || DEFAULT_SQ1_SCHEME.front;\n        const leftColor = this.scheme.left || DEFAULT_SQ1_SCHEME.left;\n        const backColor = this.scheme.back || DEFAULT_SQ1_SCHEME.back;\n        const m = this.square1Middle(frontColor, leftColor, backColor, middleRotated);\n        this.faces = {\n            top: topLayer,\n            bottom: bottomLayer,\n        };\n        pieces.push(m);\n        return pieces;\n    }\n}\n","import { ROTATION_VECTOR, SOLVED_TOP_PIECES, SOLVED_BOTTOM_PIECES, DEFAULT_SQ1_SCHEME, } from \"./constants\";\nimport { Square1Builder } from \"./interface\";\nimport { DEG_30_RADIANS } from \"./../../math/constants\";\nimport { Geometry } from \"./../../geometry/geometry\";\nimport { Face } from \"./../../geometry/face\";\nimport { Group } from \"../../geometry/group\";\nimport { Vector3 } from \"../../math/vector\";\nconst INNER_FACE_COLOR = { value: \"#333\", stroke: \"#333\" };\nexport class Square1 extends Square1Builder {\n    constructor(topLayer = SOLVED_TOP_PIECES, bottomLayer = SOLVED_BOTTOM_PIECES, middleRotated = false, scheme = DEFAULT_SQ1_SCHEME, sideLength = 1.25) {\n        super(topLayer, bottomLayer, middleRotated, scheme, sideLength);\n    }\n    square1Corner(top, side1, side2) {\n        const points = [\n            // Top\n            Vector3.fromValues(0, 0, this.halfSide),\n            Vector3.fromValues(this.halfSide, this.halfEdgePiece, this.halfSide),\n            Vector3.fromValues(this.halfSide, this.halfSide, this.halfSide),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfSide),\n            // Bottom\n            Vector3.fromValues(0, 0, this.halfSide - this.layerWidth),\n            Vector3.fromValues(this.halfSide, this.halfEdgePiece, this.halfSide - this.layerWidth),\n            Vector3.fromValues(this.halfSide, this.halfSide, this.halfSide - this.layerWidth),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfSide - this.layerWidth),\n        ];\n        const faces = [\n            new Face([0, 1, 2, 3], points, top),\n            // TODO: the faces commented out here are the underside of the pieces so\n            // they show gray when the cube is scrambled. But they are overlapping sometimes\n            // with outward sticker faces. removing them for now, but it'd be nice to\n            // fix this.\n            new Face([4, 5, 6, 7], points, INNER_FACE_COLOR),\n            new Face([0, 1, 5, 4], points, INNER_FACE_COLOR),\n            new Face([2, 3, 7, 6], points, side1),\n            new Face([1, 2, 6, 5], points, side2),\n            new Face([0, 3, 7, 4], points, INNER_FACE_COLOR),\n        ];\n        const innerCentroid = Vector3.fromValues(this.halfSide / 2, this.halfSide / 2, this.halfSide / 2);\n        faces[1].centroid = innerCentroid;\n        faces[2].centroid = innerCentroid;\n        faces[5].centroid = innerCentroid;\n        return new Geometry(points, faces);\n    }\n    square1Edge(top, side) {\n        const points = [\n            // Top\n            Vector3.fromValues(0, 0, this.halfSide).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfSide).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(-this.halfEdgePiece, this.halfSide, this.halfSide).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            // Bottom\n            Vector3.fromValues(0, 0, this.halfSide - this.layerWidth).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfSide - this.layerWidth).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(-this.halfEdgePiece, this.halfSide, this.halfSide - this.layerWidth).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n        ];\n        const faces = [\n            new Face([0, 1, 2], points, top),\n            new Face([3, 4, 5], points, INNER_FACE_COLOR),\n            new Face([1, 2, 5, 4], points, side),\n            new Face([0, 1, 4, 3], points, INNER_FACE_COLOR),\n            new Face([0, 2, 5, 3], points, INNER_FACE_COLOR),\n        ];\n        const innerFaceCentroid = Vector3.fromValues(0, this.halfSide / 2, this.halfSide / 2).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS);\n        // Override centroid to avoid drawing over outside stickers\n        faces[1].centroid = innerFaceCentroid;\n        faces[3].centroid = innerFaceCentroid;\n        faces[4].centroid = innerFaceCentroid;\n        return new Geometry(points, faces);\n    }\n    square1Middle(front, side, back) {\n        const vertices = [\n            Vector3.fromValues(-this.halfSide, -this.halfSide, this.halfMiddleWidth),\n            Vector3.fromValues(-this.halfSide, this.halfSide, this.halfMiddleWidth),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfMiddleWidth),\n            Vector3.fromValues(-this.halfEdgePiece, -this.halfSide, this.halfMiddleWidth),\n            Vector3.fromValues(-this.halfSide, -this.halfSide, -this.halfMiddleWidth),\n            Vector3.fromValues(-this.halfSide, this.halfSide, -this.halfMiddleWidth),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, -this.halfMiddleWidth),\n            Vector3.fromValues(-this.halfEdgePiece, -this.halfSide, -this.halfMiddleWidth),\n        ];\n        const faces = [\n            new Face([0, 1, 2, 3], vertices, { value: \"#333\" }),\n            new Face([4, 5, 6, 7], vertices, { value: \"#333\" }),\n            new Face([0, 1, 5, 4], vertices, side),\n            new Face([1, 2, 6, 5], vertices, back),\n            // new Face([2, 3, 7, 6], vertices, { value: \"#333\" }),\n            new Face([0, 3, 7, 4], vertices, front),\n        ];\n        const innerFaceCentroid = Vector3.fromValues(-this.halfSide / 2, 0, 0);\n        // Override centroid to avoid drawing over outside stickers\n        faces[0].centroid = innerFaceCentroid;\n        faces[1].centroid = innerFaceCentroid;\n        faces[2].centroid = Vector3.fromValues(-(this.halfSide + this.halfSide * 0.45), 0, 0);\n        return new Geometry(vertices, faces);\n    }\n    buildSquare1(top, bottom, middleRotated) {\n        const topLayer = new Group(this.makeLayer(top));\n        const bottomLayer = new Group(this.makeLayer(bottom));\n        bottomLayer.rotate(Math.PI, 1, 0, 0);\n        bottomLayer.rotate(DEG_30_RADIANS, 0, 0, 1);\n        const pieces = [topLayer, bottomLayer];\n        const frontColor = this.scheme.front || DEFAULT_SQ1_SCHEME.front;\n        const leftColor = this.scheme.left || DEFAULT_SQ1_SCHEME.left;\n        const backColor = this.scheme.back || DEFAULT_SQ1_SCHEME.back;\n        const rightColor = this.scheme.right || DEFAULT_SQ1_SCHEME.right;\n        const m1 = this.square1Middle(frontColor, leftColor, backColor);\n        const m2 = this.square1Middle(backColor, rightColor, frontColor);\n        m2.rotate(Math.PI, 0, 0, 1);\n        if (middleRotated) {\n            m2.rotate(Math.PI, ROTATION_VECTOR.x, ROTATION_VECTOR.y, ROTATION_VECTOR.z);\n        }\n        pieces.push(m1);\n        pieces.push(m2);\n        this.faces = {\n            top: topLayer,\n            bottom: bottomLayer,\n        };\n        return pieces;\n    }\n}\n","import { Geometry } from \"./geometry\";\nimport { Face } from \"./face\";\nimport { Vector3 } from \"../math/vector\";\nexport class Plane extends Geometry {\n    constructor(width, height, color) {\n        let vertices = [\n            Vector3.fromValues(0, 0, 0),\n            Vector3.fromValues(width, 0, 0),\n            Vector3.fromValues(width, -height, 0),\n            Vector3.fromValues(0, -height, 0),\n        ];\n        let faces = [new Face([0, 1, 2, 3], vertices, color)];\n        super(vertices, faces);\n    }\n}\n","import { Geometry } from \"./geometry\";\nimport { Face } from \"./face\";\nimport { SQRT_3 } from \"../math/constants\";\nimport { Vector3 } from \"../math/vector\";\nexport class Triangle extends Geometry {\n    constructor(a, b, c, color) {\n        let verticies = [a, b, c];\n        let faces = [new Face([0, 1, 2], verticies, color)];\n        super(verticies, faces);\n    }\n}\nexport class EquilateralTriangle extends Triangle {\n    constructor(base, color) {\n        let height = base * (SQRT_3 / 2);\n        super(Vector3.fromValues(0, 0, 0), Vector3.fromValues(base / 2, height, 0), Vector3.fromValues(base, 0, 0), color);\n    }\n}\n","import { RED, YELLOW, BLUE, ORANGE, GREEN, WHITE, BLACK } from \"./../colors\";\nimport { Group } from \"../../geometry/group\";\nimport { Plane } from \"../../geometry/plane\";\nimport { Triangle } from \"../../geometry/triangle\";\nimport { Vector3 } from \"../../math/vector\";\nexport class SkewbNet {\n    constructor() {\n        const cubeWidth = 1;\n        const centerWidth = Math.sqrt(Math.pow(cubeWidth / 2, 2) * 2);\n        const orange = new Group(this.makeStickers(ORANGE, centerWidth, Vector3.fromValues(-cubeWidth, 0, 0)));\n        const green = new Group(this.makeStickers(GREEN, centerWidth, Vector3.fromValues(2 * cubeWidth, 0, 0)));\n        const white = new Group(this.makeStickers(WHITE, centerWidth, Vector3.fromValues(0, -cubeWidth, 0)));\n        const red = new Group(this.makeStickers(RED, centerWidth, Vector3.fromValues(cubeWidth, 0, 0)));\n        const yellow = new Group(this.makeStickers(YELLOW, centerWidth, Vector3.fromValues(0, cubeWidth, 0)));\n        const blue = new Group(this.makeStickers(BLUE, centerWidth, Vector3.fromValues(0, 0, 0)));\n        this.U = yellow;\n        this.R = red;\n        this.F = blue;\n        this.L = orange;\n        this.B = green;\n        this.D = white;\n        this.faces = {\n            top: this.U,\n            front: this.F,\n            right: this.R,\n            back: this.B,\n            left: this.L,\n            bottom: this.D,\n        };\n        this.stickers = [red, yellow, blue, orange, green, white];\n        this.group = new Group(this.stickers);\n        this.group.translate(-cubeWidth / 4, 0, 0);\n        this.group.scale(0.5, 0.5, 0.5);\n    }\n    makeStickers(color, width, translate) {\n        const center = new Plane(width, width, color);\n        center.translate(translate.x, translate.y, translate.z);\n        center.rotate(Math.PI / 4, 0, 0, 1);\n        center.translate(-width / 2, width / 2, 0);\n        const triangles = [];\n        for (let i = 0; i < 4; i++) {\n            const triangle = new Triangle(Vector3.fromValues(-width / 2, width / 2, 0), Vector3.fromValues(0, width, 0), Vector3.fromValues(width / 2, width / 2, 0), color);\n            triangle.translate(translate.x, translate.y, translate.z);\n            triangle.rotate((-Math.PI / 2) * i, 0, 0, 1);\n            triangle.rotate(Math.PI / 4, 0, 0, 1);\n            triangles.push(triangle);\n        }\n        return [center, ...triangles];\n    }\n    setColors(colors) {\n        let { top, right, front, bottom, left, back } = colors;\n        this.setFaceColors(this.U, top);\n        this.setFaceColors(this.R, right);\n        this.setFaceColors(this.F, front);\n        this.setFaceColors(this.D, bottom);\n        this.setFaceColors(this.L, left);\n        this.setFaceColors(this.B, back);\n    }\n    setFaceColors(faceStickers, colors = []) {\n        faceStickers.objects[0].faces[0].color = colors[0] || BLACK;\n        faceStickers.objects[1].faces[0].color = colors[1] || BLACK;\n        faceStickers.objects[2].faces[0].color = colors[2] || BLACK;\n        faceStickers.objects[3].faces[0].color = colors[4] || BLACK; // Setting 3 -> 4 and 4 -> 3 now because 4 and 3 are stored incorrectly in this class.\n        faceStickers.objects[4].faces[0].color = colors[3] || BLACK;\n    }\n}\n","import { RED, YELLOW, BLUE, ORANGE, GREEN, WHITE, BLACK } from \"../colors\";\nimport { Group } from \"../../geometry/group\";\nimport { Plane } from \"../../geometry/plane\";\nimport { Triangle } from \"../../geometry/triangle\";\nimport { Vector3 } from \"../../math/vector\";\nexport class Skewb {\n    constructor() {\n        const cubeWidth = 1.25;\n        const centerWidth = Math.sqrt(Math.pow(cubeWidth / 2, 2) * 2);\n        const halfWidth = cubeWidth / 2;\n        const red = new Group(this.makeStickers(RED, centerWidth));\n        const yellow = new Group(this.makeStickers(YELLOW, centerWidth, Vector3.fromValues(1, 0, 0)));\n        const blue = new Group(this.makeStickers(BLUE, centerWidth, Vector3.fromValues(0, 1, 0)));\n        const orange = new Group(this.makeStickers(ORANGE, centerWidth));\n        const green = new Group(this.makeStickers(GREEN, centerWidth, Vector3.fromValues(0, 1, 0)));\n        const white = new Group(this.makeStickers(WHITE, centerWidth, Vector3.fromValues(1, 0, 0)));\n        this.U = yellow;\n        this.R = red;\n        this.F = blue;\n        this.L = orange;\n        this.B = green;\n        this.D = white;\n        this.faces = {\n            top: this.U,\n            front: this.F,\n            right: this.R,\n            back: this.B,\n            left: this.L,\n            bottom: this.D,\n        };\n        red.translate(0, 0, halfWidth);\n        red.rotate(Math.PI, 1, 0, 0);\n        red.rotate(Math.PI / 2, 0, 0, 1);\n        orange.rotate(-Math.PI / 2, 0, 0, 1);\n        orange.translate(0, 0, -halfWidth);\n        blue.rotate(-Math.PI / 2, 1, 0, 0);\n        blue.translate(-halfWidth, 0, 0);\n        green.translate(halfWidth, 0, 0);\n        green.rotate(Math.PI, 0, 1, 0);\n        green.rotate(-Math.PI / 2, 1, 0, 0);\n        yellow.rotate(Math.PI, 0, 1, 0);\n        yellow.translate(0, halfWidth, 0);\n        white.translate(0, -halfWidth, 0);\n        white.rotate(Math.PI, 1, 0, 0);\n        this.stickers = [red, yellow, blue, orange, green, white];\n        this.group = new Group(this.stickers);\n    }\n    makeStickers(color, width, axis) {\n        const center = new Plane(width, width, color);\n        if (axis) {\n            center.rotate(Math.PI / 2, axis.x, axis.y, axis.z);\n        }\n        center.rotate(Math.PI / 4, 0, 0, 1);\n        center.translate(-width / 2, width / 2, 0);\n        const triangles = [];\n        for (let i = 0; i < 4; i++) {\n            const triangle = new Triangle(Vector3.fromValues(-width / 2, width / 2, 0), Vector3.fromValues(0, width, 0), Vector3.fromValues(width / 2, width / 2, 0), color);\n            if (axis) {\n                triangle.rotate(Math.PI / 2, axis.x, axis.y, axis.z);\n            }\n            triangle.rotate((Math.PI / 2) * i, 0, 0, 1);\n            triangle.rotate(Math.PI / 4, 0, 0, 1);\n            triangles.push(triangle);\n        }\n        return [center, ...triangles];\n    }\n    setColors(colors) {\n        let { top, right, front, bottom, left, back } = colors;\n        this.setFaceColors(this.U, top);\n        this.setFaceColors(this.R, right);\n        this.setFaceColors(this.F, front);\n        this.setFaceColors(this.D, bottom);\n        this.setFaceColors(this.L, left);\n        this.setFaceColors(this.B, back);\n    }\n    setFaceColors(faceStickers, colors = []) {\n        faceStickers.objects[0].faces[0].color = colors[0] || BLACK;\n        faceStickers.objects[1].faces[0].color = colors[1] || BLACK;\n        faceStickers.objects[2].faces[0].color = colors[2] || BLACK;\n        faceStickers.objects[3].faces[0].color = colors[4] || BLACK; // Setting 3 -> 4 and 4 -> 3 now because 4 and 3 are stored incorrectly in this class.\n        faceStickers.objects[4].faces[0].color = colors[3] || BLACK;\n    }\n}\n","import { Face } from \"./face\";\nimport { Geometry } from \"./geometry\";\nimport { SQRT_3 } from \"../math/constants\";\nimport { Vector3 } from \"../math/vector\";\n/**\n * Geometry to build a triangle lattice for the\n * pyraminx puzzle\n */\nexport class TriangleLattice extends Geometry {\n    constructor(base, size, color) {\n        const halfBase = base / 2;\n        const fullHeight = base * (SQRT_3 / 2);\n        const triangleBase = base / size;\n        const triangleHeight = fullHeight / size;\n        const inradius = fullHeight / 3;\n        let vertices = [];\n        let faces = [];\n        /**\n         * Builds one layer of verticies at a time\n         * for each layer after the first it constructs\n         * faces for the triangles (0,1,4), (1,2,5) etc...\n         *\n         *       9\n         *     7   8\n         *   4   5   6\n         * 0   1   2   3\n         */\n        let index = 0;\n        for (let layer = 0; layer <= size; layer++) {\n            for (let vertex = 0, count = size - layer; vertex <= count; vertex++) {\n                const horizontalOffset = -halfBase;\n                const verticalOffset = -inradius;\n                const x = triangleBase * vertex + (layer * triangleBase) / 2 + horizontalOffset;\n                const y = triangleHeight * layer + verticalOffset;\n                vertices.push(Vector3.fromValues(x, y, 0));\n                if (layer > 0) {\n                    // down triangle\n                    if (vertex > 0) {\n                        faces.push(new Face([index, index - 1, index - count - 2], null, color));\n                    }\n                    // up triangle\n                    faces.push(new Face([index, index - count - 2, index - count - 1], null, color));\n                }\n                index++;\n            }\n        }\n        faces.forEach((face) => face.calculateCentroid(vertices));\n        super(vertices, faces);\n    }\n}\n","import { GREEN, RED, BLUE, YELLOW, BLACK } from \"../colors\";\nimport { TriangleLattice } from \"../../geometry/triangleLattice\";\nimport { Group } from \"../../geometry/group\";\nimport { SQRT_3 } from \"../../math/constants\";\nconst DEG_60_RADIANS = (60 * Math.PI) / 180;\nexport class PyraminxNet {\n    constructor(size, sideLength = 0.925) {\n        this.size = size;\n        const fullHeight = sideLength * (SQRT_3 / 2);\n        const inDiameter = fullHeight / 1.5;\n        const faceSpacing = inDiameter * 0.1;\n        const U = new TriangleLattice(sideLength, size, YELLOW);\n        const R = new TriangleLattice(sideLength, size, GREEN);\n        const L = new TriangleLattice(sideLength, size, BLUE);\n        const B = new TriangleLattice(sideLength, size, RED);\n        this.L = L;\n        this.R = R;\n        this.U = U;\n        this.B = B;\n        R.rotate(-DEG_60_RADIANS, 0, 0, 1);\n        R.translate(0, inDiameter + faceSpacing, 0);\n        R.rotate(2 * DEG_60_RADIANS, 0, 0, 1);\n        U.rotate(DEG_60_RADIANS, 0, 0, 1);\n        U.translate(0, inDiameter + faceSpacing, 0);\n        U.rotate(-2 * DEG_60_RADIANS, 0, 0, 1);\n        B.rotate(3 * DEG_60_RADIANS, 0, 0, 1);\n        B.translate(0, inDiameter + faceSpacing, 0);\n        B.rotate(-2 * DEG_60_RADIANS, 0, 0, 1);\n        this.faces = {\n            top: this.U,\n            right: this.R,\n            left: this.L,\n            back: this.B,\n        };\n        this.group = new Group([U, R, L, B]);\n    }\n    setColors(colors) {\n        let { left, right, top, back } = colors;\n        this.setFaceColors(this.L, left);\n        this.setFaceColors(this.R, right);\n        this.setFaceColors(this.U, top);\n        this.setFaceColors(this.B, back);\n    }\n    setFaceColors(lattice, colors) {\n        lattice.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n            else {\n                f.color = BLACK;\n            }\n        });\n    }\n}\n","import { GREEN, RED, BLUE, YELLOW, BLACK } from \"../colors\";\nimport { TriangleLattice } from \"../../geometry/triangleLattice\";\nimport { Group } from \"../../geometry/group\";\nconst ARC_COS_THIRD = Math.acos(1 / 3);\nconst DEG_120_RADIANS = (120 * Math.PI) / 180;\nconst SQRT_24 = Math.sqrt(24);\nexport class Pyraminx {\n    constructor(size, sideLength = 1.75) {\n        this.size = size;\n        const insphereRadius = sideLength / SQRT_24;\n        const U = new TriangleLattice(sideLength, size, YELLOW);\n        const R = new TriangleLattice(sideLength, size, GREEN);\n        const L = new TriangleLattice(sideLength, size, BLUE);\n        const B = new TriangleLattice(sideLength, size, RED);\n        this.L = L;\n        this.R = R;\n        this.U = U;\n        this.B = B;\n        U.rotate(DEG_120_RADIANS, 0, 0, 1);\n        U.rotate(ARC_COS_THIRD, 1, 0, 0);\n        U.translate(0, 0, insphereRadius);\n        R.rotate(ARC_COS_THIRD, 1, 0, 0);\n        R.translate(0, 0, insphereRadius);\n        L.rotate(-DEG_120_RADIANS, 0, 0, 1);\n        L.rotate(ARC_COS_THIRD, 1, 0, 0);\n        L.translate(0, 0, insphereRadius);\n        B.rotate(Math.PI, 0, 1, 0);\n        B.translate(0, 0, insphereRadius);\n        this.faces = {\n            top: this.U,\n            right: this.R,\n            left: this.L,\n            back: this.B,\n        };\n        this.group = new Group([U, L, R, B]);\n    }\n    setColors(colors) {\n        let { left, right, top, back } = colors;\n        this.setFaceColors(this.L, left);\n        this.setFaceColors(this.R, right);\n        this.setFaceColors(this.U, top);\n        this.setFaceColors(this.B, back);\n    }\n    setFaceColors(lattice, colors) {\n        lattice.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n            else {\n                f.color = BLACK;\n            }\n        });\n    }\n}\n","import { Face } from \"./../geometry/face\";\nimport { Geometry } from \"../geometry/geometry\";\nimport { polarToCartesian, lineSegmentLength, pentagonOutRadius, } from \"../math/utils\";\nimport { Vector2, Vector3 } from \"../math/vector\";\nexport class DividedPentagon extends Geometry {\n    /**\n     *\n     * @param color\n     * @param layers number of layers\n     * @param length length of entire edge of the outer pentagon\n     */\n    constructor(color, layers = 2, length = 1.6, layerWidth = 0.4 // TODO: calculate this somehow\n    ) {\n        const outRadius = pentagonOutRadius(length);\n        const radiusDiff = layerWidthToRadiusDiff(layerWidth);\n        const centerOutRadius = outRadius - radiusDiff * (layers - 1);\n        const vertices = faceVerticies(layers, centerOutRadius, radiusDiff, layerWidth);\n        super(vertices, makeFaces(layers, color, vertices));\n    }\n}\n/**\n * Given the the distance between two parallel sides of the\n * dividen pentagon, calculate the difference in pentagon radius\n */\nfunction layerWidthToRadiusDiff(width) {\n    const aSquared = width * width;\n    const angleRadians = (71 * Math.PI) / 180;\n    // Law of cosines\n    const cSquared = 2 * aSquared - 2 * aSquared * Math.cos(angleRadians);\n    const diff = 2 * Math.sqrt(Math.abs(aSquared - cSquared));\n    return diff;\n}\n/**\n * creates mapping for indicies in one layer to another\n * so we can build the geometry for a megaminx face\n */\nfunction downMapping(layer) {\n    if (layer < 1) {\n        return [];\n    }\n    let mapping = [];\n    const layerPoints = 5 + (layer - 1) * 10;\n    let previousPoints = 5 * (layer - 1) * (layer - 1);\n    for (let i = 0; i < layerPoints; i++) {\n        mapping.push(i + previousPoints);\n        if (i % (layerPoints / 5) === 0) {\n            mapping.push(i + previousPoints);\n        }\n    }\n    mapping.push(mapping.shift());\n    mapping.push(mapping.shift());\n    return mapping;\n}\nfunction layerVertexNumbers(layer) {\n    let previousPoints = 5 * layer * layer;\n    let vertexNumbers = [];\n    for (let i = 0, layerPoints = 5 + layer * 10; i < layerPoints; i++) {\n        vertexNumbers.push(i + previousPoints);\n    }\n    return vertexNumbers;\n}\nfunction makeFaces(layers, color, vertices) {\n    let faces = [];\n    const firstLayerFace = new Face([0, 1, 2, 3, 4], vertices, color);\n    faces.push(firstLayerFace);\n    let totalPoints = 5;\n    let currentPoint = 5;\n    for (let i = 1; i < layers; i++) {\n        const layerPoints = 5 + i * 10;\n        totalPoints += layerPoints;\n        const downMap = downMapping(i);\n        const prevLayer = layerVertexNumbers(i - 1);\n        const currentLayer = layerVertexNumbers(i);\n        while (currentPoint < totalPoints) {\n            const currentLayerPoint = currentPoint - (prevLayer[prevLayer.length - 1] + 1);\n            const f1isCorner = currentLayerPoint % (layerPoints / 5) === 0;\n            if (f1isCorner) {\n                currentPoint++;\n                continue;\n            }\n            const f2isCorner = (currentLayerPoint + 1) % (layerPoints / 5) === 0;\n            let f1 = currentPoint;\n            let f2 = currentLayer[(currentLayerPoint + 1) % currentLayer.length];\n            let f3 = f2isCorner ? f2 + 1 : downMap.shift();\n            let f4 = f2isCorner\n                ? downMap.shift()\n                : prevLayer[(prevLayer.indexOf(f3) - 1 + prevLayer.length) % prevLayer.length];\n            currentPoint++;\n            faces.push(new Face([f1, f2, f3, f4], vertices, color));\n        }\n    }\n    return faces;\n}\n/**\n * Takes two points and extrapolates points along the line they make\n *\n * @param p1 point 1\n * @param p2 point 2\n * @param segments how many points to extrapolate from each direction p1 -> p2 and p2 -> p1\n */\nfunction segmentPoints(p1, p2, segments, layerWidth) {\n    if (segments === 0) {\n        return [\n            Vector3.fromValues(p1.x, p1.y, 0),\n            Vector3.fromValues(p2.x, p2.y, 0),\n        ];\n    }\n    const length = lineSegmentLength(p1, p2);\n    let points = [];\n    for (let i = segments; i > 0; i--) {\n        // extrapolate from p1.v\n        let a = Vector3.fromValues(p1.x + ((p2.x - p1.x) / length) * layerWidth * i, p1.y + ((p2.y - p1.y) / length) * layerWidth * i, 0);\n        points.unshift(a);\n        // extrapolate from p2.v\n        let b = Vector3.fromValues(p2.x + ((p1.x - p2.x) / length) * layerWidth * i, p2.y + ((p1.y - p2.y) / length) * layerWidth * i, 0);\n        points.push(b);\n    }\n    points.unshift(Vector3.fromValues(p1.x, p1.y, 0));\n    points.push(Vector3.fromValues(p2.x, p2.y, 0));\n    return points;\n}\nfunction layerVerticies(layer, radius, layerWidth) {\n    let verticies = [];\n    for (let i = 0; i < 5; i++) {\n        const theta = (i * (2 * Math.PI)) / 5 - Math.PI / 10;\n        const v = polarToCartesian(radius, theta);\n        if (verticies.length > 0) {\n            const lastPoint = verticies[verticies.length - 1];\n            const points = segmentPoints(Vector2.fromValues(lastPoint.x, lastPoint.y), v, layer, layerWidth);\n            points.shift(); // Remove the first, otherwise it's duplicated\n            verticies = verticies.concat(points);\n        }\n        else {\n            verticies.push(Vector3.fromValues(v.x, v.y, 0));\n        }\n    }\n    // Insert segments for last and first\n    const first = verticies[0];\n    const last = verticies[verticies.length - 1];\n    const points = segmentPoints(Vector2.fromValues(last.x, last.y), Vector2.fromValues(first.x, first.y), layer, layerWidth);\n    points.pop();\n    points.shift();\n    verticies = verticies.concat(points);\n    return verticies;\n}\nfunction faceVerticies(layers, radius, radiusDiff, layerWidth) {\n    let verticies = [];\n    for (let i = 0; i < layers; i++) {\n        const r = radius + radiusDiff * i;\n        verticies = [...verticies, ...layerVerticies(i, r, layerWidth)];\n    }\n    return verticies;\n}\n","import { WHITE, RED, GREEN, PURPLE, YELLOW, BLUE, GREY, DARK_BLUE, LIGHT_YELLOW, PINK, LIGHT_GREEN, ORANGE, BLACK, } from \"./../colors\";\nimport { Group } from \"./../../geometry/group\";\nimport { DividedPentagon } from \"./../../geometry/dividedPentagon\";\nimport { pentagonInRadius } from \"../../math/utils\";\nimport { chunkArray } from \"../../utils/arrays\";\nimport { Matrix4 } from \"../../math/matrix\";\nconst DEG_36_RADIANS = (36 * Math.PI) / 180;\nconst DEG_72_RADIANS = (72 * Math.PI) / 180;\n/**\n * for a megaminx with side length 1,\n * layer widths that look good.\n */\nconst OPTIMAL_LAYER_WIDTH = {\n    2: 0.3,\n    3: 0.17,\n    4: 0.121,\n};\nfunction getLayerWidth(length, layers) {\n    return OPTIMAL_LAYER_WIDTH[layers] || length / (layers * 1.9);\n}\nexport class MegaminxNet {\n    constructor(layers) {\n        this.layers = layers;\n        const sideLength = 0.75;\n        const layerWidth = getLayerWidth(length, layers);\n        // Left\n        this.U = new DividedPentagon(WHITE, layers, sideLength, layerWidth);\n        this.F = new DividedPentagon(RED, layers, sideLength, layerWidth);\n        this.R = new DividedPentagon(BLUE, layers, sideLength, layerWidth);\n        this.L = new DividedPentagon(GREEN, layers, sideLength, layerWidth);\n        this.dl = new DividedPentagon(LIGHT_YELLOW, layers, sideLength, layerWidth);\n        this.dr = new DividedPentagon(PINK, layers, sideLength, layerWidth);\n        // Right\n        this.BL = new DividedPentagon(PURPLE, layers, sideLength, layerWidth);\n        this.BR = new DividedPentagon(YELLOW, layers, sideLength, layerWidth);\n        this.d = new DividedPentagon(GREY, layers, sideLength, layerWidth);\n        this.bl = new DividedPentagon(DARK_BLUE, layers, sideLength, layerWidth);\n        this.br = new DividedPentagon(LIGHT_GREEN, layers, sideLength, layerWidth);\n        this.b = new DividedPentagon(ORANGE, layers, sideLength, layerWidth);\n        const ind = 2 * pentagonInRadius(sideLength);\n        // Left\n        this.U.translate(0, ind, 0);\n        this.U.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\n        this.R.rotate(-DEG_72_RADIANS, 0, 0, 1);\n        this.R.translate(0, ind, 0);\n        this.R.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\n        this.L.rotate(DEG_72_RADIANS, 0, 0, 1);\n        this.L.translate(0, ind, 0);\n        this.L.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\n        this.dl.rotate(2 * DEG_72_RADIANS, 0, 0, 1);\n        this.dl.translate(0, ind, 0);\n        this.dl.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\n        this.dr.rotate(-2 * DEG_72_RADIANS, 0, 0, 1);\n        this.dr.translate(0, ind, 0);\n        this.dr.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\n        // Right\n        this.b.rotate(Math.PI, 0, 0, 1);\n        this.b.rotate(-2 * DEG_36_RADIANS, 0, 0, 1);\n        this.d.rotate(3 * DEG_36_RADIANS, 0, 0, 1);\n        this.d.translate(0, ind, 0);\n        this.d.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\n        this.br.rotate(DEG_36_RADIANS, 0, 0, 1);\n        this.br.translate(0, ind, 0);\n        this.br.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\n        this.BR.rotate(-DEG_36_RADIANS, 0, 0, 1);\n        this.BR.translate(0, ind, 0);\n        this.BR.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\n        this.BL.rotate(-3 * DEG_36_RADIANS, 0, 0, 1);\n        this.BL.translate(0, ind, 0);\n        this.BL.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\n        this.bl.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\n        this.bl.translate(0, ind, 0);\n        this.bl.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\n        let bottomTransforms = new Matrix4();\n        bottomTransforms.rotate(-DEG_72_RADIANS, 0, 0, 1);\n        bottomTransforms.translate(0, 2 * ind, 0);\n        bottomTransforms.rotate(2 * DEG_72_RADIANS, 0, 0, 1);\n        bottomTransforms.translate(0, -ind, 0);\n        [this.d, this.bl, this.BL, this.BR, this.br, this.b].forEach((face) => {\n            Matrix4.multiply(face.matrix, bottomTransforms, face.matrix);\n        });\n        this.faces = {\n            U: this.U,\n            F: this.F,\n            R: this.R,\n            dr: this.dr,\n            dl: this.dl,\n            L: this.L,\n            d: this.d,\n            br: this.br,\n            BR: this.BR,\n            BL: this.BL,\n            bl: this.bl,\n            b: this.b,\n        };\n        this.group = new Group([\n            this.U,\n            this.F,\n            this.L,\n            this.dr,\n            this.dl,\n            this.R,\n            this.d,\n            this.bl,\n            this.BL,\n            this.BR,\n            this.br,\n            this.b,\n        ]);\n        this.group.scale(0.33, 0.33, 0.33);\n        this.group.translate(-1.75 * sideLength, 0, 0);\n    }\n    setColors(colors) {\n        let { U, R, F, d, L, b, dr, dl, br, BR, BL, bl } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.d, d);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.b, b);\n        this.setFaceColors(this.dr, dr);\n        this.setFaceColors(this.dl, dl);\n        this.setFaceColors(this.BR, BR);\n        this.setFaceColors(this.BL, BL);\n        this.setFaceColors(this.bl, bl);\n        this.setFaceColors(this.br, br);\n    }\n    oldSetColors(colors) {\n        const n = this.layers;\n        const numStickers = 5 * n * n - 5 * n + 1;\n        let [U, R, F, dr, dl, L, d, br, BR, BL, bl, b] = chunkArray(colors, numStickers);\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.d, d);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.b, b);\n        this.setFaceColors(this.dr, dr);\n        this.setFaceColors(this.dl, dl);\n        this.setFaceColors(this.br, br);\n        this.setFaceColors(this.BR, BR);\n        this.setFaceColors(this.BL, BL);\n        this.setFaceColors(this.bl, bl);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n            else {\n                f.color = BLACK;\n            }\n        });\n    }\n}\n","import { WHITE, RED, GREEN, YELLOW, BLUE, ORANGE, LIGHT_GREEN, PINK, LIGHT_YELLOW, DARK_BLUE, GREY, PURPLE, BLACK, } from \"../colors\";\nimport { Group } from \"../../geometry/group\";\nimport { DividedPentagon } from \"../../geometry/dividedPentagon\";\nimport { dodecahedronInRadius } from \"../../math/utils\";\nconst OPTIMAL_LAYER_WIDTH = {\n    2: 0.3,\n    3: 0.17,\n    4: 0.121,\n};\nfunction getLayerWidth(length, layers) {\n    return OPTIMAL_LAYER_WIDTH[layers] || length / (layers * 1.9);\n}\nexport class Megaminx {\n    constructor(layers = 2) {\n        this.layers = layers;\n        const length = 0.75;\n        const megaminxRadius = dodecahedronInRadius(length);\n        const layerWidth = getLayerWidth(length, layers);\n        // Front\n        this.U = new DividedPentagon(WHITE, layers, length, layerWidth);\n        this.F = new DividedPentagon(RED, layers, length, layerWidth);\n        this.R = new DividedPentagon(BLUE, layers, length, layerWidth);\n        this.dr = new DividedPentagon(PINK, layers, length, layerWidth);\n        this.dl = new DividedPentagon(LIGHT_YELLOW, layers, length, layerWidth);\n        this.L = new DividedPentagon(GREEN, layers, length, layerWidth);\n        // Back\n        this.d = new DividedPentagon(GREY, layers, length, layerWidth);\n        this.br = new DividedPentagon(LIGHT_GREEN, layers, length, layerWidth);\n        this.BR = new DividedPentagon(YELLOW, layers, length, layerWidth);\n        this.BL = new DividedPentagon(PURPLE, layers, length, layerWidth);\n        this.bl = new DividedPentagon(DARK_BLUE, layers, length, layerWidth);\n        this.b = new DividedPentagon(ORANGE, layers, length, layerWidth);\n        this.F.translate(0, 0, megaminxRadius);\n        this.b.rotate(Math.PI, 0, 0, 1);\n        this.b.rotate(Math.PI, 0, 1, 0);\n        this.b.translate(0, 0, megaminxRadius);\n        this.U.rotate(Math.PI, 0, 0, 1);\n        this.U.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.U.translate(0, 0, megaminxRadius);\n        this.L.rotate((72 * Math.PI) / 180, 0, 0, 1);\n        this.L.rotate(Math.PI, 0, 0, 1);\n        this.L.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.L.translate(0, 0, megaminxRadius);\n        this.R.rotate((72 * Math.PI) / 180, 0, 0, 1);\n        this.R.rotate(Math.PI / 5, 0, 0, 1);\n        this.R.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.R.translate(0, 0, megaminxRadius);\n        this.dr.rotate((72 * Math.PI) / 180, 0, 0, 1);\n        this.dr.rotate(-Math.PI / 5, 0, 0, 1);\n        this.dr.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.dr.translate(0, 0, megaminxRadius);\n        this.dl.rotate((72 * Math.PI) / 180, 0, 0, 1);\n        this.dl.rotate((-3 * Math.PI) / 5, 0, 0, 1);\n        this.dl.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.dl.translate(0, 0, megaminxRadius);\n        this.BL.rotate(Math.PI / 5, 0, 0, 1);\n        this.BL.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.BL.translate(0, 0, megaminxRadius);\n        this.BR.rotate(-Math.PI / 5, 0, 0, 1);\n        this.BR.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.BR.translate(0, 0, megaminxRadius);\n        this.bl.rotate((3 * Math.PI) / 5, 0, 0, 1);\n        this.bl.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.bl.translate(0, 0, megaminxRadius);\n        this.d.rotate((5 * Math.PI) / 5, 0, 0, 1);\n        this.d.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.d.translate(0, 0, megaminxRadius);\n        this.br.rotate((7 * Math.PI) / 5, 0, 0, 1);\n        this.br.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.br.translate(0, 0, megaminxRadius);\n        this.stickers = [\n            this.U,\n            this.F,\n            this.R,\n            this.dr,\n            this.dl,\n            this.L,\n            this.d,\n            this.br,\n            this.BR,\n            this.BL,\n            this.bl,\n            this.b,\n        ];\n        this.faces = {\n            U: this.U,\n            F: this.F,\n            R: this.R,\n            dr: this.dr,\n            dl: this.dl,\n            L: this.L,\n            d: this.d,\n            br: this.br,\n            BR: this.BR,\n            BL: this.BL,\n            bl: this.bl,\n            b: this.b,\n        };\n        this.group = new Group(this.stickers);\n    }\n    setColors(colors) {\n        let { U, R, F, d, L, b, dr, dl, br, BR, BL, bl } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.d, d);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.b, b);\n        this.setFaceColors(this.dr, dr);\n        this.setFaceColors(this.dl, dl);\n        this.setFaceColors(this.BR, BR);\n        this.setFaceColors(this.BL, BL);\n        this.setFaceColors(this.bl, bl);\n        this.setFaceColors(this.br, br);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n            else {\n                f.color = BLACK;\n            }\n        });\n    }\n}\n","import { Face } from \"./face\";\nimport { Geometry } from \"./geometry\";\nimport { Vector3 } from \"../math/vector\";\n/**\n * Makes a (size*size) grid of colored planes for the\n * rubiks cube stickers. Indexed from the top\n * left to bottom right. See Below\n *\n * ```\n *    0 1 2\n *    3 4 5\n *    6 7 8\n * ```\n *\n * @param length length of the grid\n * @param size number of elements to segment grid into\n * @param color\n */\nexport function makeGrid(length, size, color) {\n    const halfLength = length / 2;\n    const elementWidth = length / size;\n    const halfElementWidth = elementWidth / 2;\n    let stickers = [];\n    for (let i = 0; i < size; i++) {\n        let vOffset = -(-halfLength + halfElementWidth + elementWidth * i);\n        stickers = stickers.concat(makeRow(length, size, color, vOffset));\n    }\n    return stickers;\n}\n/**\n * Makes a row of planes for the rubiks cube stickers.\n * indexed from left to right\n *\n *     0 1 2\n *\n * @param length length of the row horizontally\n * @param size number of elements to segment row into\n * @param color color\n * @param vOffset vertical offset. places vertices of row vertically offset by this amount from x axis\n */\nexport function makeRow(length, size, color, vOffset = 0) {\n    const halfLength = length / 2;\n    const elementWidth = length / size;\n    const halfElementWidth = elementWidth / 2;\n    let stickers = [];\n    for (let i = 0; i < size; i++) {\n        let hOffset = -halfLength + halfElementWidth + elementWidth * i;\n        let vertices = [\n            Vector3.fromValues(-halfElementWidth + hOffset, halfElementWidth + vOffset, 0),\n            Vector3.fromValues(halfElementWidth + hOffset, halfElementWidth + vOffset, 0),\n            Vector3.fromValues(halfElementWidth + hOffset, -halfElementWidth + vOffset, 0),\n            Vector3.fromValues(-halfElementWidth + hOffset, -halfElementWidth + vOffset, 0),\n        ];\n        let faces = [new Face([0, 1, 2, 3], vertices, color)];\n        stickers.push(new Geometry(vertices, faces));\n    }\n    return stickers;\n}\n","import { YELLOW, RED, BLUE, GREEN, ORANGE, BLACK } from \"./../colors\";\nimport { Group } from \"./../../geometry/group\";\nimport { makeGrid, makeRow } from \"./../../geometry/grid\";\nimport { calculateCentroid } from \"../../math/utils\";\nimport { Vector3 } from \"../../math/vector\";\nexport class RubiksCubeTopLayer {\n    constructor(size, rotationAngle = Math.PI / 4) {\n        this.size = size;\n        this.cubeWidth = 1.45;\n        this.halfCubeWidth = this.cubeWidth / 2;\n        this.stickerWidth = this.cubeWidth / size;\n        this.halfStickerWidth = this.stickerWidth / 2;\n        this.cubeWidth = this.stickerWidth * size;\n        this.U = new Group(makeGrid(this.cubeWidth, this.size, YELLOW));\n        this.R = new Group(makeRow(this.cubeWidth, this.size, RED));\n        this.F = new Group(makeRow(this.cubeWidth, this.size, BLUE));\n        this.B = new Group(makeRow(this.cubeWidth, this.size, GREEN));\n        this.L = new Group(makeRow(this.cubeWidth, this.size, ORANGE));\n        const borderOffset = this.halfCubeWidth + this.halfStickerWidth;\n        this.B.translate(0, borderOffset, 0);\n        this.B.rotate(Math.PI, 0, 0, 1);\n        this.F.translate(0, -borderOffset, 0);\n        this.R.translate(borderOffset, 0, 0);\n        this.R.rotate(Math.PI / 2, 0, 0, 1);\n        this.L.translate(-borderOffset, 0, 0);\n        this.L.rotate(-Math.PI / 2, 0, 0, 1);\n        this.rotateBorder(this.F.objects, rotationAngle);\n        this.rotateBorder(this.R.objects, rotationAngle);\n        this.rotateBorder(this.B.objects, rotationAngle);\n        this.rotateBorder(this.L.objects, rotationAngle);\n        this.stickers = [this.U, this.R, this.F, this.B, this.L];\n        this.group = new Group(this.stickers);\n        this.faces = {\n            U: this.U,\n            R: this.R,\n            F: this.F,\n            L: this.L,\n            B: this.B,\n        };\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.objects.forEach((g, i) => {\n            if (colors && colors[i]) {\n                g.faces[0].color = colors[i];\n            }\n            else {\n                g.faces[0].color = BLACK;\n            }\n        });\n    }\n    setColors(colors) {\n        let { U, R, F, L, B } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.B, B);\n    }\n    /**\n     * given a row of stickers centered at 0,0,0\n     * rotates each vertex of each sticker around\n     * the top of the sticker.\n     */\n    rotateBorder(stickers, radians) {\n        stickers.forEach((sticker) => {\n            sticker.vertices = sticker.vertices.map((vertex) => {\n                return vertex.rotateX(Vector3.fromValues(0, this.halfStickerWidth, 0), radians);\n            });\n            sticker.centroid = calculateCentroid(sticker.vertices);\n        });\n    }\n}\n","import { YELLOW, RED, BLUE, WHITE, ORANGE, GREEN, BLACK } from \"./../colors\";\nimport { Group } from \"./../../geometry/group\";\nimport { makeGrid } from \"../../geometry/grid\";\nexport class RubiksCubeNet {\n    constructor(size) {\n        const cubeWidth = 1;\n        this.size = size;\n        const U = makeGrid(cubeWidth, size, YELLOW);\n        const R = makeGrid(cubeWidth, size, RED);\n        const F = makeGrid(cubeWidth, size, BLUE);\n        const D = makeGrid(cubeWidth, size, WHITE);\n        const L = makeGrid(cubeWidth, size, ORANGE);\n        const B = makeGrid(cubeWidth, size, GREEN);\n        this.U = new Group(U);\n        this.U.translate(0, cubeWidth, 0);\n        this.R = new Group(R);\n        this.R.translate(cubeWidth, 0, 0);\n        this.F = new Group(F);\n        this.D = new Group(D);\n        this.D.translate(0, -cubeWidth, 0);\n        this.L = new Group(L);\n        this.L.translate(-cubeWidth, 0, 0);\n        this.B = new Group(B);\n        this.B.translate(2 * cubeWidth, 0, 0);\n        this.stickers = [this.U, this.R, this.F, this.D, this.L, this.B];\n        this.faces = {\n            U: this.U,\n            R: this.R,\n            F: this.F,\n            D: this.D,\n            L: this.L,\n            B: this.B,\n        };\n        this.group = new Group(this.stickers);\n        this.group.translate(-cubeWidth / 4, 0, 0);\n        this.group.scale(0.5, 0.5, 0.5);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.objects.forEach((g, i) => {\n            if (colors && colors[i]) {\n                g.faces[0].color = colors[i];\n            }\n            else {\n                g.faces[0].color = BLACK;\n            }\n        });\n    }\n    setColors(colors) {\n        let { U, R, F, D, L, B } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.D, D);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.B, B);\n    }\n}\n","import { YELLOW, RED, BLUE, WHITE, ORANGE, GREEN, BLACK } from \"./../colors\";\nimport { Group } from \"../../geometry/group\";\nimport { makeGrid } from \"../../geometry/grid\";\nexport class RubiksCube {\n    constructor(size) {\n        this.size = size;\n        const cubeWidth = 1.25;\n        const halfWidth = cubeWidth / 2;\n        this.U = new Group(makeGrid(cubeWidth, size, YELLOW));\n        this.R = new Group(makeGrid(cubeWidth, size, RED));\n        this.F = new Group(makeGrid(cubeWidth, size, BLUE));\n        this.D = new Group(makeGrid(cubeWidth, size, WHITE));\n        this.L = new Group(makeGrid(cubeWidth, size, ORANGE));\n        this.B = new Group(makeGrid(cubeWidth, size, GREEN));\n        this.U.rotate(-Math.PI / 2, 0, 1, 0);\n        this.U.rotate(-Math.PI / 2, 1, 0, 0);\n        this.U.translate(0, 0, halfWidth);\n        this.R.translate(0, 0, halfWidth);\n        this.F.rotate(-Math.PI / 2, 0, 1, 0);\n        this.F.translate(0, 0, halfWidth);\n        this.D.rotate(-Math.PI / 2, 0, 1, 0);\n        this.D.rotate(Math.PI / 2, 1, 0, 0);\n        this.D.translate(0, 0, halfWidth);\n        this.L.rotate(-Math.PI, 0, 1, 0);\n        this.L.translate(0, 0, halfWidth);\n        this.B.rotate(Math.PI / 2, 0, 1, 0);\n        this.B.translate(0, 0, halfWidth);\n        this.stickers = [this.U, this.R, this.F, this.D, this.L, this.B];\n        this.faces = {\n            U: this.U,\n            R: this.R,\n            F: this.F,\n            D: this.D,\n            L: this.L,\n            B: this.B,\n        };\n        this.group = new Group(this.stickers);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.objects.forEach((g, i) => {\n            if (colors && colors[i]) {\n                g.faces[0].color = colors[i];\n            }\n            else {\n                g.faces[0].color = BLACK;\n            }\n        });\n    }\n    setColors(colors) {\n        let { U, R, F, D, L, B } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.D, D);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.B, B);\n    }\n}\n","import { calculateCentroid } from \"../math/utils\";\nimport { Object3D } from \"./object3d\";\nexport class Arrow extends Object3D {\n    constructor(p1, p2) {\n        super();\n        this.p1 = p1;\n        this.p2 = p2;\n        this.centroid = calculateCentroid([p1, p2]);\n    }\n}\n","export function applyTransformations(vertex, transforms) {\n    let v = vertex.clone();\n    transforms.forEach((m, i) => {\n        v.transformMat4(m);\n    });\n    return v;\n}\n","import { Arrow } from \"./../geometry/arrow\";\nimport { Geometry } from \"../geometry/geometry\";\nimport { Group } from \"../geometry/group\";\nimport { applyTransformations } from \"./utils\";\n/**\n * Renderer class to take scene geometry and render it to 2d\n * polygon coordinates.\n *\n * 1. Takes a scene and camera\n * 2. converts the scene 3d geometry to 2d screen geometry based on the camera\n * 3. tries to render each face in order from furthest from camera to closest\n * 4. finally, draws the lines (arrows) over top of everything\n *\n * Implementers need just implement\n *   - drawPolygon - a method that draws polygons on some 2d graphics area\n *   - drawArrow - a method that draws an arrow\n *   - onBeforeRender - do any prep work necessary before rendering a frame\n *   - onComplete - handle any final logic\n */\nexport class PolygonRenderer {\n    constructor() {\n        this.polygons = [];\n        this.arrows = [];\n    }\n    render(scene, camera) {\n        this.polygons = [];\n        scene.objects.forEach((object) => {\n            this.renderObject3D(object, camera, []);\n        });\n        this.onBeforeRender();\n        this.renderPolygons();\n        this.renderArrows();\n        this.onComplete();\n    }\n    renderPolygons() {\n        this.polygons.sort((a, b) => {\n            return a.centroid.z - b.centroid.z;\n        });\n        this.polygons.forEach((p) => this.drawPolygon(p));\n    }\n    renderArrows() {\n        this.arrows.forEach(({ p1, p2, uid }) => {\n            this.drawArrow(p1, p2, uid);\n        });\n    }\n    renderObject3D(object, camera, transformations) {\n        if (object instanceof Geometry) {\n            this.renderGeometry(object, camera, transformations);\n        }\n        else if (object instanceof Arrow) {\n            this.renderArrow(object, camera, transformations);\n        }\n        else if (object instanceof Group) {\n            let group = object;\n            // let sorted = this.sortObjects(group.objects, camera, [\n            //   group.matrix,\n            //   ...transformations,\n            // ]);\n            group.objects.forEach((object) => {\n                this.renderObject3D(object, camera, [group.matrix, ...transformations]);\n            });\n        }\n    }\n    renderGeometry(object, camera, transformations) {\n        // this.sortFaces(object.faces, object, transformations);\n        object.faces.forEach((face) => {\n            let points = [];\n            face.indices\n                .map((index) => object.vertices[index])\n                .forEach((vertex) => {\n                let objectToScreen = [\n                    object.matrix,\n                    ...transformations,\n                    camera.matrix,\n                ];\n                let screenPoint = applyTransformations(vertex, objectToScreen);\n                // Need to flip y to look correct on svg viewbox\n                screenPoint.multiply(1, -1, 1);\n                points.push(screenPoint);\n            });\n            this.addPolygon(points, face, object, transformations);\n        });\n    }\n    renderArrow(object, camera, transformations) {\n        let objectToScreen = [object.matrix, ...transformations, camera.matrix];\n        let p1Screen = applyTransformations(object.p1, objectToScreen);\n        let p2Screen = applyTransformations(object.p2, objectToScreen);\n        this.arrows.push({ p1: p1Screen, p2: p2Screen, uid: object.uid });\n    }\n    addPolygon(points, face, object, transformations) {\n        this.polygons.push({\n            points,\n            face,\n            object,\n            centroid: applyTransformations(face.centroid, [\n                object.matrix,\n                ...transformations,\n            ]),\n        });\n    }\n    sortObjects(objects, camera, transformations) {\n        let sorted = [...objects];\n        sorted.sort((a, b) => {\n            let aToWorld = [a.matrix, ...transformations];\n            let bToWorld = [b.matrix, ...transformations];\n            let aCentroid = applyTransformations(a.centroid, aToWorld);\n            let bCentroid = applyTransformations(b.centroid, bToWorld);\n            // TODO actually use camera, currently only sorting by Z\n            return aCentroid.z - bCentroid.z;\n        });\n        return sorted;\n    }\n}\n","import { BLACK } from \"../puzzles/colors\";\nexport function createSVGElement(width, height, minx, miny, svgWidth, svgHeight) {\n    const svgElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    svgElement.setAttributeNS(null, \"width\", width.toString());\n    svgElement.setAttributeNS(null, \"height\", height.toString());\n    svgElement.setAttributeNS(null, \"viewBox\", `${minx} ${miny} ${svgWidth} ${svgHeight}`);\n    svgElement.setAttributeNS(null, \"id\", \"sr-visualizer\");\n    return svgElement;\n}\nexport function createPolygonElement(points, color, strokeWidth) {\n    const polygon = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\");\n    updatePolygonElement(polygon, points, color, strokeWidth);\n    return polygon;\n}\nexport function createArrowLineElement(start, end, color, strokeWidth) {\n    const line = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n    let strokeColor = color ? color.value : BLACK.value;\n    line.setAttributeNS(null, \"x1\", start.x.toString());\n    line.setAttributeNS(null, \"y1\", (-start.y).toString());\n    line.setAttributeNS(null, \"x2\", end.x.toString());\n    line.setAttributeNS(null, \"y2\", (-end.y).toString());\n    line.setAttributeNS(null, \"stroke\", strokeColor);\n    line.setAttributeNS(null, \"marker-end\", \"url(#arrowhead)\");\n    if (strokeWidth) {\n        line.setAttributeNS(null, \"stroke-width\", strokeWidth);\n    }\n    return line;\n}\nexport function updatePolygonElement(polygon, points, color, strokeWidth) {\n    const pointsAttribute = makePointsAttributeValue(points);\n    const colorValue = color ? color.value : \"black\";\n    const strokeValue = (color && color.stroke) || \"#000000\";\n    polygon.setAttributeNS(null, \"points\", pointsAttribute);\n    polygon.setAttributeNS(null, \"fill\", colorValue);\n    if (strokeWidth) {\n        polygon.setAttributeNS(null, \"stroke\", strokeValue);\n        polygon.setAttributeNS(null, \"stroke-width\", strokeWidth);\n    }\n    polygon.setAttributeNS(null, \"stroke-linejoin\", \"round\");\n}\nexport function clearSVG(svg) {\n    while (svg.hasChildNodes()) {\n        svg.removeChild(svg.lastChild);\n    }\n}\nexport function createMarkers(color) {\n    const defs = document.createElementNS(\"http://www.w3.org/2000/svg\", \"defs\");\n    const arrowHeadMarker = document.createElementNS(\"http://www.w3.org/2000/svg\", \"marker\");\n    arrowHeadMarker.setAttributeNS(null, \"id\", \"arrowhead\");\n    arrowHeadMarker.setAttributeNS(null, \"markerWidth\", \"4\");\n    arrowHeadMarker.setAttributeNS(null, \"markerHeight\", \"3.5\");\n    arrowHeadMarker.setAttributeNS(null, \"refX\", \"3\");\n    arrowHeadMarker.setAttributeNS(null, \"refY\", \"1.75\");\n    arrowHeadMarker.setAttributeNS(null, \"orient\", \"auto\");\n    const arrowHeadPolygon = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\");\n    arrowHeadPolygon.setAttributeNS(null, \"points\", \"0 0, 4 1.75, 0 3.5\");\n    arrowHeadPolygon.setAttributeNS(null, \"fill\", color.value);\n    defs.appendChild(arrowHeadMarker);\n    arrowHeadMarker.appendChild(arrowHeadPolygon);\n    return defs;\n}\nfunction makePointsAttributeValue(points) {\n    return points.reduce((pointString, point) => {\n        return `${pointString ? pointString + \" \" : \"\"}${point.x}, ${point.y}`;\n    }, \"\");\n}\n","import { BLACK } from \"./../puzzles/colors\";\nimport { PolygonRenderer } from \"./polygonRenderer\";\nimport { createSVGElement, createPolygonElement, updatePolygonElement, createArrowLineElement, createMarkers, } from \"../svg/svg\";\n/**\n * Renderer to draw puzzles using html svg elements\n */\nexport class HtmlSvgRenderer extends PolygonRenderer {\n    /**\n     * Creates an SVG renderer. This will create it's own html `<svg>` element. it's\n     * the user's job to add this element to the page.\n     *\n     * @example\n     * ```\n     * const renderer = new HtmlSvgRenderer(width, height, minx, miny, svgWidth, svgHeight)\n     * document.getElementById('my-element').appendChild(renderer.domElement);\n     * ```\n     *\n     * @param width svg element width in pixels\n     * @param height svg element height in pixels\n     * @param minx min x for the svg element viewbox\n     * @param miny min x for the svg element viewbox\n     * @param svgWidth svg viewbox width\n     * @param svgHeight svg viewbox height\n     */\n    constructor(width, height, minx, miny, svgWidth, svgHeight, arrowColor) {\n        super();\n        this.strokeWidth = \"0.035\";\n        this.arrowStrokeWidth = \"0.03\";\n        this.polygons = [];\n        this.lines = [];\n        this.uidToPolygon = {};\n        this.uidToLine = {};\n        this.arrowColor = arrowColor || BLACK;\n        this.domElement = document.createElement(\"div\");\n        this.domElement.className = \"svg-renderer\";\n        this.svgElement = createSVGElement(width, height, minx, miny, svgWidth, svgHeight);\n        const markers = createMarkers(this.arrowColor);\n        this.svgElement.appendChild(markers);\n        this.domElement.appendChild(this.svgElement);\n    }\n    onBeforeRender() { }\n    drawPolygon({ points, face, object }) {\n        if (!this.uidToPolygon[face.uid]) {\n            // Create new polygon for a face that hasn't been rendered\n            this.uidToPolygon[face.uid] = createPolygonElement(points, face.color || object.color, this.strokeWidth);\n        }\n        else {\n            // Just update existing polygon element\n            const polygon = this.uidToPolygon[face.uid];\n            updatePolygonElement(polygon, points, face.color || object.color, this.strokeWidth);\n        }\n        this.svgElement.appendChild(this.uidToPolygon[face.uid]);\n    }\n    drawArrow(p1Screen, p2Screen, uid) {\n        let arrow;\n        if (!this.uidToLine[uid]) {\n            arrow = createArrowLineElement(p1Screen, p2Screen, this.arrowColor, this.arrowStrokeWidth);\n            this.uidToLine[uid] = arrow;\n        }\n        else {\n            arrow = this.uidToLine[uid];\n            arrow.setAttributeNS(null, \"x1\", p1Screen[0].toString());\n            arrow.setAttributeNS(null, \"y1\", (-p1Screen[1]).toString());\n            arrow.setAttributeNS(null, \"x2\", p2Screen[0].toString());\n            arrow.setAttributeNS(null, \"y2\", (-p2Screen[1]).toString());\n        }\n        this.svgElement.appendChild(this.uidToLine[uid]);\n    }\n    onComplete() { }\n}\n","import { BLACK } from \"../puzzles/colors\";\nimport { PolygonRenderer } from \"./polygonRenderer\";\nexport class HtmlCanvasRenderer extends PolygonRenderer {\n    constructor(width, height, lineWidth = 5, arrowColor = BLACK) {\n        super();\n        this.width = width;\n        this.height = height;\n        this.lineWidth = lineWidth;\n        this.arrowColor = arrowColor;\n        this.domElement = document.createElement(\"div\");\n        this.domElement.className = \"canvas-renderer\";\n        this.canvasElement = document.createElement(\"canvas\");\n        this.domElement.appendChild(this.canvasElement);\n        this.canvasElement.width = width;\n        this.canvasElement.height = height;\n        this.ctx = this.canvasElement.getContext(\"2d\");\n    }\n    /**\n     * Visualizer point values will be in range (-.9, .9)\n     * Convert these values to canvas points (0, imgSize)\n     * using linear interpolation\n     *\n     * really the camera matrix should be set up properly\n     * so we don't have to do this...\n     */\n    convertRange(n, range) {\n        return ((n - -0.9) / (0.9 - -0.9)) * range;\n    }\n    onBeforeRender() {\n        this.ctx.clearRect(0, 0, this.width, this.height);\n    }\n    drawPolygon(polygon) {\n        var _a, _b;\n        this.ctx.lineWidth = this.lineWidth;\n        this.ctx.lineJoin = \"round\";\n        this.ctx.fillStyle = ((_b = (_a = polygon === null || polygon === void 0 ? void 0 : polygon.face) === null || _a === void 0 ? void 0 : _a.color) === null || _b === void 0 ? void 0 : _b.value) || \"#000000\";\n        this.ctx.strokeStyle = \"#000000\";\n        this.ctx.moveTo(this.convertRange(polygon.points[0].x, this.width), this.convertRange(polygon.points[0].y, this.height));\n        this.ctx.beginPath();\n        for (let i = 0; i <= polygon.points.length; i++) {\n            let point = polygon.points[(i + 1) % polygon.points.length];\n            this.ctx.lineTo(this.convertRange(point.x, this.width), this.convertRange(point.y, this.height));\n        }\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.stroke();\n    }\n    drawArrow(p1, p2, uid) {\n        const toX = this.convertRange(p2.x, this.width);\n        const toY = this.convertRange(-p2.y, this.height);\n        const fromX = this.convertRange(p1.x, this.width);\n        const fromY = this.convertRange(-p1.y, this.height);\n        const headlen = 20; // length of head in pixels\n        const dx = toX - fromX;\n        const dy = toY - fromY;\n        const angle = Math.atan2(dy, dx);\n        this.ctx.strokeStyle = this.arrowColor.value;\n        this.ctx.beginPath();\n        this.ctx.moveTo(fromX, fromY);\n        this.ctx.lineTo(toX, toY);\n        this.ctx.lineTo(toX - headlen * Math.cos(angle - Math.PI / 6), toY - headlen * Math.sin(angle - Math.PI / 6));\n        this.ctx.moveTo(toX, toY);\n        this.ctx.lineTo(toX - headlen * Math.cos(angle + Math.PI / 6), toY - headlen * Math.sin(angle + Math.PI / 6));\n        this.ctx.stroke();\n    }\n    setLineWidth(lineWidth) {\n        this.lineWidth = lineWidth;\n    }\n    onComplete() { }\n}\n","import { Matrix4 } from \"../math/matrix\";\nexport class Camera {\n    constructor() {\n        this.matrix = Matrix4.perspective(Math.PI / 2, 1, 0.1, 1000);\n        this.matrix.translate(0, 0, -5);\n        this.matrix.scale(4, 4, 1);\n    }\n}\n","export class Scene {\n    constructor() {\n        this.objects = [];\n    }\n    add(geometry) {\n        this.objects.push(geometry);\n    }\n    clear() {\n        this.objects = [];\n    }\n}\n","export var VisualizerType;\n(function (VisualizerType) {\n    VisualizerType[\"CUBE\"] = \"cube\";\n    VisualizerType[\"CUBE_NET\"] = \"cube-net\";\n    VisualizerType[\"CUBE_TOP\"] = \"cube-top\";\n    VisualizerType[\"MEGAMINX\"] = \"megaminx\";\n    VisualizerType[\"MEGAMINX_NET\"] = \"megaminx-net\";\n    VisualizerType[\"MEGAMINX_TOP\"] = \"megaminx-top\";\n    VisualizerType[\"PYRAMINX\"] = \"pyraminx\";\n    VisualizerType[\"PYRAMINX_NET\"] = \"pyraminx-net\";\n    VisualizerType[\"SKEWB\"] = \"skewb\";\n    VisualizerType[\"SKEWB_NET\"] = \"skewb-net\";\n    VisualizerType[\"SQUARE1\"] = \"square1\";\n    VisualizerType[\"SQUARE1_NET\"] = \"square1-net\";\n    VisualizerType[\"CLOCK\"] = \"clock\";\n})(VisualizerType || (VisualizerType = {}));\n","import { VisualizerType } from \"./enum\";\nimport { RED, YELLOW, BLUE, WHITE, ORANGE, GREEN, PINK, LIGHT_YELLOW, GREY, LIGHT_GREEN, PURPLE, DARK_BLUE, } from \"./../puzzles/colors\";\nimport { DEFAULT_SQ1_SCHEME } from \"../puzzles/square1/constants\";\nexport const defaultCubeOptions = {\n    size: 3,\n    scheme: {\n        U: YELLOW,\n        R: RED,\n        F: BLUE,\n        D: WHITE,\n        L: ORANGE,\n        B: GREEN,\n    },\n    rotations: [\n        {\n            x: 0,\n            y: 45,\n            z: 0,\n        },\n        {\n            x: 34,\n            y: 0,\n            z: 0,\n        },\n    ],\n};\nexport const defaultMegaminxOptions = {\n    size: 2,\n    scheme: {\n        U: WHITE,\n        F: RED,\n        R: BLUE,\n        dr: PINK,\n        dl: LIGHT_YELLOW,\n        L: GREEN,\n        d: GREY,\n        br: LIGHT_GREEN,\n        BR: YELLOW,\n        BL: PURPLE,\n        bl: DARK_BLUE,\n        b: ORANGE,\n    },\n};\nexport const defaultPyraminxOptions = {\n    size: 3,\n    scheme: {\n        left: BLUE,\n        right: GREEN,\n        top: YELLOW,\n        back: RED,\n    },\n    rotations: [\n        {\n            x: 0,\n            y: 0,\n            z: 60,\n        },\n        {\n            x: -60,\n            y: 0,\n            z: 0,\n        },\n    ],\n};\nexport const defaultSkewbOptions = {\n    scheme: {\n        top: YELLOW,\n        front: BLUE,\n        right: RED,\n        back: GREEN,\n        left: ORANGE,\n        bottom: WHITE,\n    },\n    rotations: [\n        {\n            x: 0,\n            y: 45,\n            z: 0,\n        },\n        {\n            x: 34,\n            y: 0,\n            z: 0,\n        },\n    ],\n};\nexport const defaultSquare1Options = {\n    scheme: DEFAULT_SQ1_SCHEME,\n    rotations: [\n        {\n            x: 0,\n            y: 0,\n            z: -34,\n        },\n        {\n            x: -56,\n            y: 0,\n            z: 0,\n        },\n    ],\n};\nexport const defaultClockOptions = {};\nexport function getDefaultOptions(type) {\n    switch (type) {\n        case VisualizerType.CUBE:\n            return defaultCubeOptions;\n        case VisualizerType.CUBE_NET:\n            return Object.assign(Object.assign({}, defaultCubeOptions), { rotations: null });\n        case VisualizerType.CUBE_TOP:\n            return Object.assign(Object.assign({}, defaultCubeOptions), { rotations: null });\n        case VisualizerType.MEGAMINX:\n        case VisualizerType.MEGAMINX_NET:\n        case VisualizerType.MEGAMINX_TOP:\n            return defaultMegaminxOptions;\n        case VisualizerType.PYRAMINX:\n            return defaultPyraminxOptions;\n        case VisualizerType.PYRAMINX_NET:\n            return Object.assign(Object.assign({}, defaultPyraminxOptions), { rotations: null });\n        case VisualizerType.SKEWB:\n            return defaultSkewbOptions;\n        case VisualizerType.SKEWB_NET:\n            return Object.assign(Object.assign({}, defaultSkewbOptions), { rotations: null });\n        case VisualizerType.SQUARE1:\n            return defaultSquare1Options;\n        case VisualizerType.SQUARE1_NET:\n            return Object.assign(Object.assign({}, defaultSquare1Options), { rotations: null });\n        case VisualizerType.CLOCK:\n            return Object.assign(Object.assign({}, defaultClockOptions), { rotations: null });\n        default:\n            throw new Error(`Could not get default options for puzzle ${type}`);\n    }\n}\n","import { BLACK } from \"../puzzles/colors\";\nexport function validatePuzzleOptions(options) {\n    if (options.alg && typeof options.alg !== \"string\") {\n        console.warn(`Inavlid alg ${options.alg}. alg must be a string`);\n        options.alg = \"\";\n    }\n    if (options.case && typeof options.case !== \"string\") {\n        console.warn(`Inavlid case ${options.case}. case must be a string`);\n        options.case = \"\";\n    }\n    if (options.scheme) {\n        if (typeof options.scheme !== \"object\" || Array.isArray(options.scheme)) {\n            console.warn(`Invalid scheme ${options.scheme}. scheme must be an object`);\n            options.scheme = {};\n        }\n        else {\n            Object.keys(options.scheme).forEach((face) => {\n                const faceColor = options.scheme[face];\n                if (faceColor == null ||\n                    typeof faceColor !== \"object\" ||\n                    !faceColor.value) {\n                    console.warn(`Invalid scheme color ${faceColor}. must be an type IColor`);\n                    options.scheme[face] = BLACK;\n                }\n            });\n        }\n    }\n    if (options.mask) {\n        if (typeof options.mask !== \"object\" || Array.isArray(options.mask)) {\n            console.warn(`Invalid mask ${options.mask}. scheme must be an object`);\n            options.mask = {};\n        }\n        else {\n            Object.keys(options.mask).forEach((face) => {\n                const maskValues = options.mask[face];\n                if (!Array.isArray(maskValues)) {\n                    console.warn(`Invalid mask ${maskValues}. must be an array`);\n                    options.mask[face] = [];\n                }\n                else {\n                    for (let i = 0; i < maskValues.length; i++) {\n                        if (!Number.isInteger(maskValues[i])) {\n                            console.warn(`Invalid mask value ${maskValues[i]}. must be a number`);\n                            options.mask[face] = [];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    }\n    if (options.stickerColors) {\n        if (typeof options.stickerColors !== \"object\" ||\n            Array.isArray(options.stickerColors)) {\n            console.warn(`Invalid stickerColors ${options.stickerColors}. stickerColors must be an object`);\n            options.stickerColors = {};\n        }\n        else {\n            Object.keys(options.stickerColors).forEach((face) => {\n                const faceColors = options.stickerColors[face];\n                if (!Array.isArray(faceColors)) {\n                    console.warn(`Invalid colors ${faceColors}. must be an array`);\n                    options.stickerColors[face] = [];\n                }\n                else {\n                    for (let i = 0; i < faceColors.length; i++) {\n                        if (!validColor(faceColors[i])) {\n                            options.stickerColors[face] = [];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    }\n    if (options.rotations) {\n        if (!Array.isArray(options.rotations)) {\n            console.warn(`invalid rotations ${options.rotations}, must be an array`);\n            options.rotations = [];\n        }\n        else {\n            for (let i = 0; i < options.rotations.length; i++) {\n                if (!validRotation(options.rotations[i])) {\n                    options.rotations = [];\n                    break;\n                }\n            }\n        }\n    }\n    if (options.scale && !Number.isFinite(options.scale)) {\n        console.warn(`invalid scale ${options.scale}, must be a finite number`);\n        options.scale = 1;\n    }\n    if (options.translation && !validTranslation(options.translation)) {\n        options.translation = { x: 0, y: 0, z: 0 };\n    }\n    if (options.arrows) {\n        if (!Array.isArray(options.arrows)) {\n            console.warn(`invalid arrows, must be an array`);\n            options.arrows = [];\n        }\n        else {\n            for (let i = 0; i < options.arrows.length; i++) {\n                if (!validArrow(options.arrows[i])) {\n                    options.arrows = [];\n                    break;\n                }\n            }\n        }\n    }\n}\nexport function validColor(c) {\n    if (typeof c !== \"object\") {\n        console.warn(`invalid color ${c}, must be type object`);\n        return false;\n    }\n    if (!c.value || typeof c.value !== \"string\") {\n        console.warn(`invalid color value ${c.value}, must be type string`);\n        return false;\n    }\n    if (c.stroke && typeof c.stroke !== \"string\") {\n        console.warn(`invalid color stroke ${c.stroke}, must be type string`);\n        return false;\n    }\n    return true;\n}\nfunction validRotation(r) {\n    if (!r || typeof r !== \"object\") {\n        console.warn(`invalid rotation ${r}, must be an object`);\n        return false;\n    }\n    if (r.x && !Number.isFinite(r.x)) {\n        console.warn(`invalid x rotation ${r.x}, must be a number`);\n        return false;\n    }\n    if (r.y && !Number.isFinite(r.y)) {\n        console.warn(`invalid y rotation ${r.y}, must be a number`);\n        return false;\n    }\n    if (r.z && !Number.isFinite(r.z)) {\n        console.warn(`invalid z rotation ${r.z}, must be a number`);\n        return false;\n    }\n    return true;\n}\nfunction validTranslation(r) {\n    if (typeof r !== \"object\" || Array.isArray(r)) {\n        console.warn(`invalid translation ${r}, must be an object`);\n        return false;\n    }\n    if (r.x && !Number.isFinite(r.x)) {\n        console.warn(`invalid x translation ${r.x}, must be a number`);\n        return false;\n    }\n    if (r.y && !Number.isFinite(r.y)) {\n        console.warn(`invalid y translation ${r.y}, must be a number`);\n        return false;\n    }\n    if (r.z && !Number.isFinite(r.z)) {\n        console.warn(`invalid z translation ${r.z}, must be a number`);\n        return false;\n    }\n    return true;\n}\nfunction validArrow(a) {\n    if (typeof a !== \"object\") {\n        console.warn(`invalid arrow ${a}, must be an object`);\n        return false;\n    }\n    if (typeof a.end !== \"object\" || typeof a.start !== \"object\") {\n        console.warn(`invalid arrow ${a}, must have start and end`);\n        return false;\n    }\n    if (typeof a.start.face !== \"string\" || !Number.isInteger(a.start.sticker)) {\n        console.warn(`invalid arrow start ${a.start}`);\n        return false;\n    }\n    if (typeof a.end.face !== \"string\" || !Number.isInteger(a.end.sticker)) {\n        console.warn(`invalid arrow end ${a.end}`);\n        return false;\n    }\n    return true;\n}\n","import { WHITE, RED, BLUE, GREEN, BLACK, YELLOW, PURPLE } from \"./../colors\";\nimport { DividedPentagon } from \"./../../geometry/dividedPentagon\";\nimport { degreesToRadians, dodecahedronInRadius } from \"../../math/utils\";\nimport { Group } from \"../../geometry/group\";\nconst OPTIMAL_LAYER_WIDTH = {\n    2: 0.3,\n    3: 0.17,\n    4: 0.121,\n};\nfunction getLayerWidth(length, layers) {\n    return OPTIMAL_LAYER_WIDTH[layers] || length / (layers * 1.9);\n}\nexport class MegaminxTop {\n    constructor() {\n        this.createFaces();\n        this.removeHiddenStickers();\n    }\n    createFaces() {\n        const layers = 2;\n        const length = 0.75;\n        const layerWidth = getLayerWidth(length, layers);\n        const megaminxRadius = dodecahedronInRadius(length);\n        this.U = new DividedPentagon(WHITE, layers, length, layerWidth);\n        this.F = new DividedPentagon(RED, layers, length, layerWidth);\n        this.R = new DividedPentagon(BLUE, layers, length, layerWidth);\n        this.L = new DividedPentagon(GREEN, layers, length, layerWidth);\n        this.BR = new DividedPentagon(YELLOW, layers, length, layerWidth);\n        this.BL = new DividedPentagon(PURPLE, layers, length, layerWidth);\n        this.F.translate(0, 0, megaminxRadius);\n        this.U.rotate(Math.PI, 0, 0, 1);\n        this.U.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.U.translate(0, 0, megaminxRadius);\n        this.L.rotate((72 * Math.PI) / 180, 0, 0, 1);\n        this.L.rotate(Math.PI, 0, 0, 1);\n        this.L.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.L.translate(0, 0, megaminxRadius);\n        this.R.rotate((72 * Math.PI) / 180, 0, 0, 1);\n        this.R.rotate(Math.PI / 5, 0, 0, 1);\n        this.R.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.R.translate(0, 0, megaminxRadius);\n        this.BL.rotate(Math.PI / 5, 0, 0, 1);\n        this.BL.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.BL.translate(0, 0, megaminxRadius);\n        this.BR.rotate(-Math.PI / 5, 0, 0, 1);\n        this.BR.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.BR.translate(0, 0, megaminxRadius);\n        this.faces = {\n            U: this.U,\n            F: this.F,\n            R: this.R,\n            dr: this.BR,\n            dl: this.BL,\n            L: this.L,\n        };\n        this.group = new Group([this.U, this.F, this.R, this.BR, this.BL, this.L]);\n        this.group.rotate(degreesToRadians(63), 1, 0, 0);\n    }\n    setColors(colors) {\n        let { U, R, F, L, BR, BL } = colors;\n        this.createFaces();\n        // If length is larger than we expect for\n        // a side of the puzzle, assume we're receiving\n        // colors for the entire face of the puzzle. and\n        // just take out the the colors for visible stickers\n        // if (R.length > 3) {\n        //   R = R.slice(2, 5);\n        //   F = F.slice(2, 5);\n        //   L = L.slice(2, 5);\n        //   BR = BR.slice(2, 5);\n        //   BL = BL.slice(2, 5);\n        // }\n        // this.U.faces[1].color = BLACK;\n        // this.R.faces[1].color = BLACK;\n        // this.F.faces[1].color = BLACK;\n        // this.L.faces[1].color = BLACK;\n        // this.BR.faces[1].color = BLACK;\n        // this.BL.faces[1].color = BLACK;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.BR, BR);\n        this.setFaceColors(this.BL, BL);\n        this.removeHiddenStickers();\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n            else {\n                f.color = BLACK;\n            }\n        });\n    }\n    /**\n     * hide stickers that aren't in the top layer\n     * so only the top of the megaminx is shown\n     */\n    removeHiddenStickers() {\n        this.F.faces = this.F.faces.slice(2, 5);\n        this.BL.faces = this.BL.faces.slice(8, 11);\n        this.L.faces = this.L.faces.slice(4, 7);\n        this.R.faces = [this.R.faces[1], this.R.faces[2], this.R.faces[10]];\n        this.BR.faces = this.BR.faces.slice(6, 9);\n    }\n}\n","const clockTurnRegex = /([URDLAy]+)([0-9]+)([\\+|\\-]?)/g;\nexport var ClockMoveType;\n(function (ClockMoveType) {\n    ClockMoveType[ClockMoveType[\"DIAL\"] = 0] = \"DIAL\";\n    ClockMoveType[ClockMoveType[\"ROTATE\"] = 1] = \"ROTATE\";\n})(ClockMoveType || (ClockMoveType = {}));\nexport var ClockCorner;\n(function (ClockCorner) {\n    ClockCorner[ClockCorner[\"ALL\"] = 0] = \"ALL\";\n    ClockCorner[ClockCorner[\"UL\"] = 1] = \"UL\";\n    ClockCorner[ClockCorner[\"UR\"] = 2] = \"UR\";\n    ClockCorner[ClockCorner[\"DL\"] = 3] = \"DL\";\n    ClockCorner[ClockCorner[\"DR\"] = 4] = \"DR\";\n    ClockCorner[ClockCorner[\"U\"] = 5] = \"U\";\n    ClockCorner[ClockCorner[\"R\"] = 6] = \"R\";\n    ClockCorner[ClockCorner[\"D\"] = 7] = \"D\";\n    ClockCorner[ClockCorner[\"L\"] = 8] = \"L\";\n})(ClockCorner || (ClockCorner = {}));\nexport function parseClockAlgorithm(algorithm) {\n    let moves = [];\n    let match;\n    while ((match = clockTurnRegex.exec(algorithm))) {\n        let rawCorner = match[1];\n        let rawValue = match[2];\n        let rawDirection = match[3];\n        moves.push(parseMove(rawCorner, rawValue, rawDirection));\n    }\n    return moves;\n}\nfunction parseMove(rawCorner, rawValue, rawDirection) {\n    let direction = parseDirection(rawDirection);\n    return {\n        type: parseType(rawCorner),\n        corner: parseCorner(rawCorner),\n        value: parseValue(rawValue, direction),\n        clockwise: direction,\n    };\n}\nfunction parseType(corner) {\n    switch (corner) {\n        case \"y\":\n            return ClockMoveType.ROTATE;\n        case \"ALL\":\n        case \"UL\":\n        case \"DL\":\n        case \"UR\":\n        case \"DR\":\n        case \"U\":\n        case \"R\":\n        case \"D\":\n        case \"L\":\n            return ClockMoveType.DIAL;\n        default:\n            throw new Error(`Invalid clock move (${corner})`);\n    }\n}\nfunction parseCorner(corner) {\n    switch (corner) {\n        case \"y\":\n            return null;\n        case \"UL\":\n            return ClockCorner.UL;\n        case \"DL\":\n            return ClockCorner.DL;\n        case \"UR\":\n            return ClockCorner.UR;\n        case \"DR\":\n            return ClockCorner.DR;\n        case \"U\":\n            return ClockCorner.U;\n        case \"R\":\n            return ClockCorner.R;\n        case \"D\":\n            return ClockCorner.D;\n        case \"L\":\n            return ClockCorner.L;\n        case \"ALL\":\n            return ClockCorner.ALL;\n        default:\n            throw new Error(`Invalid clock move (${corner})`);\n    }\n}\nfunction parseValue(value, clockwise) {\n    if (clockwise) {\n        return parseInt(value);\n    }\n    else {\n        return -1 * parseInt(value);\n    }\n}\nfunction parseDirection(direction) {\n    switch (direction) {\n        case \"-\":\n            return false;\n        case \"+\":\n            return true;\n    }\n}\n","import { ClockCorner, ClockMoveType, parseClockAlgorithm, } from \"../../algorithms/clock\";\nimport { Simulator } from \"../simulator\";\nvar PegState;\n(function (PegState) {\n    PegState[PegState[\"Top\"] = 0] = \"Top\";\n    PegState[PegState[\"Bottom\"] = 1] = \"Bottom\";\n})(PegState || (PegState = {}));\n// map of how the dials will turn based on the peg configuration\nconst dialConfigs = {\n    UR: {\n        \"0000\": [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        \"0001\": [1, 2, 3, 4, 5, 6, 7, 8],\n        \"0010\": [2],\n        \"0011\": [0, 2],\n        \"0100\": [0, 1, 2, 3, 4, 5, 7, 8],\n        \"0101\": [1, 2, 4, 5, 7, 8],\n        \"0110\": [2, 6],\n        \"0111\": [0, 2, 6],\n        \"1000\": [0, 1, 2, 3, 4, 5, 6, 7],\n        \"1001\": [1, 2, 3, 4, 5, 6, 7],\n        \"1010\": [2, 8],\n        \"1011\": [0, 2, 8],\n        \"1100\": [0, 1, 2, 3, 4, 5],\n        \"1101\": [1, 2, 4, 5],\n        \"1110\": [2, 6, 8],\n        \"1111\": [0, 2, 6, 8],\n    },\n    UL: {\n        \"0000\": [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        \"0001\": [0],\n        \"0010\": [0, 1, 3, 4, 5, 6, 7, 8],\n        \"0011\": [0, 2],\n        \"0100\": [0, 1, 2, 3, 4, 5, 7, 8],\n        \"0101\": [0, 6],\n        \"0110\": [0, 1, 3, 4, 7, 8],\n        \"0111\": [0, 2, 6],\n        \"1000\": [0, 1, 2, 3, 4, 5, 6, 7],\n        \"1001\": [0, 8],\n        \"1010\": [0, 1, 3, 4, 6, 7],\n        \"1011\": [0, 2, 8],\n        \"1100\": [0, 1, 2, 3, 4, 5],\n        \"1101\": [0, 6, 8],\n        \"1110\": [0, 1, 3, 4],\n        \"1111\": [0, 2, 6, 8],\n    },\n    DR: {\n        \"0000\": [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        \"0001\": [1, 2, 3, 4, 5, 6, 7, 8],\n        \"0010\": [0, 1, 3, 4, 5, 6, 7, 8],\n        \"0011\": [3, 4, 5, 6, 7, 8],\n        \"0100\": [0, 1, 2, 3, 4, 5, 7, 8],\n        \"0101\": [1, 2, 4, 5, 7, 8],\n        \"0110\": [0, 1, 3, 4, 7, 8],\n        \"0111\": [4, 5, 7, 8],\n        \"1000\": [8],\n        \"1001\": [0, 8],\n        \"1010\": [2, 8],\n        \"1011\": [0, 2, 8],\n        \"1100\": [6, 8],\n        \"1101\": [0, 6, 8],\n        \"1110\": [2, 6, 8],\n        \"1111\": [0, 2, 6, 8],\n    },\n    DL: {\n        \"0000\": [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        \"0001\": [1, 2, 3, 4, 5, 6, 7, 8],\n        \"0010\": [0, 1, 3, 4, 5, 6, 7, 8],\n        \"0011\": [3, 4, 5, 6, 7, 8],\n        \"0100\": [6],\n        \"0101\": [0, 6],\n        \"0110\": [2, 6],\n        \"0111\": [0, 2, 6],\n        \"1000\": [0, 1, 2, 3, 4, 5, 6, 7],\n        \"1001\": [1, 2, 3, 4, 5, 6, 7],\n        \"1010\": [0, 1, 3, 4, 6, 7],\n        \"1011\": [3, 4, 6, 7],\n        \"1100\": [6, 8],\n        \"1101\": [0, 6, 8],\n        \"1110\": [2, 6, 8],\n        \"1111\": [0, 2, 6, 8],\n    },\n};\nexport class ClockSimulator extends Simulator {\n    constructor() {\n        super();\n        // Values from 0 - 11\n        this.top = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n        this.bottom = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n        // pegs order is UL, UR, DL, DR\n        this.pegs = [PegState.Top, PegState.Top, PegState.Top, PegState.Top];\n        this.flipped = false;\n    }\n    rotateDials(top, bottom, turns) {\n        top.forEach((i) => {\n            this.top[i] = (12 + (this.top[i] + turns)) % 12;\n        });\n        bottom.forEach((i) => {\n            this.bottom[i] = (12 + (this.bottom[i] - turns)) % 12;\n        });\n    }\n    stringifyPegs(pegs) {\n        return pegs\n            .map((p) => (p == PegState.Top ? \"0\" : \"1\"))\n            .reverse()\n            .join(\"\");\n    }\n    /**\n     * returns peg state for the back side of the clock.\n     * This is used when performing y2 or to know the state\n     * when rotating the back dials\n     */\n    invertPegState() {\n        let oppositePegState = (state) => {\n            switch (state) {\n                case PegState.Top:\n                    return PegState.Bottom;\n                case PegState.Bottom:\n                    return PegState.Top;\n            }\n        };\n        return [this.pegs[1], this.pegs[0], this.pegs[3], this.pegs[2]].map((ps) => oppositePegState(ps));\n    }\n    /**\n     * Returns the dial on the bottom. For example top UR is the same as Bottom UL\n     */\n    invertTurnDial(dial) {\n        return {\n            UL: \"UR\",\n            UR: \"UL\",\n            DL: \"DR\",\n            DR: \"DL\",\n        }[dial];\n    }\n    // /**\n    //  * clock dials are stored in array of 9 values. Given an index for\n    //  * a dial on the top face this will return an index for the dial that is\n    //  * underneath.\n    //  */\n    // private invertClockDial(clockDial: number) {\n    //   return [2,1,0, 5,4,3, 8,7,6][clockDial];\n    // }\n    turn(dial, value) {\n        // Top\n        const pegState = this.stringifyPegs(this.pegs);\n        const dialsToTurn = dialConfigs[dial][pegState];\n        // Bottom\n        const bottomPegState = this.invertPegState();\n        const bottomDial = this.invertTurnDial(dial);\n        const bottomClocksToTurn = dialConfigs[bottomDial][this.stringifyPegs(bottomPegState)];\n        console.log(\"bottom turn\", bottomPegState, this.stringifyPegs(bottomPegState), bottomDial, bottomClocksToTurn);\n        this.rotateDials(dialsToTurn, bottomClocksToTurn, value);\n    }\n    /**\n     * Sets all four pegs of the clock\n     *\n     * @param ul true if ur peg should be \"UP\"\n     * @param ur ...\n     * @param dl ...\n     * @param dr ...\n     */\n    setPegs(ul, ur, dl, dr) {\n        this.pegs = [ul, ur, dl, dr].map((shouldBeUp) => {\n            if (shouldBeUp) {\n                return PegState.Top;\n            }\n            else {\n                return PegState.Bottom;\n            }\n        });\n    }\n    togglePeg(peg) {\n        if (this.pegs[peg] == PegState.Top) {\n            this.pegs[peg] = PegState.Bottom;\n        }\n        else {\n            this.pegs[peg] = PegState.Top;\n        }\n    }\n    UR(turns) {\n        this.turn(\"UR\", turns);\n    }\n    DR(turns) {\n        this.turn(\"DR\", turns);\n    }\n    UL(turns) {\n        this.turn(\"UL\", turns);\n    }\n    DL(turns) {\n        this.turn(\"DL\", turns);\n    }\n    y2() {\n        this.flipped = !this.flipped;\n        let temp = this.top;\n        this.top = this.bottom;\n        this.bottom = temp;\n        this.pegs = this.invertPegState();\n    }\n    alg(alg) {\n        parseClockAlgorithm(alg).forEach((move) => {\n            console.log(\"doing clock move\", move);\n            if (move.type == ClockMoveType.ROTATE) {\n                this.y2();\n            }\n            else {\n                // set pegs\n                switch (move.corner) {\n                    case ClockCorner.ALL:\n                        this.setPegs(true, true, true, true);\n                        break;\n                    case ClockCorner.UR:\n                        this.setPegs(false, true, false, false);\n                        break;\n                    case ClockCorner.DR:\n                        this.setPegs(false, false, false, true);\n                        break;\n                    case ClockCorner.DL:\n                        this.setPegs(false, false, true, false);\n                        break;\n                    case ClockCorner.UL:\n                        this.setPegs(true, false, false, false);\n                        break;\n                    case ClockCorner.U:\n                        this.setPegs(true, true, false, false);\n                        break;\n                    case ClockCorner.D:\n                        this.setPegs(false, false, true, true);\n                        break;\n                    case ClockCorner.R:\n                        this.setPegs(false, true, false, true);\n                        break;\n                    case ClockCorner.L:\n                        this.setPegs(true, false, true, false);\n                        break;\n                }\n                // rotate correct number of values\n                switch (move.corner) {\n                    case ClockCorner.ALL:\n                    case ClockCorner.UR:\n                    case ClockCorner.U:\n                    case ClockCorner.R:\n                        this.UR(move.value);\n                        break;\n                    case ClockCorner.DR:\n                    case ClockCorner.D:\n                        this.DR(move.value);\n                        break;\n                    case ClockCorner.DL:\n                    case ClockCorner.L:\n                        this.DL(move.value);\n                        break;\n                    case ClockCorner.UL:\n                        this.UL(move.value);\n                        break;\n                }\n            }\n        });\n    }\n}\n","import { polarToCartesian } from \"../math/utils\";\nimport { Vector3 } from \"../math/vector\";\nimport { Face } from \"./face\";\nimport { Geometry } from \"./geometry\";\nexport class Circle extends Geometry {\n    constructor(radius, subdivisions, color) {\n        let vertices = [];\n        let faceIndices = [];\n        for (let i = 0; i < subdivisions; i++) {\n            vertices.push(Vector3.fromVec2(polarToCartesian(radius, 0 + Math.PI * i * (2 / subdivisions))));\n            faceIndices.push(i);\n        }\n        let face = new Face(faceIndices, vertices, color);\n        super(vertices, [face]);\n    }\n}\n","// Vertices that make up the background of the rubik's clock polygon\nexport const CLOCK_BACKGROUND_VERTICES = [\n    [1, 0],\n    [0.9951847266721969, 0.0980171403295606],\n    [0.9807852804032304, 0.19509032201612825],\n    [0.9569403357322088, 0.29028467725446233],\n    [0.9238795325112867, 0.3826834323650898],\n    [0.881921264348355, 0.47139673682599764],\n    [0.8883056667657168, 0.5159352217759492],\n    [0.9045238049149207, 0.5693992582254033],\n    [0.91, 0.625],\n    [0.9045238049149207, 0.6806007417745965],\n    [0.8883056667657168, 0.7340647782240506],\n    [0.8619688395062254, 0.7833375164105867],\n    [0.8265254326381661, 0.826525432638166],\n    [0.7833375164105867, 0.8619688395062254],\n    [0.7340647782240506, 0.8883056667657168],\n    [0.6806007417745966, 0.9045238049149207],\n    [0.625, 0.91],\n    [0.5693992582254035, 0.9045238049149207],\n    [0.5159352217759494, 0.8883056667657168],\n    [0.4713967368259978, 0.8819212643483549],\n    [0.38268343236508984, 0.9238795325112867],\n    [0.29028467725446233, 0.9569403357322089],\n    [0.19509032201612833, 0.9807852804032304],\n    [0.09801714032956077, 0.9951847266721968],\n    [0, 1],\n    [-0.09801714032956065, 0.9951847266721969],\n    [-0.1950903220161282, 0.9807852804032304],\n    [-0.29028467725446216, 0.9569403357322089],\n    [-0.3826834323650897, 0.9238795325112867],\n    [-0.4713967368259977, 0.881921264348355],\n    [-0.5159352217759494, 0.8883056667657168],\n    [-0.5693992582254034, 0.9045238049149207],\n    [-0.625, 0.91],\n    [-0.6806007417745965, 0.9045238049149207],\n    [-0.7340647782240506, 0.8883056667657168],\n    [-0.7833375164105866, 0.8619688395062255],\n    [-0.826525432638166, 0.8265254326381661],\n    [-0.8619688395062255, 0.7833375164105867],\n    [-0.8883056667657168, 0.7340647782240506],\n    [-0.9045238049149207, 0.6806007417745966],\n    [-0.91, 0.625],\n    [-0.9045238049149207, 0.5693992582254034],\n    [-0.8883056667657168, 0.5159352217759494],\n    [-0.8819212643483549, 0.47139673682599786],\n    [-0.9238795325112867, 0.3826834323650899],\n    [-0.9569403357322088, 0.2902846772544624],\n    [-0.9807852804032304, 0.1950903220161286],\n    [-0.9951847266721968, 0.09801714032956083],\n    [-1, 0],\n    [-0.9951847266721969, -0.09801714032956059],\n    [-0.9807852804032304, -0.19509032201612836],\n    [-0.9569403357322089, -0.2902846772544621],\n    [-0.9238795325112868, -0.38268343236508967],\n    [-0.881921264348355, -0.47139673682599764],\n    [-0.8883056667657168, -0.5159352217759494],\n    [-0.9045238049149207, -0.5693992582254034],\n    [-0.91, -0.625],\n    [-0.9045238049149207, -0.6806007417745966],\n    [-0.8883056667657168, -0.7340647782240506],\n    [-0.8619688395062255, -0.7833375164105866],\n    [-0.8265254326381661, -0.826525432638166],\n    [-0.7833375164105867, -0.8619688395062254],\n    [-0.7340647782240508, -0.8883056667657168],\n    [-0.6806007417745967, -0.9045238049149207],\n    [-0.625, -0.91],\n    [-0.5693992582254034, -0.9045238049149207],\n    [-0.5159352217759493, -0.8883056667657168],\n    [-0.4713967368259979, -0.8819212643483549],\n    [-0.38268343236509034, -0.9238795325112865],\n    [-0.29028467725446244, -0.9569403357322088],\n    [-0.19509032201612866, -0.9807852804032303],\n    [-0.09801714032956045, -0.9951847266721969],\n    [0, -1],\n    [0.09801714032956009, -0.9951847266721969],\n    [0.1950903220161283, -0.9807852804032304],\n    [0.29028467725446205, -0.9569403357322089],\n    [0.38268343236509, -0.9238795325112866],\n    [0.4713967368259976, -0.881921264348355],\n    [0.5159352217759492, -0.8883056667657168],\n    [0.5693992582254033, -0.9045238049149207],\n    [0.625, -0.91],\n    [0.6806007417745966, -0.9045238049149207],\n    [0.7340647782240507, -0.8883056667657168],\n    [0.7833375164105866, -0.8619688395062255],\n    [0.826525432638166, -0.8265254326381661],\n    [0.8619688395062254, -0.7833375164105867],\n    [0.8883056667657168, -0.7340647782240508],\n    [0.9045238049149207, -0.6806007417745967],\n    [0.91, -0.625],\n    [0.9045238049149207, -0.5693992582254035],\n    [0.8883056667657168, -0.5159352217759494],\n    [0.8819212643483548, -0.4713967368259979],\n    [0.9238795325112865, -0.3826834323650904],\n    [0.9569403357322088, -0.2902846772544625],\n    [0.9807852804032303, -0.19509032201612872],\n    [0.9951847266721969, -0.0980171403295605],\n];\n","import { Circle } from \"../../geometry/circle\";\nimport { Face } from \"../../geometry/face\";\nimport { Geometry } from \"../../geometry/geometry\";\nimport { Group } from \"../../geometry/group\";\nimport { polarToCartesian } from \"../../math/utils\";\nimport { Vector3 } from \"../../math/vector\";\nimport { YELLOW } from \"../colors\";\nimport { CLOCK_BACKGROUND_VERTICES } from \"./data\";\nconst GRID_GAP = 0.625;\nconst FACE_RADIUS = 0.195;\nconst FACE_SUBDIVISIONS = 24;\nconst PEG_RADIUS = FACE_RADIUS / 2;\nconst DIAL_SUBDIVISIONS = 8;\nconst DIAL_LENGTH = 0.16;\nconst DIAL_RADIUS = 0.055;\nconst FRONT_COLOR = { value: \"#114fd4\" };\nconst BACK_COLOR = { value: \"#a1bfff\" };\nexport class Clock {\n    constructor(top, bottom, pegs, flipped) {\n        this.front = new Group();\n        this.back = new Group();\n        let frontColor = FRONT_COLOR;\n        let backColor = BACK_COLOR;\n        if (flipped) {\n            frontColor = BACK_COLOR;\n            backColor = FRONT_COLOR;\n        }\n        this.front.addObject(clockBackground(frontColor));\n        this.back.addObject(clockBackground(backColor));\n        let frontFaces = clockFaces(backColor);\n        let backFaces = clockFaces(frontColor);\n        this.front.addObject(frontFaces);\n        this.back.addObject(backFaces);\n        let frontPegs = clockPegs();\n        let backPegs = clockPegs();\n        frontPegs.forEach((p) => this.front.addObject(p));\n        backPegs.forEach((p) => this.back.addObject(p));\n        this.frontDials = clockDials(top);\n        this.backDials = clockDials(bottom);\n        this.frontDials.forEach((d) => this.front.addObject(d));\n        this.backDials.forEach((d) => this.back.addObject(d));\n        this.front.translate(-1.1, 0, 0);\n        this.back.translate(1.1, 0, 0);\n        this.group = new Group([this.front, this.back]);\n        this.group.scale(0.5, 0.5, 0.5);\n    }\n    /**\n     * Not implemented. Just here for {@link Visualizer}'s sake\n     */\n    setColors(colors) { }\n}\nfunction clockBackground(color) {\n    let vertices = [];\n    let faceIndices = [];\n    CLOCK_BACKGROUND_VERTICES.forEach((v, i) => {\n        vertices.push(Vector3.fromValues(v[0], v[1], 0));\n        faceIndices.push(i);\n    });\n    return new Geometry(vertices, [new Face(faceIndices, vertices, color)]);\n}\nfunction clockFaces(color) {\n    let faces = new Group();\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            const face = new Circle(FACE_RADIUS, FACE_SUBDIVISIONS, color);\n            const hours = clockHours();\n            let x = -GRID_GAP + j * GRID_GAP;\n            let y = -GRID_GAP + i * GRID_GAP;\n            face.translate(x, y, 0.01);\n            hours.translate(x, y, 0.01);\n            faces.addObject(face);\n            faces.addObject(hours);\n        }\n    }\n    return faces;\n}\nfunction clockPegs() {\n    let pegs = [];\n    for (let i = 0; i < 2; i++) {\n        for (let j = 0; j < 2; j++) {\n            const peg = new Circle(PEG_RADIUS, FACE_SUBDIVISIONS, YELLOW);\n            let x = j == 0 ? -0.325 : 0.325;\n            let y = i == 0 ? -0.325 : 0.325;\n            peg.translate(x, y, 0.01);\n            pegs.push(peg);\n        }\n    }\n    return pegs;\n}\nfunction clockHours() {\n    let circles = new Group();\n    for (let i = 0; i < 12; i++) {\n        let circle = new Circle(0.01, 4, { value: \"#FFF\", stroke: \"#FFF\" });\n        let position = polarToCartesian(FACE_RADIUS + 0.04, 0 + Math.PI * i * (2 / 12));\n        circle.translate(position.x, position.y, 0.02);\n        circles.addObject(circle);\n    }\n    return circles;\n}\nfunction clockDials(values) {\n    let dials = [];\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            const dialValue = values && values[i * 3 + j];\n            const d = dial();\n            let x = -GRID_GAP + j * GRID_GAP;\n            let y = -(-GRID_GAP + i * GRID_GAP);\n            d.translate(x, y, 0.02);\n            if (dialValue > 0) {\n                d.rotate(-(Math.PI / 6) * dialValue, 0, 0, 1);\n            }\n            dials.push(d);\n        }\n    }\n    return dials;\n}\nfunction dial() {\n    let vertices = [];\n    let faceIndices = [];\n    for (let i = 0; i <= DIAL_SUBDIVISIONS; i++) {\n        vertices.push(Vector3.fromVec2(polarToCartesian(DIAL_RADIUS, Math.PI + (Math.PI / DIAL_SUBDIVISIONS) * i)));\n        faceIndices.push(i);\n    }\n    vertices.push(Vector3.fromValues(0, DIAL_LENGTH, 0));\n    faceIndices.push(vertices.length - 1);\n    const dialGeometry = new Geometry(vertices, [\n        new Face(faceIndices, vertices, YELLOW),\n    ]);\n    dialGeometry.translate(0, 0, 0.02);\n    return dialGeometry;\n}\n","import { MegaminxTop } from \"./../puzzles/megaminx/megaminxTop\";\nimport { RubiksCubeTopLayer } from \"./../puzzles/rubiksCube/rubiksCubeTop\";\nimport { Square1Net } from \"./../puzzles/square1/square1Net\";\nimport { Square1Simualtor } from \"./../simulator/square1/square1Simulator\";\nimport { Square1 } from \"./../puzzles/square1/square1\";\nimport { SkewbNet } from \"./../puzzles/skewb/skewbNet\";\nimport { SkewbSimulator } from \"./../simulator/skewb/skewbSimulator\";\nimport { Skewb } from \"../puzzles/skewb/skewb\";\nimport { PyraminxSimulator } from \"./../simulator/pyraminx/pyraminxSimulator\";\nimport { PyraminxNet } from \"../puzzles/pyraminx/pyraminxNet\";\nimport { MegaminxNet } from \"./../puzzles/megaminx/megaminxNet\";\nimport { Megaminx } from \"../puzzles/megaminx/megaminx\";\nimport { MegaminxSimulator } from \"./../simulator/megaminx/megaminxSimulator\";\nimport { RubiksCubeNet } from \"./../puzzles/rubiksCube/rubiksCubeNet\";\nimport { RubiksCube } from \"../puzzles/rubiksCube/rubiksCube\";\nimport { RubiksCubeSimulator } from \"../simulator/rubiksCube/rubiksCubeSimulator\";\nimport { Pyraminx } from \"../puzzles/pyraminx/pyraminx\";\nimport { VisualizerType } from \"./enum\";\nimport { ClockSimulator } from \"../simulator/clock/clockSimulator\";\nimport { Clock } from \"../puzzles/clock/clock\";\n/**\n * Since puzzle geometry doesn't change for any instance of \"Visuzlier\"\n * we can cache the geometry generated to avoid generating it on each time\n * we render a puzzle\n */\nconst geometryCache = {\n    [VisualizerType.CUBE]: {},\n    [VisualizerType.CUBE_NET]: {},\n    [VisualizerType.CUBE_TOP]: {},\n    [VisualizerType.MEGAMINX]: {},\n    [VisualizerType.MEGAMINX_NET]: {},\n    [VisualizerType.MEGAMINX_TOP]: {},\n    [VisualizerType.PYRAMINX]: {},\n    [VisualizerType.PYRAMINX_NET]: {},\n    [VisualizerType.SKEWB]: {},\n    [VisualizerType.SKEWB_NET]: {},\n    [VisualizerType.SQUARE1]: {},\n    [VisualizerType.SQUARE1_NET]: {},\n};\n/**\n * Creates puzzle geometry for a given puzzle type.\n * Will initialize the geometry on puzzle options\n * passed in\n *\n * @param type Type of the puzzle {@link VisualizerType} (cube, skewb, etc...)\n * @param options  Puzzle options {@link PuzzleOptions}\n */\nexport function getPuzzleGeometry(type, options) {\n    switch (type) {\n        case VisualizerType.CUBE:\n            return createCube(options);\n        case VisualizerType.CUBE_NET:\n            return createCubeNet(options);\n        case VisualizerType.CUBE_TOP:\n            return createCubeTop(options);\n        case VisualizerType.MEGAMINX:\n            return createMegaminx(options);\n        case VisualizerType.MEGAMINX_NET:\n            return createMegaminxNet(options);\n        case VisualizerType.MEGAMINX_TOP:\n            return createMegaminxTop(options);\n        case VisualizerType.PYRAMINX:\n            return createPyraminx(options);\n        case VisualizerType.PYRAMINX_NET:\n            return createPyraminxNet(options);\n        case VisualizerType.SKEWB:\n            return createSkewb(options);\n        case VisualizerType.SKEWB_NET:\n            return createSkewbNet(options);\n        case VisualizerType.SQUARE1:\n            return createSquare1(options);\n        case VisualizerType.SQUARE1_NET:\n            return createSquare1Net(options);\n        case VisualizerType.CLOCK:\n            return createClock(options);\n    }\n}\n/**\n * Returns a puzzle simulator for the type of puzzle\n *\n * @param type\n * @param options\n */\nexport function getPuzzleSimulator(type, options) {\n    switch (type) {\n        case VisualizerType.CUBE:\n        case VisualizerType.CUBE_NET:\n        case VisualizerType.CUBE_TOP:\n            return new RubiksCubeSimulator(options.size);\n        case VisualizerType.MEGAMINX:\n        case VisualizerType.MEGAMINX_NET:\n        case VisualizerType.MEGAMINX_TOP:\n            return new MegaminxSimulator();\n        case VisualizerType.PYRAMINX:\n        case VisualizerType.PYRAMINX_NET:\n            return new PyraminxSimulator();\n        case VisualizerType.SKEWB:\n        case VisualizerType.SKEWB_NET:\n            return new SkewbSimulator();\n        case VisualizerType.SQUARE1:\n        case VisualizerType.SQUARE1_NET:\n            return initSquare1Simulator(options);\n        case VisualizerType.CLOCK:\n            return initClockSimulator(options);\n    }\n}\nexport function createCube(options = {}) {\n    if (!geometryCache[VisualizerType.CUBE][options.size]) {\n        geometryCache[VisualizerType.CUBE][options.size] = new RubiksCube(options.size);\n    }\n    return geometryCache[VisualizerType.CUBE][options.size];\n}\nexport function createCubeNet(options = {}) {\n    if (!geometryCache[VisualizerType.CUBE_NET][options.size]) {\n        geometryCache[VisualizerType.CUBE_NET][options.size] = new RubiksCubeNet(options.size);\n    }\n    return geometryCache[VisualizerType.CUBE_NET][options.size];\n}\nexport function createCubeTop(options = {}) {\n    if (!geometryCache[VisualizerType.CUBE_TOP][options.size]) {\n        geometryCache[VisualizerType.CUBE_TOP][options.size] =\n            new RubiksCubeTopLayer(options.size);\n    }\n    return geometryCache[VisualizerType.CUBE_TOP][options.size];\n}\nexport function createMegaminx(options = {}) {\n    if (!geometryCache[VisualizerType.MEGAMINX][options.size]) {\n        geometryCache[VisualizerType.MEGAMINX][options.size] = new Megaminx(options.size);\n    }\n    return geometryCache[VisualizerType.MEGAMINX][options.size];\n}\nexport function createMegaminxNet(options = {}) {\n    if (!geometryCache[VisualizerType.MEGAMINX_NET][options.size]) {\n        geometryCache[VisualizerType.MEGAMINX_NET][options.size] = new MegaminxNet(options.size);\n    }\n    return geometryCache[VisualizerType.MEGAMINX_NET][options.size];\n}\nexport function createMegaminxTop(options = {}) {\n    if (!geometryCache[VisualizerType.MEGAMINX_TOP][2]) {\n        // megaminx top size not supported, so just cache by size 2\n        geometryCache[VisualizerType.MEGAMINX_TOP][2] = new MegaminxTop();\n    }\n    return geometryCache[VisualizerType.MEGAMINX_TOP][2];\n}\nexport function createPyraminx(options = {}) {\n    if (!geometryCache[VisualizerType.PYRAMINX][options.size]) {\n        geometryCache[VisualizerType.PYRAMINX][options.size] = new Pyraminx(options.size);\n    }\n    return geometryCache[VisualizerType.PYRAMINX][options.size];\n}\nexport function createPyraminxNet(options = {}) {\n    if (!geometryCache[VisualizerType.PYRAMINX_NET][options.size]) {\n        geometryCache[VisualizerType.PYRAMINX_NET][options.size] = new PyraminxNet(options.size);\n    }\n    return geometryCache[VisualizerType.PYRAMINX_NET][options.size];\n}\nexport function createSkewb(options = {}) {\n    if (!geometryCache[VisualizerType.SKEWB][1]) {\n        // Skewb size not supported, so just cache by size 1\n        geometryCache[VisualizerType.SKEWB][1] = new Skewb();\n    }\n    return geometryCache[VisualizerType.SKEWB][1];\n}\nexport function createSkewbNet(options = {}) {\n    if (!geometryCache[VisualizerType.SKEWB_NET][1]) {\n        // Skewb size not supported, so just cache by size 1\n        geometryCache[VisualizerType.SKEWB_NET][1] = new SkewbNet();\n    }\n    return geometryCache[VisualizerType.SKEWB_NET][1];\n}\nexport function createSquare1(options = {}) {\n    const simulator = initSquare1Simulator(options);\n    const geometry = new Square1(simulator.topLayer, simulator.bottomLayer, simulator.middleRotated, options.scheme);\n    return geometry;\n}\nexport function createSquare1Net(options = {}) {\n    const simulator = initSquare1Simulator(options);\n    const geometry = new Square1Net(simulator.topLayer, simulator.bottomLayer, simulator.middleRotated, options.scheme);\n    return geometry;\n}\nexport function createClock(options = {}) {\n    const simulator = initClockSimulator(options);\n    const geometry = new Clock(simulator.top, simulator.bottom, simulator.pegs, simulator.flipped);\n    return geometry;\n}\nfunction initSquare1Simulator(options) {\n    const simulator = new Square1Simualtor(options.scheme);\n    if (options.case) {\n        simulator.case(options.case);\n    }\n    else if (options.alg) {\n        simulator.alg(options.alg);\n    }\n    return simulator;\n}\nfunction initClockSimulator(options) {\n    const simulator = new ClockSimulator();\n    if (options.alg) {\n        simulator.alg(options.alg);\n    }\n    return simulator;\n}\n","/**\n * Credit to logic https://github.com/toji/gl-matrix/blob/master/src/quat.js\n */\nexport class Quaternion {\n    constructor(a, b, c, d) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n    }\n    static fromEuler(x, y, z) {\n        let halfToRad = Math.PI / 360;\n        x *= halfToRad;\n        z *= halfToRad;\n        y *= halfToRad;\n        let sx = Math.sin(x);\n        let cx = Math.cos(x);\n        let sy = Math.sin(y);\n        let cy = Math.cos(y);\n        let sz = Math.sin(z);\n        let cz = Math.cos(z);\n        let a = sx * cy * cz - cx * sy * sz;\n        let b = cx * sy * cz + sx * cy * sz;\n        let c = cx * cy * sz - sx * sy * cz;\n        let d = cx * cy * cz + sx * sy * sz;\n        return new Quaternion(a, b, c, d);\n    }\n}\n","import { Square1 } from \"./../puzzles/square1/square1\";\nimport { Geometry } from \"./../geometry/geometry\";\nimport { Arrow } from \"./../geometry/arrow\";\nimport { getDefaultOptions } from \"./options\";\nimport { MASK_COLOR } from \"./../puzzles/colors\";\nimport { VisualizerType } from \"./enum\";\nimport { validatePuzzleOptions, } from \"./interface\";\nimport { Scene } from \"../rendering/scene\";\nimport { Camera } from \"./../rendering/camera\";\nimport { applyTransformations } from \"../rendering/utils\";\nimport { Group } from \"../geometry/group\";\nimport { getPuzzleGeometry, getPuzzleSimulator } from \"./puzzleCreator\";\nimport { Matrix4 } from \"../math/matrix\";\nimport { Quaternion } from \"../math/quaternion\";\n/**\n * Applies a color scheme to simulator values\n *\n * @param faceValues face values from the simulator\n * @param scheme color scheme to\n */\nfunction applyColorScheme(faceValues, scheme) {\n    return Object.keys(faceValues).reduce((colors, face) => {\n        colors[face] = faceValues[face].map((value) => scheme[value] || MASK_COLOR);\n        return colors;\n    }, {});\n}\nfunction isSquare1(type) {\n    return type === VisualizerType.SQUARE1 || type === VisualizerType.SQUARE1_NET;\n}\nfunction isPyraminx(type) {\n    return (type === VisualizerType.PYRAMINX || type === VisualizerType.PYRAMINX_NET);\n}\nfunction isMegaminx(type) {\n    return (type === VisualizerType.MEGAMINX ||\n        type === VisualizerType.MEGAMINX_NET ||\n        type === VisualizerType.MEGAMINX_TOP);\n}\nfunction isClock(type) {\n    return type === VisualizerType.CLOCK;\n}\n/**\n * Return true if we can apply simulator colors. Currently\n * we don't simulate n-layered megaminx/pyraminx.\n */\nfunction canApplySimulatorColors(type, size) {\n    if (isPyraminx(type)) {\n        return size === 3;\n    }\n    if (isMegaminx(type)) {\n        return size === 2;\n    }\n    return true;\n}\nfunction createArrow(a, puzzle, group) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    // Get the face the arrow is pointing to\n    let startFace = puzzle.faces[a.start.face];\n    let endFace = puzzle.faces[a.end.face];\n    if (!startFace || !endFace) {\n        throw new Error(`Invalid arrow definition ${JSON.stringify(a)}`);\n    }\n    // Transform from sticker coordinates to group coordinates\n    let startTransformations = [\n        startFace.matrix,\n        puzzle.group.matrix,\n        group.matrix,\n    ];\n    let endTransformations = [endFace.matrix, puzzle.group.matrix, group.matrix];\n    let start;\n    let end;\n    // Get the stickers on the face\n    if (startFace instanceof Geometry && endFace instanceof Geometry) {\n        start = (_a = startFace.faces[a.start.sticker]) === null || _a === void 0 ? void 0 : _a.centroid;\n        end = (_b = endFace.faces[a.end.sticker]) === null || _b === void 0 ? void 0 : _b.centroid;\n    }\n    else {\n        if (puzzle instanceof Square1) {\n            start = (_c = startFace.objects[a.start.sticker]) === null || _c === void 0 ? void 0 : _c.faces[0].centroid;\n            end = (_d = endFace.objects[a.end.sticker]) === null || _d === void 0 ? void 0 : _d.faces[0].centroid;\n        }\n        else {\n            start = (_e = startFace.objects[a.start.sticker]) === null || _e === void 0 ? void 0 : _e.centroid;\n            end = (_f = endFace.objects[a.end.sticker]) === null || _f === void 0 ? void 0 : _f.centroid;\n        }\n        startTransformations.unshift((_g = startFace.objects[a.start.sticker]) === null || _g === void 0 ? void 0 : _g.matrix);\n        endTransformations.unshift((_h = endFace.objects[a.end.sticker]) === null || _h === void 0 ? void 0 : _h.matrix);\n    }\n    if (!start || !end) {\n        throw new Error(`Invalid arrow definition ${JSON.stringify(a)}`);\n    }\n    let p1 = applyTransformations(start, startTransformations);\n    let p2 = applyTransformations(end, endTransformations);\n    return new Arrow(p1, p2);\n}\n/**\n * Encapsulates logic for setting up a puzzle environment for rendering\n * images. Sets up puzzle geometry, applies any algorithm or masking\n * if necessary, and renders the puzzle\n */\nexport class Visualizer {\n    constructor(renderer, type, options = {}) {\n        this.type = type;\n        this.camera = new Camera();\n        this.scene = new Scene();\n        this.group = new Group();\n        this.scene.add(this.group);\n        this.renderer = renderer;\n        this.initPuzzleOptions(options);\n        this.puzzleGeometry = getPuzzleGeometry(this.type, this.options);\n        this.simulator = getPuzzleSimulator(this.type, this.options);\n        this.buildGroupMatrix();\n        this.applyColors();\n        this.addArrows();\n        this.group.addObject(this.puzzleGeometry.group);\n        this.render();\n    }\n    applyColors() {\n        const hasCustomColors = this.options.stickerColors &&\n            !isSquare1(this.type) &&\n            !isClock(this.type);\n        const canUseSimulator = canApplySimulatorColors(this.type, this.options.size);\n        if (hasCustomColors) {\n            this.puzzleGeometry.setColors(this.options.stickerColors);\n        }\n        else if (canUseSimulator) {\n            this.applySimulatorColors();\n        }\n        else {\n            // Apply scheme to puzzle geomety manually, for puzzles\n            // not supported by simulators (megaminx != 2 pyraminx != 3)\n            const faces = this.puzzleGeometry.faces;\n            Object.keys(faces).forEach((face) => {\n                const stickers = faces[face];\n                const faceColor = this.options.scheme[face];\n                if (stickers instanceof Geometry) {\n                    stickers.faces.forEach((f) => (f.color = faceColor));\n                }\n                else if (stickers instanceof Group) {\n                    stickers.objects.forEach((o) => (o.color = faceColor));\n                }\n            });\n        }\n    }\n    applySimulatorColors() {\n        if (this.options.mask)\n            this.applyMask(this.options);\n        if (this.options.alg || this.options.case)\n            this.applyAlgorithm();\n        const faceValues = this.simulator.getValues();\n        const faceColors = applyColorScheme(faceValues, this.options.scheme);\n        this.puzzleGeometry.setColors(faceColors);\n    }\n    applyAlgorithm() {\n        if (isSquare1(this.type)) {\n            // puzzle factory applies algorithm to square 1 when greating the puzzle geometry\n            return;\n        }\n        if (this.options.case) {\n            this.simulator.case(this.options.case);\n        }\n        else if (this.options.alg) {\n            this.simulator.alg(this.options.alg);\n        }\n    }\n    applyMask(options) {\n        Object.keys(options.mask).forEach((maskedFace) => {\n            options.mask[maskedFace].forEach((index) => this.simulator.setValue(maskedFace, index, \"mask\"));\n        });\n    }\n    /**\n     * build the group matrix for the puzzle. This sets up the\n     * rotation, scale, and translation for the resulting rendered\n     * image.\n     */\n    buildGroupMatrix() {\n        this.group.matrix = new Matrix4();\n        // Rotate the group matrix\n        if (this.options.rotations) {\n            this.options.rotations.forEach((rotation) => {\n                const { x = 0, y = 0, z = 0 } = rotation;\n                let rotationMatrix = Matrix4.fromQuaternion(Quaternion.fromEuler(x, y, z));\n                Matrix4.multiply(this.group.matrix, rotationMatrix, this.group.matrix);\n            });\n        }\n        // Scale the group matrix\n        if (this.options.scale) {\n            let scale = this.options.scale;\n            this.group.matrix.scale(scale, scale, scale);\n        }\n        // Translate the group matrix\n        if (this.options.translation) {\n            const { x = 0, y = 0, z = 0 } = this.options.translation;\n            let translationMatrix = Matrix4.fromTranslation(x, y, z);\n            Matrix4.multiply(this.group.matrix, translationMatrix, this.group.matrix);\n        }\n    }\n    addArrows() {\n        if (!this.options.arrows) {\n            return;\n        }\n        this.options.arrows.forEach((arrow) => {\n            try {\n                this.scene.add(createArrow(arrow, this.puzzleGeometry, this.group));\n            }\n            catch (e) {\n                console.error(e);\n                console.warn(`Invalid arrow ${JSON.stringify(arrow)}`);\n            }\n        });\n    }\n    initPuzzleOptions(options) {\n        this.options = Object.assign(Object.assign({}, getDefaultOptions(this.type)), options);\n        validatePuzzleOptions(this.options);\n    }\n    applyOptionsToPuzzle() {\n        this.simulator.reset();\n        this.buildGroupMatrix();\n        this.applyColors();\n        this.addArrows();\n    }\n    setPuzzleOptions(options) {\n        this.initPuzzleOptions(options);\n        // Handle square1 geometry separately, since it\n        // changes, unlike the other puzzles\n        if (isSquare1(this.type)) {\n            this.puzzleGeometry = getPuzzleGeometry(this.type, this.options);\n            this.group.setObjects([this.puzzleGeometry.group]);\n        }\n        this.applyOptionsToPuzzle();\n    }\n    render() {\n        this.renderer.render(this.scene, this.camera);\n    }\n}\n","import { BLACK, GREY } from \"./../puzzles/colors\";\nimport { Visualizer } from \"./visualizer\";\nimport { HtmlSvgRenderer } from \"../rendering/htmlSvgRenderer\";\nimport { validColor } from \"./interface\";\nconst defaultOptions = {\n    width: 500,\n    height: 500,\n    minx: -0.9,\n    miny: -0.9,\n    svgWidth: 1.8,\n    svgHeight: 1.8,\n    strokeWidth: 0.02,\n    arrowColor: GREY,\n    arrowStrokeWidth: 0.03,\n};\n/**\n * Visualize puzzles with svg in a DOM\n */\nexport function SVG(element, type, options = {}) {\n    return new SvgVisualizer(element, type, options);\n}\nexport class SvgVisualizer extends Visualizer {\n    constructor(element, type, options = {}) {\n        options = Object.assign(Object.assign({}, defaultOptions), options);\n        if (typeof element === \"string\") {\n            element = document.querySelector(element);\n            if (element === null) {\n                throw new Error(`Could not find visuzlier element by query selector: ${element}`);\n            }\n        }\n        const renderer = new HtmlSvgRenderer(options.width, options.height, options.minx, options.miny, options.svgWidth, options.svgHeight, options.arrowColor);\n        renderer.strokeWidth = \"\" + options.strokeWidth;\n        element.appendChild(renderer.domElement);\n        super(renderer, type, options.puzzle);\n        this.svgOptions = options;\n    }\n    /**\n     * Set the stroke width for the svg elements rendered and re draw the puzzle.\n     *\n     * @param strokeWidth - value to set the stroke width to. It depends on the svg options and puzzle size,\n     *                      but good values are around .01 - .06\n     */\n    setStrokeWidth(strokeWidth) {\n        this.svgOptions.strokeWidth = strokeWidth;\n        this.renderer.strokeWidth =\n            \"\" + this.svgOptions.strokeWidth;\n        this.render();\n    }\n    /**\n     * Dynamically update the svg element options\n     *\n     * @param options - options for the svg element that is being rendered to\n     */\n    setSvgOptions(options) {\n        this.svgOptions = Object.assign(Object.assign({}, defaultOptions), options);\n        validateSvgOptions(this.svgOptions);\n        const renderer = this.renderer;\n        const svgElement = renderer.svgElement;\n        renderer.strokeWidth = \"\" + this.svgOptions.strokeWidth;\n        renderer.arrowStrokeWidth = \"\" + this.svgOptions.arrowStrokeWidth;\n        svgElement.setAttributeNS(null, \"width\", this.svgOptions.width.toString());\n        svgElement.setAttributeNS(null, \"height\", this.svgOptions.width.toString());\n        svgElement.setAttributeNS(null, \"viewBox\", `${this.svgOptions.minx} ${this.svgOptions.miny} ${this.svgOptions.svgWidth} ${this.svgOptions.svgHeight}`);\n        this.render();\n    }\n}\nfunction validateSvgOptions(options) {\n    if (!Number.isInteger(options.width)) {\n        console.warn(`invalid svg width ${options.width}. Must be a whole number`);\n        options.width = defaultOptions.width;\n    }\n    if (!Number.isInteger(options.height)) {\n        console.warn(`invalid svg height ${options.height}. Must be a whole number`);\n        options.width = defaultOptions.height;\n    }\n    if (!Number.isFinite(options.minx)) {\n        console.warn(`invalid svg minx ${options.minx}`);\n        options.minx = defaultOptions.minx;\n    }\n    if (!Number.isFinite(options.miny)) {\n        console.warn(`invalid svg miny ${options.miny}`);\n        options.minx = defaultOptions.miny;\n    }\n    if (!Number.isFinite(options.svgWidth)) {\n        console.warn(`invalid svgWidth ${options.svgWidth}`);\n        options.minx = defaultOptions.svgWidth;\n    }\n    if (!Number.isFinite(options.svgHeight)) {\n        console.warn(`invalid svgHeight ${options.svgHeight}`);\n        options.minx = defaultOptions.svgHeight;\n    }\n    if (!Number.isFinite(options.strokeWidth)) {\n        console.warn(`invalid strokeWidth ${options.strokeWidth}`);\n        options.minx = defaultOptions.strokeWidth;\n    }\n    if (!Number.isFinite(options.arrowStrokeWidth)) {\n        console.warn(`invalid arrowStrokeWidth ${options.arrowStrokeWidth}`);\n        options.minx = defaultOptions.arrowStrokeWidth;\n    }\n    if (options.arrowColor && !validColor(options.arrowColor)) {\n        options.arrowColor = BLACK;\n    }\n}\n","import { GREY } from \"./../puzzles/colors\";\nimport { SVG } from \"./svg\";\nconst defaultOptions = {\n    width: 500,\n    height: 500,\n    minx: -0.9,\n    miny: -0.9,\n    svgWidth: 1.8,\n    svgHeight: 1.8,\n    strokeWidth: 0.02,\n    arrowColor: GREY,\n    arrowStrokeWidth: 0.03,\n};\n/**\n * Creates PNG element\n */\nexport function PNG(container, type, options = {}) {\n    if (typeof container === \"string\") {\n        container = document.querySelector(container);\n        if (container === null) {\n            throw new Error(`Could not find visuzlier element by query selector: ${container}`);\n        }\n    }\n    let element = document.createElement(\"div\");\n    options = Object.assign(Object.assign({}, defaultOptions), options);\n    SVG(element, type, options);\n    setTimeout(() => {\n        let svgElement = element.querySelector(\"svg\");\n        let targetImage = document.createElement(\"img\");\n        container.appendChild(targetImage);\n        let canvas = document.createElement(\"canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let loader = new Image();\n        loader.width = canvas.width = targetImage.width = options.width;\n        loader.height = canvas.height = targetImage.height = options.height;\n        loader.onload = function () {\n            ctx.drawImage(loader, 0, 0, loader.width, loader.height);\n            targetImage.src = canvas.toDataURL();\n        };\n        var svgAsXML = new XMLSerializer().serializeToString(svgElement);\n        loader.src = `data:image/svg+xml,${encodeURIComponent(svgAsXML)}`;\n    });\n}\n","import { Visualizer } from \".\";\nimport { HtmlCanvasRenderer } from \"../rendering/htmlCanvasRenderer\";\nimport { GREY } from \"../puzzles/colors\";\nconst defaultOptions = {\n    width: 500,\n    height: 500,\n    lineWidth: 5,\n    arrowColor: GREY,\n};\n/**\n * Visualize puzzles with canvas\n */\nexport function Canvas(element, type, options = {}) {\n    return new CanvasVisualizer(element, type, options);\n}\nexport class CanvasVisualizer extends Visualizer {\n    constructor(element, type, options) {\n        options = Object.assign(Object.assign({}, defaultOptions), options);\n        if (typeof element === \"string\") {\n            element = document.querySelector(element);\n            if (element === null) {\n                throw new Error(`Could not find visuzlier element by query selector: ${element}`);\n            }\n        }\n        const renderer = new HtmlCanvasRenderer(options.width, options.height, options.lineWidth, options.arrowColor);\n        element.appendChild(renderer.domElement);\n        super(renderer, type, options.puzzle);\n    }\n}\n","export const Masks = {\n    CUBE_3: {\n        LAST_LAYER: {\n            F: [3, 4, 5, 6, 7, 8],\n            B: [3, 4, 5, 6, 7, 8],\n            R: [3, 4, 5, 6, 7, 8],\n            L: [3, 4, 5, 6, 7, 8],\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        F2L: {\n            F: [0, 1, 2],\n            B: [0, 1, 2],\n            R: [0, 1, 2],\n            L: [0, 1, 2],\n            U: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        FIRST_LAYER: {\n            F: [0, 1, 2, 3, 4, 5],\n            B: [0, 1, 2, 3, 4, 5],\n            R: [0, 1, 2, 3, 4, 5],\n            L: [0, 1, 2, 3, 4, 5],\n            U: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        OLL: {\n            R: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n            F: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n            L: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n            B: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        CORNERS_LAST_LAYER: {\n            U: [1, 3, 5, 7],\n            F: [1, 3, 4, 5, 6, 7, 8],\n            B: [1, 3, 4, 5, 6, 7, 8],\n            R: [1, 3, 4, 5, 6, 7, 8],\n            L: [1, 3, 4, 5, 6, 7, 8],\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        EDGES_LAST_LAYER: {\n            U: [0, 2, 6, 8],\n            F: [0, 2, 3, 4, 5, 6, 7, 8],\n            B: [0, 2, 3, 4, 5, 6, 7, 8],\n            R: [0, 2, 3, 4, 5, 6, 7, 8],\n            L: [0, 2, 3, 4, 5, 6, 7, 8],\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n    },\n    MEGA_3: {\n        OLL: {\n            F: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            R: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            L: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            BR: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            BL: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            d: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            b: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            dl: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            dr: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            bl: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            br: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        },\n    },\n};\n","import { TurnType } from \"./algorithms/algorithm\";\nimport { parseCubeAlgorithm } from \"./algorithms/cube\";\nimport { Square1Simualtor } from \"./simulator/square1/square1Simulator\";\nimport { SkewbSimulator } from \"./simulator/skewb/skewbSimulator\";\nimport { PyraminxSimulator } from \"./simulator/pyraminx/pyraminxSimulator\";\nimport { MegaminxSimulator } from \"./simulator/megaminx/megaminxSimulator\";\nimport { RubiksCubeSimulator } from \"./simulator/rubiksCube/rubiksCubeSimulator\";\nimport { Square1Net } from \"./puzzles/square1/square1Net\";\nimport { Square1 } from \"./puzzles/square1/square1\";\nimport { SkewbNet } from \"./puzzles/skewb/skewbNet\";\nimport { Skewb } from \"./puzzles/skewb/skewb\";\nimport { PyraminxNet } from \"./puzzles/pyraminx/pyraminxNet\";\nimport { Pyraminx } from \"./puzzles/pyraminx/pyraminx\";\nimport { MegaminxNet } from \"./puzzles/megaminx/megaminxNet\";\nimport { Megaminx } from \"./puzzles/megaminx/megaminx\";\nimport { RubiksCubeTopLayer } from \"./puzzles/rubiksCube/rubiksCubeTop\";\nimport { RubiksCubeNet } from \"./puzzles/rubiksCube/rubiksCubeNet\";\nimport { RubiksCube } from \"./puzzles/rubiksCube/rubiksCube\";\nimport { HtmlSvgRenderer } from \"./rendering/htmlSvgRenderer\";\nimport { HtmlCanvasRenderer } from \"./rendering/htmlCanvasRenderer\";\nimport { PolygonRenderer } from \"./rendering/polygonRenderer\";\nimport { Camera } from \"./rendering/camera\";\nimport { Scene } from \"./rendering/scene\";\nimport { parseMegaminxAlgorithm } from \"./algorithms/megaminx\";\nimport { parsePyraminxAlgorithm } from \"./algorithms/pyraminx\";\nimport { parseSkewbAlgorithm } from \"./algorithms/skewb\";\nimport { parseSquare1Algorithm } from \"./algorithms/square1\";\nimport * as Colors_1 from \"./puzzles/colors\";\nexport { Colors_1 as Colors };\nexport * from \"./visualizer\";\nexport * from \"./rendering/renderer\";\nexport const Rendering = {\n    Scene,\n    Camera,\n    HtmlSvgRenderer,\n    HtmlCanvasRenderer,\n    PolygonRenderer,\n};\nexport const PuzzleGeometry = {\n    RubiksCube,\n    RubiksCubeNet,\n    RubiksCubeTopLayer,\n    Megaminx,\n    MegaminxNet,\n    Pyraminx,\n    PyraminxNet,\n    Skewb,\n    SkewbNet,\n    Square1,\n    Square1Net,\n};\nexport const Simulator = {\n    RubiksCubeSimulator,\n    MegaminxSimulator,\n    PyraminxSimulator,\n    SkewbSimulator,\n    Square1Simualtor,\n};\nexport const Algorithm = {\n    TurnType,\n    parseCubeAlgorithm: parseCubeAlgorithm,\n    parseMegaminxAlgorithm: parseMegaminxAlgorithm,\n    parsePyraminxAlgorithm: parsePyraminxAlgorithm,\n    parseSkewbAlgorithm: parseSkewbAlgorithm,\n    parseSquare1Algorithm: parseSquare1Algorithm,\n};\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","TurnType","TurnAbbreviation","CubeAlgorithmUnit","possibleMoves","F","U","R","L","D","B","M","E","S","X","Y","Z","cubeRotations","cubeTurnRegex","parseCubeAlgorithm","algorithm","match","turns","exec","rawSlices","rawFace","outerBlockIndicator","rawType","Clockwise","isLowerCaseMove","toLowerCase","indexOf","toUpperCase","turn","unit","getMove","turnType","getTurnType","slices","getSlices","push","Error","intValue","parseInt","CounterClockwise","Double","Simulator","constructor","stickers","Map","faces","addFace","label","has","size","toString","stickerIds","reduce","nextSticker","stickerId","set","faceId","addTurn","changes","doTurn","reverse","movingSticker","replacedSticker","cached","forEach","change","isSolved","entries","entry","next","id","done","getValues","values","map","setValue","face","index","console","warn","faceStickers","alg","split","reset","faceName","YELLOW","RED","BLUE","WHITE","ORANGE","GREEN","PURPLE","GREY","DARK_BLUE","LIGHT_YELLOW","LIGHT_GREEN","PINK","BLACK","MASK_COLOR","YELLOW_STICKERLESS","stroke","RED_STICKERLESS","BLUE_STICKERLESS","WHITE_STICKERLESS","ORANGE_STICKERLESS","GREEN_STICKERLESS","PURPLE_STICKERLESS","GREY_STICKERLESS","DARK_BLUE_STICKERLESS","LIGHT_YELLOW_STICKERLESS","LIGHT_GREEN_STICKERLESS","PINK_STICKERLESS","PIECE_TYPE","x","y","z","fromValues","fromVec2","vec2","transformMat4","m","w","translate","multiply","rotateX","origin","radians","Math","cos","sin","rotateZ","clone","Vector2","ROTATION_VECTOR","TOP_COLOR","BOTTOM_COLOR","FRONT_COLOR","LEFT_COLOR","RIGHT_COLOR","BACK_COLOR","DEFAULT_SQ1_SCHEME","top","front","bottom","left","right","back","SOLVED_TOP_PIECES","type","CORNER","colors","EDGE","SOLVED_BOTTOM_PIECES","square1TurnRegex","parseSquare1Algorithm","slice","pieceValue","Square1Simualtor","scheme","super","topLayer","solvedTop","bottomLayer","solvedBottom","middleRotated","move","rotateTop","rotateBottom","topNum","bottomNum","i","length","topSlice","splice","bottomSlice","concat","originalTurns","piece","shift","abs","pop","unshift","skewbTurnRegex","DirectionToTurnType","parseSkewbAlgorithm","rawUnit","rawDirection","fillArray","Array","fill","SkewbSimulator","center","topLeft","topRight","bottomLeft","bottomRight","doTurns","assign","pyraminxTurnRegex","parsePyraminxAlgorithm","PyraminxSimulator","u","r","l","b","MEGAMINX_FACES","megaminxTurnNotation","PochmannDirections","FaceClockwise","FaceCounter","parseMegaminxAlgorithm","rawNumber","n","MegaminxSimulator","dr","dl","d","br","BR","BL","bl","makeFaceTurnDefinitions","Dxx","Rxx","turnFunc","bind","SIMULATOR_FACE","CUBE_FACES","CUBE_AXIS","CUBE_AXIS_FACES","AXIS_ORIENTATION","AXIS_FACE_ORIENTATION","degreesToRadians","degrees","PI","polarToCartesian","radius","theta","dodecahedronInRadius","sqrt","calculateCentroid","vertices","cx","cy","cz","vertex","RubiksCubeSimulator","gridSize","faceChanges","axis","column","layerChanges","nextFaceName","nextFace","currentFace","row","stickerIndex","sticker1","axisAlignedSticker","sticker2","clockwiseSticker","counterClockwiseSticker","oppositeSticker","turnFace","from","to","error","increment","current","range","layer","layers","generateUid","Matrix4","isArray","m1","m2","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12","m13","m14","m15","m16","fromQuaternion","q","a","c","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","fromTranslation","fromXRotation","s","fromYRotation","copy","out","matrix","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","perspective","fovy","aspect","near","far","f","tan","Infinity","nf","scale","rotate","len","hypot","b00","b01","b02","b10","b11","b12","b20","b21","b22","t","Object3D","uid","centroid","rad","setColor","color","Group","objects","setObjects","addObject","object","setCentroid","vector","ATAN_15_DEG","atan","DEG_30_RADIANS","DEG_60_RADIANS","Square1Builder","sideLength","halfSide","halfEdgePiece","layerWidth","middleWidth","halfMiddleWidth","borderLayerWidth","outerHalfSide","outerHalfEdgePiece","pieces","buildSquare1","group","makeLayer","geometry","angle","corner","square1Corner","edge","square1Edge","setColors","Face","indices","filter","v","includes","Geometry","Square1Net","side1","side2","points","side","square1Middle","rotated","layerHeight","halfMiddleHeight","cornerLength","frontColor","leftColor","backColor","INNER_FACE_COLOR","Square1","innerCentroid","innerFaceCentroid","rightColor","Plane","width","height","Triangle","verticies","SkewbNet","centerWidth","pow","cubeWidth","orange","makeStickers","green","white","red","yellow","blue","triangles","triangle","setFaceColors","Skewb","halfWidth","TriangleLattice","base","halfBase","fullHeight","triangleBase","triangleHeight","inradius","count","PyraminxNet","inDiameter","faceSpacing","lattice","ARC_COS_THIRD","acos","DEG_120_RADIANS","SQRT_24","Pyraminx","insphereRadius","DividedPentagon","outRadius","pentagonOutRadius","radiusDiff","aSquared","angleRadians","cSquared","layerWidthToRadiusDiff","layerVerticies","faceVerticies","firstLayerFace","totalPoints","currentPoint","layerPoints","downMap","downMapping","prevLayer","layerVertexNumbers","currentLayer","currentLayerPoint","f2isCorner","f1","f2","f3","f4","makeFaces","mapping","previousPoints","vertexNumbers","segmentPoints","p1","p2","segments","lineSegmentLength","lastPoint","first","last","OPTIMAL_LAYER_WIDTH","MegaminxNet","getLayerWidth","ind","pentagonInRadius","bottomTransforms","oldSetColors","numStickers","array","chunkSize","newSize","ceil","_","chunkArray","Megaminx","megaminxRadius","makeGrid","halfLength","elementWidth","halfElementWidth","vOffset","makeRow","hOffset","RubiksCubeTopLayer","rotationAngle","halfCubeWidth","stickerWidth","halfStickerWidth","borderOffset","rotateBorder","g","sticker","RubiksCubeNet","RubiksCube","Arrow","applyTransformations","transforms","PolygonRenderer","polygons","arrows","render","scene","camera","renderObject3D","onBeforeRender","renderPolygons","renderArrows","onComplete","sort","p","drawPolygon","drawArrow","transformations","renderGeometry","renderArrow","screenPoint","addPolygon","objectToScreen","p1Screen","p2Screen","sortObjects","sorted","aToWorld","bToWorld","aCentroid","bCentroid","updatePolygonElement","polygon","strokeWidth","pointsAttribute","pointString","point","makePointsAttributeValue","colorValue","strokeValue","setAttributeNS","HtmlSvgRenderer","minx","miny","svgWidth","svgHeight","arrowColor","arrowStrokeWidth","lines","uidToPolygon","uidToLine","domElement","document","createElement","className","svgElement","createElementNS","createSVGElement","markers","defs","arrowHeadMarker","arrowHeadPolygon","appendChild","createMarkers","createPolygonElement","arrow","start","end","line","strokeColor","createArrowLineElement","HtmlCanvasRenderer","lineWidth","canvasElement","ctx","getContext","convertRange","clearRect","_a","_b","lineJoin","fillStyle","strokeStyle","moveTo","beginPath","lineTo","closePath","toX","toY","fromX","fromY","dx","dy","atan2","setLineWidth","Camera","Scene","add","clear","VisualizerType","defaultCubeOptions","rotations","defaultMegaminxOptions","defaultPyraminxOptions","defaultSkewbOptions","defaultSquare1Options","defaultClockOptions","validatePuzzleOptions","options","case","keys","faceColor","mask","maskValues","Number","isInteger","stickerColors","faceColors","validColor","validRotation","isFinite","translation","validTranslation","validArrow","MegaminxTop","createFaces","removeHiddenStickers","clockTurnRegex","ClockMoveType","ClockCorner","PegState","parseMove","rawCorner","rawValue","direction","parseDirection","parseType","parseCorner","parseValue","clockwise","ROTATE","DIAL","UL","DL","UR","DR","ALL","dialConfigs","ClockSimulator","pegs","Top","flipped","rotateDials","stringifyPegs","join","invertPegState","ps","state","Bottom","oppositePegState","invertTurnDial","dial","pegState","dialsToTurn","bottomPegState","bottomDial","bottomClocksToTurn","log","setPegs","ul","ur","shouldBeUp","togglePeg","peg","temp","moves","parseClockAlgorithm","Circle","subdivisions","faceIndices","CLOCK_BACKGROUND_VERTICES","GRID_GAP","FACE_RADIUS","PEG_RADIUS","DIAL_SUBDIVISIONS","DIAL_LENGTH","DIAL_RADIUS","Clock","clockBackground","frontFaces","clockFaces","backFaces","frontPegs","clockPegs","backPegs","frontDials","clockDials","backDials","j","hours","clockHours","circles","circle","position","dials","dialValue","dialGeometry","geometryCache","CUBE","CUBE_NET","CUBE_TOP","MEGAMINX","MEGAMINX_NET","MEGAMINX_TOP","PYRAMINX","PYRAMINX_NET","SKEWB","SKEWB_NET","SQUARE1","SQUARE1_NET","getPuzzleGeometry","createCube","createCubeNet","createCubeTop","createMegaminx","createMegaminxNet","createMegaminxTop","createPyraminx","createPyraminxNet","createSkewb","createSkewbNet","simulator","initSquare1Simulator","createSquare1","createSquare1Net","CLOCK","initClockSimulator","createClock","Quaternion","fromEuler","halfToRad","sx","sy","sz","isSquare1","canApplySimulatorColors","isPyraminx","isMegaminx","Visualizer","renderer","initPuzzleOptions","puzzleGeometry","getPuzzleSimulator","buildGroupMatrix","applyColors","addArrows","hasCustomColors","canUseSimulator","applySimulatorColors","applyMask","applyAlgorithm","faceValues","applyColorScheme","maskedFace","rotation","rotationMatrix","translationMatrix","puzzle","_c","_d","_e","_f","_g","_h","startFace","endFace","JSON","stringify","startTransformations","endTransformations","createArrow","e","getDefaultOptions","applyOptionsToPuzzle","setPuzzleOptions","defaultOptions","SVG","element","SvgVisualizer","querySelector","svgOptions","setStrokeWidth","setSvgOptions","validateSvgOptions","PNG","container","setTimeout","targetImage","canvas","loader","Image","onload","drawImage","src","toDataURL","svgAsXML","XMLSerializer","serializeToString","encodeURIComponent","Canvas","CanvasVisualizer","Masks","CUBE_3","LAST_LAYER","F2L","FIRST_LAYER","OLL","CORNERS_LAST_LAYER","EDGES_LAST_LAYER","MEGA_3","Rendering","PuzzleGeometry","Algorithm"],"sourceRoot":""}